/**
 * برنامج المحاسب الذكي - SAM PRO
 * تطوير: MOHANNAD AHMAD
 * الملف الرئيسي للتطبيق
 */

// بيانات التطبيق (محاكاة قاعدة البيانات)
let appData = {
    customers: [
        {
            id: 1,
            name: 'أحمد محمد',
            phone: '0123456789',
            email: 'ahmed@example.com',
            address: 'دمشق - المزة',
            taxNumber: '12345',
            creditLimit: 100000,
            currentBalance: 15000,
            createdAt: '2025-01-01',
            lastTransactionDate: null,
            totalSales: 0,
            totalPayments: 0,
            transactionCount: 0,
            balances: {
                'SYP': 15000
            }
        },
        {
            id: 2,
            name: 'فاطمة علي',
            phone: '0987654321',
            email: 'fatima@example.com',
            address: 'حلب - الصالحين',
            taxNumber: '67890',
            creditLimit: 50000,
            currentBalance: -5000,
            createdAt: '2025-01-02',
            lastTransactionDate: null,
            totalSales: 0,
            totalPayments: 0,
            transactionCount: 0,
            balances: {
                'SYP': -5000
            }
        }
    ],
    suppliers: [
        {
            id: 1,
            name: 'شركة الأمل للتجارة',
            phone: '0111222333',
            email: 'amal@company.com',
            address: 'دمشق - التجارة',
            taxNumber: '11111',
            currentBalance: 25000,
            createdAt: '2025-01-01',
            lastTransactionDate: null,
            totalPurchases: 0,
            totalPayments: 0,
            transactionCount: 0,
            balances: {
                'SYP': 25000
            }
        }
    ],
    products: [
        {
            id: 1,
            code: 'P001',
            name: 'لابتوب ديل',
            description: 'لابتوب ديل انسبايرون 15',
            unit: 'قطعة',
            costPrice: 800000,
            sellingPrice: 1000000,
            quantity: 10,
            minQuantity: 5,
            warehouseId: 1,
            category: 'إلكترونيات'
        },
        {
            id: 2,
            code: 'P002',
            name: 'ماوس لاسلكي',
            description: 'ماوس لاسلكي لوجيتك',
            unit: 'قطعة',
            costPrice: 15000,
            sellingPrice: 20000,
            quantity: 3,
            minQuantity: 10,
            warehouseId: 1,
            category: 'إكسسوارات'
        }
    ],
    warehouses: [
        {
            id: 1,
            name: 'المخزن الرئيسي',
            location: 'دمشق - المنطقة الصناعية',
            manager: 'محمد أحمد',
            phone: '0123456789'
        }
    ],
    invoices: [
        {
            id: 1,
            invoiceNumber: 'SALE-2025-0001',
            invoiceType: 'sale',
            invoiceDate: '2025-01-15',
            customerId: 1,
            subtotal: 1000000,
            discountRate: 5,
            discountAmount: 50000,
            taxRate: 10,
            taxAmount: 95000,
            totalAmount: 1045000,
            paidAmount: 500000,
            remainingAmount: 545000,
            status: 'confirmed',
            notes: 'فاتورة مبيعات تجريبية',
            items: [
                {
                    productId: 1,
                    quantity: 1,
                    unitPrice: 1000000,
                    totalAmount: 1000000
                }
            ],
            createdAt: '2025-01-15T10:30:00.000Z'
        },
        {
            id: 2,
            invoiceNumber: 'SALE-2025-0002',
            invoiceType: 'sale',
            invoiceDate: '2025-01-16',
            customerId: 2,
            subtotal: 125000,
            discountRate: 0,
            discountAmount: 0,
            taxRate: 10,
            taxAmount: 12500,
            totalAmount: 137500,
            paidAmount: 137500,
            remainingAmount: 0,
            status: 'confirmed',
            notes: 'فاتورة مبيعات مدفوعة بالكامل',
            items: [
                {
                    productId: 3,
                    quantity: 1,
                    unitPrice: 50000,
                    totalAmount: 50000
                },
                {
                    productId: 4,
                    quantity: 3,
                    unitPrice: 25000,
                    totalAmount: 75000
                }
            ],
            createdAt: '2025-01-16T14:20:00.000Z'
        },
        {
            id: 3,
            invoiceNumber: 'PUR-2025-0001',
            invoiceType: 'purchase',
            invoiceDate: '2025-01-14',
            supplierId: 1,
            subtotal: 8100000,
            discountRate: 2,
            discountAmount: 162000,
            taxRate: 10,
            taxAmount: 793800,
            totalAmount: 8731800,
            paidAmount: 5000000,
            remainingAmount: 3731800,
            status: 'confirmed',
            notes: 'فاتورة مشتريات من المورد الرئيسي',
            items: [
                {
                    productId: 1,
                    quantity: 10,
                    unitPrice: 750000,
                    totalAmount: 7500000
                },
                {
                    productId: 2,
                    quantity: 50,
                    unitPrice: 12000,
                    totalAmount: 600000
                }
            ],
            createdAt: '2025-01-14T09:15:00.000Z'
        }
    ],
    payments: [
        {
            id: 1,
            paymentNumber: 'REC-2025-001',
            paymentType: 'receipt',
            paymentDate: '2025-01-15',
            customerId: 1,
            amount: 500000,
            paymentMethod: 'cash',
            referenceNumber: '',
            bankName: '',
            notes: 'دفعة على حساب الفاتورة',
            status: 'confirmed',
            createdAt: '2025-01-15'
        },
        {
            id: 2,
            paymentNumber: 'PAY-2025-001',
            paymentType: 'payment',
            paymentDate: '2025-01-14',
            supplierId: 1,
            amount: 200000,
            paymentMethod: 'bank',
            referenceNumber: 'TRF123456',
            bankName: 'البنك التجاري السوري',
            notes: 'دفعة للمورد',
            status: 'confirmed',
            createdAt: '2025-01-14'
        }
    ],
    journalEntries: [
        {
            id: 1,
            entryDate: '2025-01-15',
            entryType: 'invoice',
            description: 'فاتورة مبيعات رقم INV-2025-001',
            debitAccount: 'العملاء',
            creditAccount: 'المبيعات',
            debitAmount: 1045000,
            creditAmount: 1045000,
            referenceType: 'invoice',
            referenceId: 1,
            createdAt: '2025-01-15'
        },
        {
            id: 2,
            entryDate: '2025-01-15',
            entryType: 'payment',
            description: 'سند قبض رقم REC-2025-001',
            debitAccount: 'الصندوق',
            creditAccount: 'العملاء',
            debitAmount: 500000,
            creditAmount: 500000,
            referenceType: 'payment',
            referenceId: 1,
            createdAt: '2025-01-15'
        }
    ],
    settings: {
        companyName: 'شركة SAM PRO',
        companyAddress: 'دمشق - سوريا',
        companyPhone: '+963-998-171-954',
        companyEmail: 'info@sampro.sy',
        taxNumber: '123456789',
        currency: 'SYP',
        currencySymbol: 'ل.س',
        taxRate: 10,
        password: '123',
        autoBackup: 'disabled',
        logoUrl: '',
        nextInvoiceNumber: {
            sale: 2,
            purchase: 1
        },
        nextPaymentNumber: {
            receipt: 2,
            payment: 2
        },
        developer: {
            name: 'MOHANNAD AHMAD',
            phone: '+963-998-171-954',
            email: 'mohannad.ahmad@example.com'
        }
    }
};

/**
 * إنشاء معرف فريد
 */
function generateId() {
    // استخدام timestamp مع رقم عشوائي لضمان الفرادة
    return Date.now() + Math.floor(Math.random() * 1000);
}

/**
 * إنشاء معرف فريد أكثر تعقيداً (UUID-like)
 */
function generateUniqueId() {
    return 'id_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// حفظ البيانات في localStorage مع التحقق من الصحة
function saveData() {
    try {
        // التحقق من صحة البيانات قبل الحفظ
        if (!appData) {
            throw new Error('البيانات غير موجودة');
        }

        // التحقق من الهياكل الأساسية
        if (!appData.products) appData.products = [];
        if (!appData.warehouses) appData.warehouses = [];
        if (!appData.customers) appData.customers = [];
        if (!appData.suppliers) appData.suppliers = [];
        if (!appData.inventoryMovements) appData.inventoryMovements = [];

        // تنظيف البيانات من القيم الفارغة أو غير الصحيحة
        appData.products = appData.products.filter(p => p && p.id && p.name);
        appData.warehouses = appData.warehouses.filter(w => w && w.id && w.name);
        appData.customers = appData.customers.filter(c => c && c.id && c.name);
        appData.suppliers = appData.suppliers.filter(s => s && s.id && s.name);
        appData.inventoryMovements = appData.inventoryMovements.filter(m => m && m.id && m.productId);

        // محاولة الحفظ
        const dataString = JSON.stringify(appData);
        localStorage.setItem('samProData', dataString);

        // التحقق من نجاح الحفظ
        const savedData = localStorage.getItem('samProData');
        if (!savedData) {
            throw new Error('فشل في حفظ البيانات');
        }

        console.log('✅ تم حفظ البيانات بنجاح');
        return true;

    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات:', error);

        // محاولة حفظ نسخة احتياطية
        try {
            const backupData = JSON.stringify(appData);
            localStorage.setItem('samProData_backup_' + Date.now(), backupData);
            console.log('💾 تم حفظ نسخة احتياطية');
        } catch (backupError) {
            console.error('❌ فشل في حفظ النسخة الاحتياطية:', backupError);
        }

        throw error;
    }
}

// تحميل البيانات من localStorage
function loadData() {
    console.log('📂 تحميل البيانات من التخزين المحلي...');

    const savedData = localStorage.getItem('samProData');
    if (savedData) {
        try {
            appData = JSON.parse(savedData);
            console.log('✅ تم تحميل البيانات بنجاح');

            // التحقق من وجود الهياكل الأساسية
            if (!appData.settings) appData.settings = {};
            if (!appData.customers) appData.customers = [];
            if (!appData.suppliers) appData.suppliers = [];
            if (!appData.products) appData.products = [];
            if (!appData.warehouses) appData.warehouses = [];
            if (!appData.invoices) appData.invoices = [];
            if (!appData.payments) appData.payments = [];
            if (!appData.journalEntries) appData.journalEntries = [];
            if (!appData.inventoryMovements) appData.inventoryMovements = [];
            if (!appData.users) appData.users = [];

            // تهيئة الإعدادات الافتراضية
            if (!appData.settings.currency) appData.settings.currency = 'SYP';
            if (!appData.settings.currencySymbol) appData.settings.currencySymbol = 'ل.س';
            if (!appData.settings.taxRate) appData.settings.taxRate = 0;
            if (!appData.settings.nextInvoiceNumber) {
                appData.settings.nextInvoiceNumber = { sale: 1, purchase: 1 };
            }
            if (!appData.settings.exchangeRates) appData.settings.exchangeRates = {};

            console.log('✅ تم التحقق من الهياكل الأساسية');

        } catch (error) {
            console.error('❌ خطأ في تحميل البيانات:', error);
            console.log('🔧 إعادة تهيئة البيانات...');
            initializeDefaultData();
        }
    } else {
        console.log('📝 لا توجد بيانات محفوظة - تهيئة البيانات الافتراضية...');
        initializeDefaultData();
    }
}

/**
 * تهيئة البيانات الافتراضية
 */
function initializeDefaultData() {
    console.log('🔧 تهيئة البيانات الافتراضية...');

    appData = {
        settings: {
            companyName: 'شركة سام برو',
            companyAddress: '',
            companyPhone: '+963-998-171-954',
            companyEmail: '',
            taxNumber: '',
            currency: 'SYP',
            currencySymbol: 'ل.س',
            taxRate: 0,
            password: '123',
            enableMultiCurrency: false,
            exchangeRates: {},
            nextInvoiceNumber: { sale: 1, purchase: 1 }
        },
        customers: [],
        suppliers: [],
        products: [],
        warehouses: [
            {
                id: 1,
                name: 'المخزن الرئيسي',
                location: 'المكتب الرئيسي',
                manager: 'مدير المخزن',
                phone: '',
                createdAt: new Date().toISOString().split('T')[0]
            }
        ],
        invoices: [],
        payments: [],
        journalEntries: [],
        inventoryMovements: [],
        users: [
            {
                id: 1,
                username: 'admin',
                password: '123',
                fullName: 'المدير العام',
                email: 'admin@sampro.com',
                role: 'admin',
                permissions: {
                    dashboard: true,
                    customers: true,
                    suppliers: true,
                    products: true,
                    warehouses: true,
                    salesInvoices: true,
                    purchaseInvoices: true,
                    receipts: true,
                    payments: true,
                    inventory: true,
                    reports: true,
                    journal: true,
                    settings: true,
                    backup: true,
                    users: true
                },
                isActive: true,
                createdAt: '2025-01-14',
                lastLogin: null
            },
            {
                id: 2,
                username: 'user',
                password: '123',
                fullName: 'مستخدم عادي',
                email: 'user@sampro.com',
                role: 'user',
                permissions: {
                    dashboard: true,
                    customers: true,
                    suppliers: true,
                    products: true,
                    warehouses: true,
                    salesInvoices: true,
                    purchaseInvoices: true,
                    receipts: true,
                    payments: true,
                    inventory: true,
                    reports: true,
                    journal: true,
                    settings: false,
                    backup: false,
                    users: false
                },
                isActive: true,
                createdAt: '2025-01-14',
                lastLogin: null
            }
        ]
    };

    console.log('✅ تم تهيئة البيانات الافتراضية');
    saveData();
}

/**
 * التحقق من صحة النظام وإصلاح المشاكل
 */
function validateAndFixSystemIssues() {
    console.log('🔍 بدء التحقق من صحة النظام...');

    try {
        let issuesFound = 0;
        let issuesFixed = 0;
        const issues = [];

        // التحقق من صحة البيانات الأساسية
        if (!appData) {
            issues.push('البيانات الأساسية غير موجودة');
            return { success: false, issues };
        }

        // التحقق من الهياكل الأساسية
        if (!appData.products) {
            appData.products = [];
            issuesFixed++;
            issues.push('تم إصلاح: إضافة قائمة الأصناف المفقودة');
        }

        if (!appData.warehouses) {
            appData.warehouses = [];
            issuesFixed++;
            issues.push('تم إصلاح: إضافة قائمة المخازن المفقودة');
        }

        if (!appData.inventoryMovements) {
            appData.inventoryMovements = [];
            issuesFixed++;
            issues.push('تم إصلاح: إضافة قائمة حركات المخزون المفقودة');
        }

        // التحقق من صحة الأصناف
        appData.products.forEach((product, index) => {
            if (!product.id) {
                product.id = generateId();
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة معرف للصنف في الفهرس ${index}`);
            }

            if (!product.name || product.name.trim() === '') {
                product.name = `صنف ${product.id}`;
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة اسم للصنف ${product.id}`);
            }

            if (!product.code || product.code.trim() === '') {
                product.code = `P${product.id}`;
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة كود للصنف ${product.name}`);
            }

            if (typeof product.quantity !== 'number' || isNaN(product.quantity)) {
                product.quantity = 0;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح كمية الصنف ${product.name}`);
            }

            if (typeof product.minQuantity !== 'number' || isNaN(product.minQuantity)) {
                product.minQuantity = 0;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح الحد الأدنى للصنف ${product.name}`);
            }

            if (typeof product.costPrice !== 'number' || isNaN(product.costPrice)) {
                product.costPrice = 0;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح سعر التكلفة للصنف ${product.name}`);
            }

            if (typeof product.sellingPrice !== 'number' || isNaN(product.sellingPrice)) {
                product.sellingPrice = 0;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح سعر البيع للصنف ${product.name}`);
            }

            if (!product.unit || product.unit.trim() === '') {
                product.unit = 'قطعة';
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة وحدة للصنف ${product.name}`);
            }

            // التحقق من وجود المخزن
            if (product.warehouseId && !appData.warehouses.find(w => w.id === product.warehouseId)) {
                if (appData.warehouses.length > 0) {
                    product.warehouseId = appData.warehouses[0].id;
                    issuesFixed++;
                    issues.push(`تم إصلاح: تعيين مخزن صحيح للصنف ${product.name}`);
                }
            }
        });

        // التحقق من تكرار أكواد الأصناف
        const productCodes = {};
        appData.products.forEach(product => {
            if (productCodes[product.code]) {
                product.code = `${product.code}_${product.id}`;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح كود مكرر للصنف ${product.name}`);
            } else {
                productCodes[product.code] = true;
            }
        });

        // التحقق من صحة المخازن
        appData.warehouses.forEach((warehouse, index) => {
            if (!warehouse.id) {
                warehouse.id = generateId();
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة معرف للمخزن في الفهرس ${index}`);
            }

            if (!warehouse.name || warehouse.name.trim() === '') {
                warehouse.name = `مخزن ${warehouse.id}`;
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة اسم للمخزن ${warehouse.id}`);
            }
        });

        // التحقق من صحة حركات المخزون
        appData.inventoryMovements = appData.inventoryMovements.filter(movement => {
            if (!movement.id || !movement.productId || !movement.warehouseId) {
                issuesFound++;
                issues.push(`تم حذف: حركة مخزون غير صحيحة`);
                return false;
            }

            // التحقق من وجود الصنف والمخزن
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

            if (!product || !warehouse) {
                issuesFound++;
                issues.push(`تم حذف: حركة مخزون لصنف أو مخزن محذوف`);
                return false;
            }

            // تصحيح البيانات المفقودة
            if (typeof movement.quantity !== 'number' || isNaN(movement.quantity)) {
                movement.quantity = 0;
                issuesFixed++;
                issues.push(`تم إصلاح: تصحيح كمية في حركة المخزون`);
            }

            if (!movement.date) {
                movement.date = new Date().toISOString().split('T')[0];
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة تاريخ لحركة المخزون`);
            }

            if (!movement.movementType) {
                movement.movementType = 'adjustment';
                issuesFixed++;
                issues.push(`تم إصلاح: إضافة نوع لحركة المخزون`);
            }

            return true;
        });

        // حفظ البيانات المصححة
        if (issuesFixed > 0) {
            try {
                saveData();
                console.log('✅ تم حفظ البيانات المصححة');
            } catch (saveError) {
                console.error('❌ خطأ في حفظ البيانات المصححة:', saveError);
                issues.push('خطأ في حفظ البيانات المصححة');
            }
        }

        console.log(`✅ انتهى التحقق من النظام: ${issuesFound} مشاكل وجدت، ${issuesFixed} مشكلة تم إصلاحها`);

        return {
            success: true,
            issuesFound,
            issuesFixed,
            issues
        };

    } catch (error) {
        console.error('❌ خطأ في التحقق من صحة النظام:', error);
        return {
            success: false,
            error: error.message,
            issues: ['خطأ عام في التحقق من النظام']
        };
    }
}

/**
 * تشغيل فحص شامل للنظام وإصلاح المشاكل
 */
function runSystemDiagnostics() {
    console.log('🔧 بدء فحص النظام الشامل...');

    // إنشاء نافذة منبثقة لعرض نتائج الفحص
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'systemDiagnosticsModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-tools me-2"></i>
                        فحص وإصلاح النظام
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="diagnosticsContent">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">جاري الفحص...</span>
                            </div>
                            <p class="mt-2">جاري فحص النظام وإصلاح المشاكل...</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" id="runDiagnosticsAgain" onclick="startDiagnostics()" style="display: none;">
                        <i class="fas fa-redo me-2"></i>إعادة الفحص
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // بدء الفحص
    setTimeout(() => {
        startDiagnostics();
    }, 500);

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تشغيل عملية الفحص الفعلية
 */
function startDiagnostics() {
    const content = document.getElementById('diagnosticsContent');
    const runAgainBtn = document.getElementById('runDiagnosticsAgain');

    try {
        // تشغيل فحص النظام
        const result = validateAndFixSystemIssues();

        let html = '';

        if (result.success) {
            html = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong>تم الفحص بنجاح!</strong>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="card bg-info text-white">
                            <div class="card-body text-center">
                                <h4>${result.issuesFound || 0}</h4>
                                <small>مشاكل تم اكتشافها</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card bg-success text-white">
                            <div class="card-body text-center">
                                <h4>${result.issuesFixed || 0}</h4>
                                <small>مشاكل تم إصلاحها</small>
                            </div>
                        </div>
                    </div>
                </div>

                ${result.issues && result.issues.length > 0 ? `
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-list me-2"></i>
                                تفاصيل الفحص
                            </h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                ${result.issues.map(issue => `
                                    <li class="list-group-item">
                                        <i class="fas fa-${issue.includes('تم إصلاح') ? 'check text-success' : issue.includes('تم حذف') ? 'trash text-warning' : 'info-circle text-info'} me-2"></i>
                                        ${issue}
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                ` : `
                    <div class="alert alert-success">
                        <i class="fas fa-thumbs-up me-2"></i>
                        لم يتم العثور على أي مشاكل في النظام. النظام يعمل بشكل صحيح!
                    </div>
                `}

                <div class="mt-3">
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        تم الفحص في: ${new Date().toLocaleString('ar-SY')}
                    </small>
                </div>
            `;
        } else {
            html = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>حدث خطأ أثناء الفحص!</strong>
                    <br>
                    ${result.error || 'خطأ غير معروف'}
                </div>

                ${result.issues && result.issues.length > 0 ? `
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">تفاصيل الأخطاء</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                ${result.issues.map(issue => `
                                    <li class="list-group-item text-danger">
                                        <i class="fas fa-exclamation-circle me-2"></i>
                                        ${issue}
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                ` : ''}
            `;
        }

        content.innerHTML = html;

        // إظهار زر إعادة الفحص
        if (runAgainBtn) {
            runAgainBtn.style.display = 'inline-block';
        }

        // إظهار رسالة نجاح أو خطأ
        if (result.success) {
            if (result.issuesFixed > 0) {
                showSuccessToast(`تم إصلاح ${result.issuesFixed} مشكلة في النظام`);
            } else {
                showSuccessToast('النظام يعمل بشكل صحيح');
            }
        } else {
            showErrorToast('حدث خطأ أثناء فحص النظام');
        }

    } catch (error) {
        console.error('❌ خطأ في تشغيل الفحص:', error);
        content.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>خطأ في تشغيل الفحص:</strong>
                <br>
                ${error.message}
            </div>
        `;

        if (runAgainBtn) {
            runAgainBtn.style.display = 'inline-block';
        }
    }
}

/**
 * تحديث حسابات المخزون بدقة
 */
function refreshInventoryCalculations() {
    console.log('🔄 بدء تحديث حسابات المخزون...');

    const button = event.target.closest('button');
    const icon = button.querySelector('i');
    const originalText = button.innerHTML;

    // إضافة تأثير التحميل
    button.disabled = true;
    icon.classList.add('fa-spin');
    button.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i>جاري التحديث...';

    try {
        let updatedProductsCount = 0;
        let deletedMovementsCount = 0;

        // إزالة حركات المنتجات المحذوفة
        if (appData.inventoryMovements) {
            const initialMovementsCount = appData.inventoryMovements.length;

            appData.inventoryMovements = appData.inventoryMovements.filter(movement => {
                const product = appData.products.find(p => p.id === movement.productId);
                const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

                // الاحتفاظ بالحركة فقط إذا كان المنتج والمخزن موجودين وغير محذوفين
                return product && warehouse && product.isActive !== false && warehouse.isActive !== false;
            });

            deletedMovementsCount = initialMovementsCount - appData.inventoryMovements.length;
        }

        // إعادة حساب كميات المنتجات بناءً على الحركات الصحيحة
        appData.products.forEach(product => {
            if (product.isActive === false) return; // تجاهل المنتجات المحذوفة

            // الحصول على جميع حركات هذا المنتج
            const productMovements = (appData.inventoryMovements || []).filter(m =>
                m.productId === product.id &&
                m.warehouseId === product.warehouseId
            );

            // حساب الكمية الصحيحة مع معالجة شاملة لجميع أنواع الحركات
            let calculatedQuantity = 0;
            let totalIn = 0;
            let totalOut = 0;

            productMovements.forEach(movement => {
                const quantity = parseFloat(movement.quantity) || 0;

                // معالجة شاملة ودقيقة لجميع أنواع الحركات
                switch (movement.movementType) {
                    case 'in':
                    case 'purchase':
                    case 'return_sale':
                    case 'transfer_in':
                        totalIn += Math.abs(quantity);
                        calculatedQuantity += Math.abs(quantity);
                        break;

                    case 'out':
                    case 'sale':
                    case 'return_purchase':
                    case 'transfer_out':
                        totalOut += Math.abs(quantity);
                        calculatedQuantity -= Math.abs(quantity);
                        break;

                    case 'adjustment':
                        // التسوية يمكن أن تكون موجبة أو سالبة
                        if (quantity >= 0) {
                            totalIn += quantity;
                            calculatedQuantity += quantity;
                        } else {
                            totalOut += Math.abs(quantity);
                            calculatedQuantity += quantity; // quantity سالب بالفعل
                        }
                        break;

                    case 'transfer':
                        // التحويل بين المخازن
                        if (movement.warehouseId === product.warehouseId) {
                            // إخراج من المخزن الحالي
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                        } else if (movement.toWarehouseId === product.warehouseId) {
                            // إدخال للمخزن الحالي
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                        }
                        break;

                    default:
                        // معالجة الأنواع القديمة للتوافق مع النسخ السابقة
                        if (movement.movementType.includes('in') || quantity > 0) {
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                        } else {
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                        }
                        console.warn(`⚠️ نوع حركة غير معروف: ${movement.movementType} للمنتج ${product.name}`);
                }
            });

            // التأكد من أن الكمية لا تكون سالبة
            calculatedQuantity = Math.max(0, calculatedQuantity);

            // تحديث الكمية إذا كانت مختلفة
            const currentQuantity = parseFloat(product.quantity) || 0;
            if (Math.abs(currentQuantity - calculatedQuantity) > 0.001) {
                console.log(`📦 تحديث كمية ${product.name}: ${currentQuantity} → ${calculatedQuantity}`);
                product.quantity = calculatedQuantity;
                product.totalIn = totalIn;
                product.totalOut = totalOut;
                product.lastUpdated = new Date().toISOString();
                updatedProductsCount++;
            }
        });

        // حفظ البيانات المحدثة
        saveData();

        // إعادة تحميل الصفحة لإظهار التحديثات
        setTimeout(() => {
            showPage('inventory');

            // إظهار رسالة النجاح
            const message = `تم تحديث حسابات المخزون بنجاح!\n\n` +
                          `• تم تحديث ${updatedProductsCount} منتج\n` +
                          `• تم حذف ${deletedMovementsCount} حركة للمنتجات المحذوفة\n` +
                          `• تم إعادة حساب الإدخالات والإخراجات والصافي بدقة`;

            showSuccessToast('تم تحديث حسابات المخزون بنجاح!');

            // إظهار تفاصيل التحديث في وحدة التحكم
            console.log('✅ تم تحديث حسابات المخزون:', {
                'منتجات محدثة': updatedProductsCount,
                'حركات محذوفة': deletedMovementsCount,
                'إجمالي المنتجات النشطة': appData.products.filter(p => p.isActive !== false).length,
                'إجمالي الحركات': appData.inventoryMovements?.length || 0
            });

        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في تحديث حسابات المخزون:', error);

        // استعادة الزر
        button.disabled = false;
        icon.classList.remove('fa-spin');
        button.innerHTML = originalText;

        alert('حدث خطأ أثناء تحديث حسابات المخزون: ' + error.message);
    }
}

/**
 * تصدير قائمة العملاء إلى Excel
 */
function exportCustomersToExcel() {
    console.log('📊 تصدير قائمة العملاء إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'كود العميل',
            'اسم العميل',
            'رقم الهاتف',
            'البريد الإلكتروني',
            'العنوان',
            'المدينة',
            'الرصيد الحالي',
            'إجمالي المبيعات',
            'إجمالي المدفوعات',
            'تاريخ الإنشاء',
            'آخر معاملة',
            'الحالة'
        ];

        const data = appData.customers.map(customer => [
            customer.code || customer.id,
            customer.name,
            customer.phone || '-',
            customer.email || '-',
            customer.address || '-',
            customer.city || '-',
            formatCurrency(customer.currentBalance || 0),
            formatCurrency(customer.totalSales || 0),
            formatCurrency(customer.totalPayments || 0),
            customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('ar-SY') : '-',
            customer.lastTransactionDate ? new Date(customer.lastTransactionDate).toLocaleDateString('ar-SY') : '-',
            customer.isActive !== false ? 'نشط' : 'غير نشط'
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'قائمة العملاء');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'العملاء');

        // إضافة ورقة الملخص
        const summaryData = [
            ['ملخص قائمة العملاء'],
            [''],
            ['إجمالي عدد العملاء', appData.customers.length],
            ['العملاء النشطون', appData.customers.filter(c => c.isActive !== false).length],
            ['العملاء غير النشطين', appData.customers.filter(c => c.isActive === false).length],
            ['إجمالي الأرصدة المدينة', formatCurrency(appData.customers.reduce((sum, c) => sum + Math.max(0, c.currentBalance || 0), 0))],
            ['إجمالي الأرصدة الدائنة', formatCurrency(Math.abs(appData.customers.reduce((sum, c) => sum + Math.min(0, c.currentBalance || 0), 0)))],
            ['إجمالي المبيعات', formatCurrency(appData.customers.reduce((sum, c) => sum + (c.totalSales || 0), 0))],
            ['إجمالي المدفوعات', formatCurrency(appData.customers.reduce((sum, c) => sum + (c.totalPayments || 0), 0))],
            [''],
            ['تاريخ التقرير', new Date().toLocaleDateString('ar-SY')],
            ['وقت التقرير', new Date().toLocaleTimeString('ar-SY')]
        ];

        const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص');

        // حفظ الملف
        const fileName = `قائمة_العملاء_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير قائمة العملاء إلى Excel بنجاح');
        showSuccessToast('تم تصدير قائمة العملاء إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير قائمة العملاء إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير قائمة الموردين إلى Excel
 */
function exportSuppliersToExcel() {
    console.log('📊 تصدير قائمة الموردين إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'كود المورد',
            'اسم المورد',
            'رقم الهاتف',
            'البريد الإلكتروني',
            'العنوان',
            'المدينة',
            'الرصيد الحالي',
            'إجمالي المشتريات',
            'إجمالي المدفوعات',
            'تاريخ الإنشاء',
            'آخر معاملة',
            'الحالة'
        ];

        const data = appData.suppliers.map(supplier => [
            supplier.code || supplier.id,
            supplier.name,
            supplier.phone || '-',
            supplier.email || '-',
            supplier.address || '-',
            supplier.city || '-',
            formatCurrency(supplier.currentBalance || 0),
            formatCurrency(supplier.totalPurchases || 0),
            formatCurrency(supplier.totalPayments || 0),
            supplier.createdAt ? new Date(supplier.createdAt).toLocaleDateString('ar-SY') : '-',
            supplier.lastTransactionDate ? new Date(supplier.lastTransactionDate).toLocaleDateString('ar-SY') : '-',
            supplier.isActive !== false ? 'نشط' : 'غير نشط'
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'قائمة الموردين');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'الموردين');

        // إضافة ورقة الملخص
        const summaryData = [
            ['ملخص قائمة الموردين'],
            [''],
            ['إجمالي عدد الموردين', appData.suppliers.length],
            ['الموردين النشطون', appData.suppliers.filter(s => s.isActive !== false).length],
            ['الموردين غير النشطين', appData.suppliers.filter(s => s.isActive === false).length],
            ['إجمالي الأرصدة المدينة', formatCurrency(appData.suppliers.reduce((sum, s) => sum + Math.max(0, s.currentBalance || 0), 0))],
            ['إجمالي الأرصدة الدائنة', formatCurrency(Math.abs(appData.suppliers.reduce((sum, s) => sum + Math.min(0, s.currentBalance || 0), 0)))],
            ['إجمالي المشتريات', formatCurrency(appData.suppliers.reduce((sum, s) => sum + (s.totalPurchases || 0), 0))],
            ['إجمالي المدفوعات', formatCurrency(appData.suppliers.reduce((sum, s) => sum + (s.totalPayments || 0), 0))],
            [''],
            ['تاريخ التقرير', new Date().toLocaleDateString('ar-SY')],
            ['وقت التقرير', new Date().toLocaleTimeString('ar-SY')]
        ];

        const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص');

        // حفظ الملف
        const fileName = `قائمة_الموردين_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير قائمة الموردين إلى Excel بنجاح');
        showSuccessToast('تم تصدير قائمة الموردين إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير قائمة الموردين إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير قائمة المخازن إلى Excel
 */
function exportWarehousesToExcel() {
    console.log('📊 تصدير قائمة المخازن إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'كود المخزن',
            'اسم المخزن',
            'الموقع',
            'المدير',
            'رقم الهاتف',
            'عدد الأصناف',
            'قيمة المخزون',
            'السعة القصوى',
            'النسبة المستخدمة',
            'تاريخ الإنشاء',
            'الحالة',
            'ملاحظات'
        ];

        const data = appData.warehouses.map(warehouse => {
            const warehouseProducts = appData.products.filter(p => p.warehouseId === warehouse.id);
            const productsCount = warehouseProducts.length;
            const totalValue = warehouseProducts.reduce((sum, p) => sum + ((p.quantity || 0) * (p.costPrice || 0)), 0);
            const usagePercentage = warehouse.maxCapacity > 0 ?
                ((productsCount / warehouse.maxCapacity) * 100).toFixed(1) + '%' : '-';

            return [
                warehouse.code || warehouse.id,
                warehouse.name,
                warehouse.location || '-',
                warehouse.manager || '-',
                warehouse.phone || '-',
                productsCount,
                formatCurrency(totalValue),
                warehouse.maxCapacity || '-',
                usagePercentage,
                warehouse.createdAt ? new Date(warehouse.createdAt).toLocaleDateString('ar-SY') : '-',
                warehouse.isActive !== false ? 'نشط' : 'غير نشط',
                warehouse.notes || '-'
            ];
        });

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'قائمة المخازن');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'المخازن');

        // إضافة ورقة الملخص
        const totalProducts = appData.products.length;
        const totalValue = appData.products.reduce((sum, p) => sum + ((p.quantity || 0) * (p.costPrice || 0)), 0);

        const summaryData = [
            ['ملخص قائمة المخازن'],
            [''],
            ['إجمالي عدد المخازن', appData.warehouses.length],
            ['المخازن النشطة', appData.warehouses.filter(w => w.isActive !== false).length],
            ['المخازن غير النشطة', appData.warehouses.filter(w => w.isActive === false).length],
            ['إجمالي الأصناف', totalProducts],
            ['إجمالي قيمة المخزون', formatCurrency(totalValue)],
            ['متوسط الأصناف لكل مخزن', (totalProducts / appData.warehouses.length).toFixed(1)],
            ['متوسط قيمة المخزن', formatCurrency(totalValue / appData.warehouses.length)],
            [''],
            ['تاريخ التقرير', new Date().toLocaleDateString('ar-SY')],
            ['وقت التقرير', new Date().toLocaleTimeString('ar-SY')]
        ];

        const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص');

        // إضافة ورقة تفاصيل الأصناف لكل مخزن
        const detailsData = [
            ['المخزن', 'الصنف', 'الكمية', 'الوحدة', 'سعر التكلفة', 'قيمة المخزون', 'الحد الأدنى', 'حالة المخزون']
        ];

        appData.warehouses.forEach(warehouse => {
            const warehouseProducts = appData.products.filter(p => p.warehouseId === warehouse.id);
            warehouseProducts.forEach(product => {
                const stockValue = (product.quantity || 0) * (product.costPrice || 0);
                const isLowStock = (product.quantity || 0) <= (product.minQuantity || 0);
                const stockStatus = (product.quantity || 0) === 0 ? 'نفد المخزون' :
                                   isLowStock ? 'مخزون منخفض' : 'مخزون آمن';

                detailsData.push([
                    warehouse.name,
                    product.name,
                    product.quantity || 0,
                    product.unit || '-',
                    product.costPrice || 0,
                    stockValue,
                    product.minQuantity || 0,
                    stockStatus
                ]);
            });
        });

        const detailsSheet = XLSX.utils.aoa_to_sheet(detailsData);
        XLSX.utils.book_append_sheet(workbook, detailsSheet, 'تفاصيل الأصناف');

        // حفظ الملف
        const fileName = `قائمة_المخازن_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير قائمة المخازن إلى Excel بنجاح');
        showSuccessToast('تم تصدير قائمة المخازن إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير قائمة المخازن إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تعديل سند قبض
 */
function editReceipt(receiptId) {
    console.log('✏️ تعديل سند القبض ID:', receiptId);

    const receipt = appData.payments.find(p => p.id === receiptId && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        return;
    }

    // إنشاء نافذة التعديل
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل سند القبض رقم ${receipt.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editReceiptForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptNumber" class="form-label">رقم السند</label>
                                <input type="text" class="form-control" id="editReceiptNumber" value="${receipt.paymentNumber}" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="editReceiptDate" value="${receipt.paymentDate}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCustomer" required>
                                    <option value="">اختر العميل</option>
                                    ${appData.customers.map(c =>
                                        `<option value="${c.id}" ${c.id === receipt.customerId ? 'selected' : ''}>${c.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editReceiptAmount" value="${receipt.amount}" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash" ${receipt.paymentMethod === 'cash' ? 'selected' : ''}>نقدي</option>
                                    <option value="bank" ${receipt.paymentMethod === 'bank' ? 'selected' : ''}>تحويل بنكي</option>
                                    <option value="check" ${receipt.paymentMethod === 'check' ? 'selected' : ''}>شيك</option>
                                    <option value="card" ${receipt.paymentMethod === 'card' ? 'selected' : ''}>بطاقة ائتمان</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCurrency" required>
                                    <option value="SYP" ${receipt.currency === 'SYP' ? 'selected' : ''}>ليرة سورية (ل.س)</option>
                                    <option value="USD" ${receipt.currency === 'USD' ? 'selected' : ''}>دولار أمريكي ($)</option>
                                    <option value="EUR" ${receipt.currency === 'EUR' ? 'selected' : ''}>يورو (€)</option>
                                    <option value="TRY" ${receipt.currency === 'TRY' ? 'selected' : ''}>ليرة تركية (₺)</option>
                                    <option value="SAR" ${receipt.currency === 'SAR' ? 'selected' : ''}>ريال سعودي (ر.س)</option>
                                    <option value="AED" ${receipt.currency === 'AED' ? 'selected' : ''}>درهم إماراتي (د.إ)</option>
                                    <option value="LBP" ${receipt.currency === 'LBP' ? 'selected' : ''}>ليرة لبنانية (ل.ل)</option>
                                    <option value="GBP" ${receipt.currency === 'GBP' ? 'selected' : ''}>جنيه إسترليني (£)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="editReceiptReference" value="${receipt.referenceNumber || ''}" placeholder="رقم الشيك أو الحوالة">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptBankName" class="form-label">اسم البنك</label>
                            <input type="text" class="form-control" id="editReceiptBankName" value="${receipt.bankName || ''}">
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editReceiptNotes" rows="3">${receipt.notes || ''}</textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptStatus" class="form-label">الحالة</label>
                            <select class="form-select" id="editReceiptStatus">
                                <option value="pending" ${receipt.status === 'pending' ? 'selected' : ''}>معلق</option>
                                <option value="confirmed" ${receipt.status === 'confirmed' ? 'selected' : ''}>مؤكد</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveReceiptChanges(${receiptId})">حفظ التغييرات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', () => {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ تغييرات سند القبض
 */
function saveReceiptChanges(receiptId) {
    const receipt = appData.payments.find(p => p.id === receiptId);
    if (!receipt) {
        alert('سند القبض غير موجود');
        return;
    }

    // جمع البيانات من النموذج
    const date = document.getElementById('editReceiptDate').value;
    const customerId = parseInt(document.getElementById('editReceiptCustomer').value);
    const amount = parseFloat(document.getElementById('editReceiptAmount').value);
    const method = document.getElementById('editReceiptMethod').value;
    const currency = document.getElementById('editReceiptCurrency').value;
    const reference = document.getElementById('editReceiptReference').value.trim();
    const bankName = document.getElementById('editReceiptBankName').value.trim();
    const notes = document.getElementById('editReceiptNotes').value.trim();
    const status = document.getElementById('editReceiptStatus').value;

    // التحقق من صحة البيانات
    if (!date || !customerId || !amount || amount <= 0 || !method || !currency) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    // حفظ البيانات القديمة للتراجع في حالة الخطأ
    const oldData = { ...receipt };

    try {
        // تحديث بيانات السند
        receipt.paymentDate = date;
        receipt.customerId = customerId;
        receipt.amount = amount;
        receipt.paymentMethod = method;
        receipt.currency = currency;
        receipt.referenceNumber = reference;
        receipt.bankName = bankName;
        receipt.notes = notes;
        receipt.status = status;
        receipt.updatedAt = new Date().toISOString();

        // تحديث رصيد العميل إذا تغير المبلغ أو العميل
        if (oldData.customerId !== customerId || oldData.amount !== amount) {
            // إلغاء تأثير السند القديم
            const oldCustomer = appData.customers.find(c => c.id === oldData.customerId);
            if (oldCustomer) {
                oldCustomer.currentBalance = (oldCustomer.currentBalance || 0) + oldData.amount;
            }

            // تطبيق تأثير السند الجديد
            const newCustomer = appData.customers.find(c => c.id === customerId);
            if (newCustomer) {
                newCustomer.currentBalance = (newCustomer.currentBalance || 0) - amount;
            }
        }

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editReceiptModal'));
        modal.hide();

        // إعادة تحميل الصفحة
        showPage('receipts');

        alert('تم تحديث سند القبض بنجاح');
        console.log('✅ تم تحديث سند القبض:', receipt.paymentNumber);

    } catch (error) {
        console.error('❌ خطأ في تحديث سند القبض:', error);

        // استعادة البيانات القديمة
        Object.assign(receipt, oldData);

        alert('حدث خطأ أثناء تحديث سند القبض: ' + error.message);
    }
}

/**
 * حذف سند قبض
 */
function deleteReceipt(receiptId) {
    console.log('🗑️ حذف سند القبض ID:', receiptId);

    const receipt = appData.payments.find(p => p.id === receiptId && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        return;
    }

    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const customerName = customer ? customer.name : 'غير محدد';

    if (confirm(`هل أنت متأكد من حذف سند القبض رقم ${receipt.paymentNumber}؟\n\nالعميل: ${customerName}\nالمبلغ: ${formatCurrency(receipt.amount, receipt.currency)}\nالتاريخ: ${receipt.paymentDate}\n\nهذا الإجراء لا يمكن التراجع عنه وسيؤثر على رصيد العميل.`)) {

        try {
            // إلغاء تأثير السند على رصيد العميل
            if (customer && receipt.status === 'confirmed') {
                customer.currentBalance = (customer.currentBalance || 0) + receipt.amount;
                console.log(`💰 تم تعديل رصيد العميل ${customer.name}: +${receipt.amount}`);
            }

            // حذف القيود المحاسبية المرتبطة
            if (appData.journalEntries) {
                const entriesCountBefore = appData.journalEntries.length;
                appData.journalEntries = appData.journalEntries.filter(entry =>
                    entry.reference !== receipt.paymentNumber
                );
                const entriesCountAfter = appData.journalEntries.length;
                console.log(`📊 تم حذف ${entriesCountBefore - entriesCountAfter} قيد محاسبي`);
            }

            // حذف السند من القائمة
            const receiptIndex = appData.payments.findIndex(p => p.id === receiptId);
            if (receiptIndex > -1) {
                appData.payments.splice(receiptIndex, 1);
            }

            // حفظ البيانات
            saveData();

            // إعادة تحميل الصفحة
            showPage('receipts');

            alert('تم حذف سند القبض بنجاح');
            console.log('✅ تم حذف سند القبض:', receipt.paymentNumber);

        } catch (error) {
            console.error('❌ خطأ في حذف سند القبض:', error);
            alert('حدث خطأ أثناء حذف سند القبض: ' + error.message);
        }
    }
}

/**
 * تحديث بيانات سندات القبض
 */
function refreshReceiptsData() {
    console.log('🔄 تحديث بيانات سندات القبض...');

    const button = event.target.closest('button');
    const icon = button.querySelector('i');
    const originalText = button.innerHTML;

    // إضافة تأثير التحميل
    button.disabled = true;
    icon.classList.add('fa-spin');
    button.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i>جاري التحديث...';

    try {
        // التحقق من صحة بيانات سندات القبض
        let updatedCount = 0;
        let deletedCount = 0;

        appData.payments = appData.payments.filter(payment => {
            if (payment.paymentType !== 'receipt') return true;

            // التحقق من وجود العميل
            const customer = appData.customers.find(c => c.id === payment.customerId);
            if (!customer) {
                console.log(`⚠️ حذف سند قبض بدون عميل: ${payment.paymentNumber}`);
                deletedCount++;
                return false;
            }

            // التحقق من صحة البيانات
            if (!payment.amount || payment.amount <= 0) {
                console.log(`⚠️ تصحيح مبلغ سند القبض: ${payment.paymentNumber}`);
                payment.amount = 0;
                updatedCount++;
            }

            if (!payment.currency) {
                payment.currency = 'SYP';
                updatedCount++;
            }

            if (!payment.status) {
                payment.status = 'pending';
                updatedCount++;
            }

            return true;
        });

        // حفظ البيانات
        saveData();

        // إعادة تحميل الصفحة
        setTimeout(() => {
            showPage('receipts');

            const message = `تم تحديث بيانات سندات القبض!\n\n` +
                          `• تم تحديث ${updatedCount} سند\n` +
                          `• تم حذف ${deletedCount} سند غير صحيح`;

            if (updatedCount > 0 || deletedCount > 0) {
                alert(message);
            }

            console.log('✅ تم تحديث بيانات سندات القبض:', {
                'سندات محدثة': updatedCount,
                'سندات محذوفة': deletedCount
            });

        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في تحديث بيانات سندات القبض:', error);

        // استعادة الزر
        button.disabled = false;
        icon.classList.remove('fa-spin');
        button.innerHTML = originalText;

        alert('حدث خطأ أثناء تحديث البيانات: ' + error.message);
    }
}

/**
 * تحديث حسابات حركة المخزن
 */
function refreshWarehouseMovements(warehouseId) {
    console.log('🔄 تحديث حسابات حركة المخزن ID:', warehouseId);

    const button = event.target.closest('button');
    const icon = button.querySelector('i');
    const originalText = button.innerHTML;

    // إضافة تأثير التحميل
    button.disabled = true;
    icon.classList.add('fa-spin');
    button.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i>جاري التحديث...';

    try {
        const warehouse = appData.warehouses.find(w => w.id === warehouseId);
        if (!warehouse) {
            throw new Error('المخزن غير موجود');
        }

        let updatedProductsCount = 0;
        let deletedMovementsCount = 0;
        let recalculatedCount = 0;

        // تنظيف حركات المخزون من البيانات المحذوفة
        if (appData.inventoryMovements) {
            const initialMovementsCount = appData.inventoryMovements.length;

            appData.inventoryMovements = appData.inventoryMovements.filter(movement => {
                // التحقق من وجود المنتج والمخزن
                const product = appData.products.find(p => p.id === movement.productId);
                const movementWarehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

                // الاحتفاظ بالحركة فقط إذا كان المنتج والمخزن موجودين وغير محذوفين
                const isValid = product && movementWarehouse &&
                               product.isActive !== false &&
                               movementWarehouse.isActive !== false &&
                               movement.isDeleted !== true;

                if (!isValid && movement.warehouseId === warehouseId) {
                    console.log(`🗑️ حذف حركة غير صحيحة: ${movement.reference || movement.id}`);
                }

                return isValid;
            });

            deletedMovementsCount = initialMovementsCount - appData.inventoryMovements.length;
        }

        // إعادة حساب كميات المنتجات في هذا المخزن
        const warehouseProducts = appData.products.filter(p =>
            p.warehouseId === warehouseId && p.isActive !== false
        );

        warehouseProducts.forEach(product => {
            // الحصول على جميع حركات هذا المنتج في هذا المخزن
            const productMovements = (appData.inventoryMovements || []).filter(m =>
                m.productId === product.id &&
                m.warehouseId === warehouseId &&
                m.isDeleted !== true
            );

            // حساب الكمية من الحركات مع معالجة شاملة ودقيقة
            let calculatedQuantity = 0;
            let totalIn = 0;
            let totalOut = 0;

            productMovements.forEach(movement => {
                const quantity = parseFloat(movement.quantity) || 0;

                // معالجة شاملة لجميع أنواع الحركات
                switch (movement.movementType) {
                    case 'in':
                    case 'purchase':
                    case 'return_sale':
                    case 'transfer_in':
                        totalIn += Math.abs(quantity);
                        calculatedQuantity += Math.abs(quantity);
                        break;

                    case 'out':
                    case 'sale':
                    case 'return_purchase':
                    case 'transfer_out':
                    case 'damage':
                        totalOut += Math.abs(quantity);
                        calculatedQuantity -= Math.abs(quantity);
                        break;

                    case 'adjustment':
                        // التسوية يمكن أن تكون موجبة أو سالبة
                        if (quantity >= 0) {
                            totalIn += quantity;
                            calculatedQuantity += quantity;
                        } else {
                            totalOut += Math.abs(quantity);
                            calculatedQuantity += quantity; // quantity سالب بالفعل
                        }
                        break;

                    case 'transfer':
                        // التحويل بين المخازن
                        if (movement.warehouseId === product.warehouseId) {
                            // إخراج من المخزن الحالي
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                        } else if (movement.toWarehouseId === product.warehouseId) {
                            // إدخال للمخزن الحالي
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                        }
                        break;

                    default:
                        // معالجة الأنواع القديمة للتوافق مع النسخ السابقة
                        if (quantity > 0) {
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                        } else {
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                        }
                        console.warn(`⚠️ نوع حركة غير معروف: ${movement.movementType} للمنتج ${product.name}`);
                }
            });

            // إضافة إخراجات من فواتير المبيعات المؤكدة
            const salesFromInvoices = (appData.invoices || [])
                .filter(inv =>
                    inv.invoiceType === 'sale' &&
                    inv.status === 'confirmed' &&
                    inv.isDeleted !== true
                )
                .reduce((sum, inv) => {
                    const item = inv.items.find(item => item.productId === product.id);
                    return sum + (item ? item.quantity : 0);
                }, 0);

            calculatedQuantity -= salesFromInvoices;
            totalOut += salesFromInvoices;

            // التأكد من أن الكمية لا تكون سالبة
            calculatedQuantity = Math.max(0, calculatedQuantity);

            // تحديث الكمية إذا كانت مختلفة
            const currentQuantity = parseFloat(product.quantity) || 0;
            if (Math.abs(currentQuantity - calculatedQuantity) > 0.001) {
                console.log(`📦 تحديث كمية ${product.name}: ${currentQuantity} → ${calculatedQuantity}`);
                product.quantity = calculatedQuantity;
                product.totalIn = totalIn;
                product.totalOut = totalOut;
                product.lastCalculated = new Date().toISOString();
                updatedProductsCount++;
                recalculatedCount++;
            }
        });

        // حفظ البيانات المحدثة
        saveData();

        // إعادة تحميل الصفحة
        setTimeout(() => {
            showWarehouseProductMovements(warehouseId);

            // إظهار رسالة النجاح
            const message = `تم تحديث حسابات المخزن بنجاح!\n\n` +
                          `• تم تحديث ${updatedProductsCount} منتج\n` +
                          `• تم حذف ${deletedMovementsCount} حركة غير صحيحة\n` +
                          `• تم إعادة حساب ${recalculatedCount} كمية\n` +
                          `• تم احتساب الإخراجات من المبيعات`;

            if (updatedProductsCount > 0 || deletedMovementsCount > 0) {
                alert(message);
            }

            console.log('✅ تم تحديث حسابات المخزن:', {
                'منتجات محدثة': updatedProductsCount,
                'حركات محذوفة': deletedMovementsCount,
                'كميات معاد حسابها': recalculatedCount,
                'مخزن': warehouse.name
            });

        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في تحديث حسابات المخزن:', error);

        // استعادة الزر
        button.disabled = false;
        icon.classList.remove('fa-spin');
        button.innerHTML = originalText;

        alert('حدث خطأ أثناء تحديث حسابات المخزن: ' + error.message);
    }
}

/**
 * إنشاء القيود المحاسبية تلقائياً من الفواتير والسندات
 */
function generateJournalEntriesFromTransactions() {
    console.log('📊 إنشاء القيود المحاسبية من المعاملات...');

    if (!appData.journalEntries) {
        appData.journalEntries = [];
    }

    let generatedCount = 0;

    // 1. إنشاء قيود من الفواتير
    if (appData.invoices && appData.invoices.length > 0) {
        appData.invoices.forEach(invoice => {
            if (invoice.status === 'confirmed' && invoice.isDeleted !== true) {
                const existingEntry = appData.journalEntries.find(entry =>
                    entry.referenceType === 'invoice' &&
                    entry.referenceId === invoice.invoiceNumber
                );

                if (!existingEntry) {
                    const client = invoice.invoiceType === 'sale' ?
                        appData.customers.find(c => c.id === invoice.customerId) :
                        appData.suppliers.find(s => s.id === invoice.supplierId);

                    const clientName = client ? client.name : 'غير محدد';

                    if (invoice.invoiceType === 'sale') {
                        // قيد فاتورة المبيعات
                        const salesEntry = {
                            id: generateId(),
                            entryDate: invoice.invoiceDate,
                            entryType: 'sale_invoice',
                            description: `فاتورة مبيعات رقم ${invoice.invoiceNumber} - ${clientName}`,
                            debitAccount: `العملاء - ${clientName}`,
                            creditAccount: 'المبيعات',
                            debitAmount: invoice.totalAmount,
                            creditAmount: invoice.totalAmount,
                            currency: invoice.currency || 'SYP',
                            referenceType: 'invoice',
                            referenceId: invoice.invoiceNumber,
                            invoiceId: invoice.id,
                            customerId: invoice.customerId,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(salesEntry);
                        generatedCount++;

                        // قيد تكلفة البضاعة المباعة (إذا كانت هناك أصناف)
                        if (invoice.items && invoice.items.length > 0) {
                            let totalCost = 0;
                            invoice.items.forEach(item => {
                                const product = appData.products.find(p => p.id === item.productId);
                                if (product && product.costPrice) {
                                    totalCost += item.quantity * product.costPrice;
                                }
                            });

                            if (totalCost > 0) {
                                const costEntry = {
                                    id: generateId(),
                                    entryDate: invoice.invoiceDate,
                                    entryType: 'cost_of_goods_sold',
                                    description: `تكلفة البضاعة المباعة - فاتورة ${invoice.invoiceNumber}`,
                                    debitAccount: 'تكلفة البضاعة المباعة',
                                    creditAccount: 'المخزون',
                                    debitAmount: totalCost,
                                    creditAmount: totalCost,
                                    currency: invoice.currency || 'SYP',
                                    referenceType: 'invoice',
                                    referenceId: invoice.invoiceNumber + '_cost',
                                    invoiceId: invoice.id,
                                    createdAt: new Date().toISOString(),
                                    source: 'auto_generated'
                                };

                                appData.journalEntries.push(costEntry);
                                generatedCount++;
                            }
                        }

                    } else {
                        // قيد فاتورة المشتريات
                        const purchaseEntry = {
                            id: generateId(),
                            entryDate: invoice.invoiceDate,
                            entryType: 'purchase_invoice',
                            description: `فاتورة مشتريات رقم ${invoice.invoiceNumber} - ${clientName}`,
                            debitAccount: 'المشتريات',
                            creditAccount: `الموردين - ${clientName}`,
                            debitAmount: invoice.totalAmount,
                            creditAmount: invoice.totalAmount,
                            currency: invoice.currency || 'SYP',
                            referenceType: 'invoice',
                            referenceId: invoice.invoiceNumber,
                            invoiceId: invoice.id,
                            supplierId: invoice.supplierId,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(purchaseEntry);
                        generatedCount++;
                    }
                }
            }
        });
    }

    // 2. إنشاء قيود من سندات القبض والدفع
    if (appData.payments && appData.payments.length > 0) {
        appData.payments.forEach(payment => {
            if (payment.status === 'confirmed' && payment.isDeleted !== true) {
                const existingEntry = appData.journalEntries.find(entry =>
                    entry.referenceType === payment.paymentType &&
                    entry.referenceId === payment.paymentNumber
                );

                if (!existingEntry) {
                    const client = payment.paymentType === 'receipt' ?
                        appData.customers.find(c => c.id === payment.customerId) :
                        appData.suppliers.find(s => s.id === payment.supplierId);

                    const clientName = client ? client.name : 'غير محدد';

                    if (payment.paymentType === 'receipt') {
                        // قيد سند القبض
                        const receiptEntry = {
                            id: generateId(),
                            entryDate: payment.paymentDate,
                            entryType: 'receipt',
                            description: `سند قبض رقم ${payment.paymentNumber} - ${clientName}`,
                            debitAccount: payment.paymentMethod === 'cash' ? 'الصندوق' :
                                         payment.paymentMethod === 'bank' ? 'البنك' :
                                         payment.paymentMethod === 'check' ? 'الشيكات تحت التحصيل' :
                                         'حسابات أخرى',
                            creditAccount: `العملاء - ${clientName}`,
                            debitAmount: payment.amount,
                            creditAmount: payment.amount,
                            currency: payment.currency || 'SYP',
                            referenceType: 'receipt',
                            referenceId: payment.paymentNumber,
                            paymentId: payment.id,
                            customerId: payment.customerId,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(receiptEntry);
                        generatedCount++;

                    } else {
                        // قيد سند الدفع
                        const paymentEntry = {
                            id: generateId(),
                            entryDate: payment.paymentDate,
                            entryType: 'payment',
                            description: `سند دفع رقم ${payment.paymentNumber} - ${clientName}`,
                            debitAccount: `الموردين - ${clientName}`,
                            creditAccount: payment.paymentMethod === 'cash' ? 'الصندوق' :
                                          payment.paymentMethod === 'bank' ? 'البنك' :
                                          payment.paymentMethod === 'check' ? 'الشيكات المدفوعة' :
                                          'حسابات أخرى',
                            debitAmount: payment.amount,
                            creditAmount: payment.amount,
                            currency: payment.currency || 'SYP',
                            referenceType: 'payment',
                            referenceId: payment.paymentNumber,
                            paymentId: payment.id,
                            supplierId: payment.supplierId,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(paymentEntry);
                        generatedCount++;
                    }
                }
            }
        });
    }

    // 3. إنشاء قيود من حركات المخزون (اختياري)
    if (appData.inventoryMovements && appData.inventoryMovements.length > 0) {
        appData.inventoryMovements.forEach(movement => {
            if (movement.isDeleted !== true && movement.unitPrice > 0) {
                const existingEntry = appData.journalEntries.find(entry =>
                    entry.referenceType === 'movement' &&
                    entry.referenceId === (movement.reference || movement.id)
                );

                if (!existingEntry) {
                    const product = appData.products.find(p => p.id === movement.productId);
                    const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

                    const productName = product ? product.name : 'غير محدد';
                    const warehouseName = warehouse ? warehouse.name : 'غير محدد';
                    const totalValue = movement.quantity * movement.unitPrice;

                    if (movement.movementType === 'in') {
                        const inventoryInEntry = {
                            id: generateId(),
                            entryDate: movement.date,
                            entryType: 'inventory_in',
                            description: `إدخال مخزون - ${productName} - ${warehouseName}`,
                            debitAccount: 'المخزون',
                            creditAccount: movement.reference || 'حساب مؤقت',
                            debitAmount: totalValue,
                            creditAmount: totalValue,
                            currency: 'SYP',
                            referenceType: 'movement',
                            referenceId: movement.reference || movement.id,
                            movementId: movement.id,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(inventoryInEntry);
                        generatedCount++;

                    } else if (movement.movementType === 'out') {
                        const inventoryOutEntry = {
                            id: generateId(),
                            entryDate: movement.date,
                            entryType: 'inventory_out',
                            description: `إخراج مخزون - ${productName} - ${warehouseName}`,
                            debitAccount: 'تكلفة البضاعة المباعة',
                            creditAccount: 'المخزون',
                            debitAmount: totalValue,
                            creditAmount: totalValue,
                            currency: 'SYP',
                            referenceType: 'movement',
                            referenceId: movement.reference || movement.id,
                            movementId: movement.id,
                            createdAt: new Date().toISOString(),
                            source: 'auto_generated'
                        };

                        appData.journalEntries.push(inventoryOutEntry);
                        generatedCount++;
                    }
                }
            }
        });
    }

    console.log(`✅ تم إنشاء ${generatedCount} قيد محاسبي جديد`);

    if (generatedCount > 0) {
        saveData();
        console.log('💾 تم حفظ القيود المحاسبية الجديدة');
    }

    return generatedCount;
}

/**
 * تنظيف القيود المحاسبية المكررة أو غير الصحيحة
 */
function cleanupJournalEntries() {
    console.log('🧹 تنظيف القيود المحاسبية...');

    if (!appData.journalEntries) {
        appData.journalEntries = [];
        return 0;
    }

    const initialCount = appData.journalEntries.length;

    // إزالة القيود المكررة
    const uniqueEntries = [];
    const seenReferences = new Set();

    appData.journalEntries.forEach(entry => {
        const referenceKey = `${entry.referenceType}_${entry.referenceId}`;

        if (!seenReferences.has(referenceKey)) {
            seenReferences.add(referenceKey);
            uniqueEntries.push(entry);
        } else {
            console.log(`🗑️ حذف قيد مكرر: ${referenceKey}`);
        }
    });

    // إزالة القيود التي لا تحتوي على مراجع صحيحة
    const validEntries = uniqueEntries.filter(entry => {
        // التحقق من صحة قيود الفواتير
        if (entry.referenceType === 'invoice' && entry.invoiceId) {
            const invoice = appData.invoices.find(inv => inv.id === entry.invoiceId);
            if (!invoice || invoice.isDeleted === true || invoice.status !== 'confirmed') {
                console.log(`🗑️ حذف قيد فاتورة غير صحيح: ${entry.referenceId}`);
                return false;
            }
        }

        // التحقق من صحة قيود السندات
        if ((entry.referenceType === 'receipt' || entry.referenceType === 'payment') && entry.paymentId) {
            const payment = appData.payments.find(pay => pay.id === entry.paymentId);
            if (!payment || payment.isDeleted === true || payment.status !== 'confirmed') {
                console.log(`🗑️ حذف قيد سند غير صحيح: ${entry.referenceId}`);
                return false;
            }
        }

        // التحقق من صحة قيود حركات المخزون
        if (entry.referenceType === 'movement' && entry.movementId) {
            const movement = appData.inventoryMovements.find(mov => mov.id === entry.movementId);
            if (!movement || movement.isDeleted === true) {
                console.log(`🗑️ حذف قيد حركة مخزون غير صحيح: ${entry.referenceId}`);
                return false;
            }
        }

        return true;
    });

    appData.journalEntries = validEntries;
    const cleanedCount = initialCount - validEntries.length;

    console.log(`✅ تم تنظيف ${cleanedCount} قيد محاسبي`);

    if (cleanedCount > 0) {
        saveData();
    }

    return cleanedCount;
}

/**
 * تحديث شامل لدفتر اليومية
 */
function refreshJournalEntries() {
    console.log('🔄 تحديث شامل لدفتر اليومية...');

    const button = event.target.closest('button');
    const icon = button.querySelector('i');
    const originalText = button.innerHTML;

    // إضافة تأثير التحميل
    button.disabled = true;
    icon.classList.add('fa-spin');
    button.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i>جاري التحديث...';

    try {
        // تنظيف القيود القديمة
        const cleanedCount = cleanupJournalEntries();

        // إنشاء قيود جديدة
        const generatedCount = generateJournalEntriesFromTransactions();

        // إعادة تحميل الصفحة
        setTimeout(() => {
            showPage('journal');

            const message = `تم تحديث دفتر اليومية بنجاح!\n\n` +
                          `• تم تنظيف ${cleanedCount} قيد قديم\n` +
                          `• تم إنشاء ${generatedCount} قيد جديد\n` +
                          `• إجمالي القيود: ${appData.journalEntries.length}`;

            if (cleanedCount > 0 || generatedCount > 0) {
                alert(message);
            }

            console.log('✅ تم تحديث دفتر اليومية:', {
                'قيود منظفة': cleanedCount,
                'قيود جديدة': generatedCount,
                'إجمالي القيود': appData.journalEntries.length
            });

        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في تحديث دفتر اليومية:', error);

        // استعادة الزر
        button.disabled = false;
        icon.classList.remove('fa-spin');
        button.innerHTML = originalText;

        alert('حدث خطأ أثناء تحديث دفتر اليومية: ' + error.message);
    }
}

// تحميل البيانات عند بدء التطبيق
loadData();

// إعادة حساب جميع الأرصدة بعد تحميل البيانات
setTimeout(() => {
    if (appData && appData.customers && appData.suppliers) {
        console.log('🔄 إعادة حساب الأرصدة بعد تحميل البيانات...');
        recalculateAllBalances();
    }
}, 1000);

// ========== نظام الثيم المضيء والمظلم ==========

/**
 * تبديل الثيم بين المضيء والمظلم
 */
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);

    // تحديث أيقونة الثيم
    updateThemeIcon(newTheme);
}

/**
 * تحديث أيقونة الثيم
 */
function updateThemeIcon(theme) {
    const themeIcon = document.getElementById('theme-icon');
    if (themeIcon) {
        if (theme === 'dark') {
            themeIcon.className = 'fas fa-sun me-2';
            // تحديث النص في القائمة المنسدلة
            const parentLink = themeIcon.closest('a');
            if (parentLink) {
                parentLink.innerHTML = '<i class="fas fa-sun me-2" id="theme-icon"></i>الثيم المضيء';
            }
        } else {
            themeIcon.className = 'fas fa-moon me-2';
            // تحديث النص في القائمة المنسدلة
            const parentLink = themeIcon.closest('a');
            if (parentLink) {
                parentLink.innerHTML = '<i class="fas fa-moon me-2" id="theme-icon"></i>الثيم المظلم';
            }
        }
    }
}

/**
 * تحميل الثيم المحفوظ
 */
function loadSavedTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);
}

/**
 * تطبيق الثيم على النوافذ المنبثقة
 */
function applyThemeToModal(modal) {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    if (currentTheme === 'dark') {
        modal.classList.add('dark-theme');
    }
}

// تحميل الثيم عند بدء التطبيق
document.addEventListener('DOMContentLoaded', function() {
    loadSavedTheme();
});

// ========== وظائف التصفية المتقدمة ==========

/**
 * تطبيق فلاتر فواتير المبيعات
 */
function applySalesInvoicesFilter() {
    const customerFilter = document.getElementById('customerFilter')?.value || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';
    const fromDate = document.getElementById('salesFromDate')?.value || '';
    const toDate = document.getElementById('salesToDate')?.value || '';
    const searchText = document.getElementById('salesSearch')?.value.toLowerCase() || '';

    let filteredInvoices = appData.invoices.filter(inv => inv.invoiceType === 'sale');

    // تطبيق فلتر العميل
    if (customerFilter) {
        filteredInvoices = filteredInvoices.filter(inv => inv.customerId == customerFilter);
    }

    // تطبيق فلتر الحالة
    if (statusFilter) {
        filteredInvoices = filteredInvoices.filter(inv => inv.status === statusFilter);
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredInvoices = filteredInvoices.filter(inv => inv.invoiceDate >= fromDate);
    }
    if (toDate) {
        filteredInvoices = filteredInvoices.filter(inv => inv.invoiceDate <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredInvoices = filteredInvoices.filter(inv => {
            const customer = appData.customers.find(c => c.id === inv.customerId);
            const customerName = customer ? customer.name.toLowerCase() : '';
            const invoiceNumber = inv.invoiceNumber.toLowerCase();

            return invoiceNumber.includes(searchText) || customerName.includes(searchText);
        });
    }

    // تحديث الجدول
    updateSalesInvoicesTable(filteredInvoices);
}

/**
 * مسح فلاتر فواتير المبيعات
 */
function clearSalesInvoicesFilter() {
    const customerFilter = document.getElementById('customerFilter');
    const statusFilter = document.getElementById('statusFilter');
    const fromDate = document.getElementById('salesFromDate');
    const toDate = document.getElementById('salesToDate');
    const searchText = document.getElementById('salesSearch');

    if (customerFilter) customerFilter.value = '';
    if (statusFilter) statusFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';

    // عرض جميع الفواتير
    const allSalesInvoices = appData.invoices.filter(inv => inv.invoiceType === 'sale');
    updateSalesInvoicesTable(allSalesInvoices);
}

/**
 * تحديث جدول فواتير المبيعات
 */
function updateSalesInvoicesTable(invoices) {
    const tableContainer = document.querySelector('#main-content .card:last-child .card-body');
    if (!tableContainer) return;

    if (invoices.length > 0) {
        tableContainer.innerHTML = `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>رقم الفاتورة</th>
                            <th>العميل</th>
                            <th>التاريخ</th>
                            <th>المبلغ الإجمالي</th>
                            <th>المدفوع</th>
                            <th>المتبقي</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${getSalesInvoicesRows(invoices)}
                    </tbody>
                </table>
            </div>
        `;
    } else {
        tableContainer.innerHTML = `
            <div class="text-center py-5">
                <i class="fas fa-file-invoice fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">لا توجد فواتير تطابق معايير البحث</h5>
                <p class="text-muted">جرب تغيير الفلاتر أو مسحها</p>
                <button class="btn btn-primary" onclick="clearSalesInvoicesFilter()">
                    <i class="fas fa-times me-2"></i>مسح الفلاتر
                </button>
            </div>
        `;
    }
}

/**
 * تطبيق فلاتر فواتير المشتريات
 */
function applyPurchaseInvoicesFilter() {
    const supplierFilter = document.getElementById('supplierFilter')?.value || '';
    const statusFilter = document.getElementById('purchaseStatusFilter')?.value || '';
    const fromDate = document.getElementById('purchaseFromDate')?.value || '';
    const toDate = document.getElementById('purchaseToDate')?.value || '';
    const searchText = document.getElementById('purchaseSearch')?.value.toLowerCase() || '';

    let filteredInvoices = appData.invoices.filter(inv => inv.invoiceType === 'purchase');

    // تطبيق فلتر المورد
    if (supplierFilter) {
        filteredInvoices = filteredInvoices.filter(inv => inv.supplierId == supplierFilter);
    }

    // تطبيق فلتر الحالة
    if (statusFilter) {
        filteredInvoices = filteredInvoices.filter(inv => inv.status === statusFilter);
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredInvoices = filteredInvoices.filter(inv => inv.invoiceDate >= fromDate);
    }
    if (toDate) {
        filteredInvoices = filteredInvoices.filter(inv => inv.invoiceDate <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredInvoices = filteredInvoices.filter(inv => {
            const supplier = appData.suppliers.find(s => s.id === inv.supplierId);
            const supplierName = supplier ? supplier.name.toLowerCase() : '';
            const invoiceNumber = inv.invoiceNumber.toLowerCase();

            return invoiceNumber.includes(searchText) || supplierName.includes(searchText);
        });
    }

    // تحديث الجدول
    updatePurchaseInvoicesTable(filteredInvoices);
}

/**
 * مسح فلاتر فواتير المشتريات
 */
function clearPurchaseInvoicesFilter() {
    const supplierFilter = document.getElementById('supplierFilter');
    const statusFilter = document.getElementById('purchaseStatusFilter');
    const fromDate = document.getElementById('purchaseFromDate');
    const toDate = document.getElementById('purchaseToDate');
    const searchText = document.getElementById('purchaseSearch');

    if (supplierFilter) supplierFilter.value = '';
    if (statusFilter) statusFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';

    // عرض جميع الفواتير
    const allPurchaseInvoices = appData.invoices.filter(inv => inv.invoiceType === 'purchase');
    updatePurchaseInvoicesTable(allPurchaseInvoices);
}

/**
 * تحديث جدول فواتير المشتريات
 */
function updatePurchaseInvoicesTable(invoices) {
    const tableContainer = document.getElementById('purchaseInvoicesTableContainer') ||
                          document.querySelector('#main-content .card:last-child .card-body');
    if (!tableContainer) return;

    if (invoices.length > 0) {
        tableContainer.innerHTML = `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>رقم الفاتورة</th>
                            <th>المورد</th>
                            <th>التاريخ</th>
                            <th>المبلغ الإجمالي</th>
                            <th>المدفوع</th>
                            <th>المتبقي</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${getPurchaseInvoicesRows(invoices)}
                    </tbody>
                </table>
            </div>
        `;
    } else {
        tableContainer.innerHTML = `
            <div class="text-center py-5">
                <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">لا توجد فواتير تطابق معايير البحث</h5>
                <p class="text-muted">جرب تغيير الفلاتر أو مسحها</p>
                <button class="btn btn-primary" onclick="clearPurchaseInvoicesFilter()">
                    <i class="fas fa-times me-2"></i>مسح الفلاتر
                </button>
            </div>
        `;
    }
}

/**
 * تحديث جدول فواتير المبيعات
 */
function updateSalesInvoicesTable(invoices) {
    const tableContainer = document.getElementById('salesInvoicesTableContainer') ||
                          document.querySelector('#main-content .card:last-child .card-body');
    if (!tableContainer) return;

    if (invoices.length > 0) {
        tableContainer.innerHTML = `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>رقم الفاتورة</th>
                            <th>العميل</th>
                            <th>التاريخ</th>
                            <th>المبلغ الإجمالي</th>
                            <th>المدفوع</th>
                            <th>المتبقي</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${getSalesInvoicesRows(invoices)}
                    </tbody>
                </table>
            </div>
        `;
    } else {
        tableContainer.innerHTML = `
            <div class="text-center py-5">
                <i class="fas fa-file-invoice fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">لا توجد فواتير تطابق معايير البحث</h5>
                <p class="text-muted">جرب تغيير الفلاتر أو مسحها</p>
                <button class="btn btn-primary" onclick="clearSalesInvoicesFilter()">
                    <i class="fas fa-times me-2"></i>مسح الفلاتر
                </button>
            </div>
        `;
    }
}

/**
 * تطبيق فلاتر العملاء
 */
function applyCustomersFilter() {
    const searchText = document.getElementById('customerSearch')?.value.toLowerCase() || '';
    const typeFilter = document.getElementById('customerTypeFilter')?.value || '';
    const cityFilter = document.getElementById('customerCityFilter')?.value || '';

    let filteredCustomers = appData.customers;

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredCustomers = filteredCustomers.filter(customer => {
            const name = customer.name.toLowerCase();
            const phone = customer.phone.toLowerCase();
            const email = (customer.email || '').toLowerCase();

            return name.includes(searchText) || phone.includes(searchText) || email.includes(searchText);
        });
    }

    // تطبيق فلتر النوع
    if (typeFilter) {
        filteredCustomers = filteredCustomers.filter(customer => customer.type === typeFilter);
    }

    // تطبيق فلتر المدينة
    if (cityFilter) {
        filteredCustomers = filteredCustomers.filter(customer => customer.city === cityFilter);
    }

    // تحديث الجدول
    updateCustomersTable(filteredCustomers);
}

/**
 * تطبيق فلاتر الموردين
 */
function applySuppliersFilter() {
    const searchText = document.getElementById('supplierSearch')?.value.toLowerCase() || '';
    const typeFilter = document.getElementById('supplierTypeFilter')?.value || '';
    const balanceFilter = document.getElementById('supplierBalanceFilter')?.value || '';

    let filteredSuppliers = appData.suppliers;

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredSuppliers = filteredSuppliers.filter(supplier => {
            const name = supplier.name.toLowerCase();
            const phone = (supplier.phone || '').toLowerCase();
            const email = (supplier.email || '').toLowerCase();

            return name.includes(searchText) || phone.includes(searchText) || email.includes(searchText);
        });
    }

    // تطبيق فلتر النوع
    if (typeFilter) {
        filteredSuppliers = filteredSuppliers.filter(supplier => supplier.type === typeFilter);
    }

    // تطبيق فلتر حالة الرصيد
    if (balanceFilter) {
        filteredSuppliers = filteredSuppliers.filter(supplier => {
            const balance = supplier.currentBalance || 0;
            switch (balanceFilter) {
                case 'positive': return balance > 0;
                case 'negative': return balance < 0;
                case 'zero': return balance === 0;
                default: return true;
            }
        });
    }

    // تحديث الجدول
    updateSuppliersTable(filteredSuppliers);
}

/**
 * مسح فلاتر الموردين
 */
function clearSuppliersFilter() {
    const searchInput = document.getElementById('supplierSearch');
    const typeFilter = document.getElementById('supplierTypeFilter');
    const balanceFilter = document.getElementById('supplierBalanceFilter');

    if (searchInput) searchInput.value = '';
    if (typeFilter) typeFilter.value = '';
    if (balanceFilter) balanceFilter.value = '';

    // عرض جميع الموردين
    updateSuppliersTable(appData.suppliers);
}

/**
 * تحديث جدول الموردين
 */
function updateSuppliersTable(suppliers) {
    const tableContainer = document.querySelector('#suppliersTable tbody') ||
                          document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (suppliers.length > 0) {
        tableContainer.innerHTML = suppliers.map(supplier => `
            <tr>
                <td>
                    <strong>${supplier.name}</strong>
                    ${supplier.taxNumber ? `<br><small class="text-muted">الرقم الضريبي: ${supplier.taxNumber}</small>` : ''}
                </td>
                <td>${supplier.phone || '-'}</td>
                <td>${supplier.email || '-'}</td>
                <td>
                    <span class="badge bg-${supplier.currentBalance > 0 ? 'success' : supplier.currentBalance < 0 ? 'danger' : 'secondary'}">
                        ${formatCurrency(supplier.currentBalance || 0)}
                        ${supplier.currentBalance > 0 ? '(دائن)' : supplier.currentBalance < 0 ? '(مدين)' : '(متوازن)'}
                    </span>
                </td>
                <td>${supplier.createdAt}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="editSupplier(${supplier.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="viewSupplierStatement(${supplier.id})" title="كشف حساب">
                            <i class="fas fa-file-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteSupplier(${supplier.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-muted py-4">
                    <i class="fas fa-truck fa-3x mb-3"></i>
                    <h5>لا توجد موردين تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearSuppliersFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * تطبيق فلاتر الأصناف
 */
function applyProductsFilter() {
    const searchText = document.getElementById('productSearch')?.value.toLowerCase() || '';
    const categoryFilter = document.getElementById('productCategoryFilter')?.value || '';
    const warehouseFilter = document.getElementById('productWarehouseFilter')?.value || '';
    const stockFilter = document.getElementById('productStockFilter')?.value || '';

    let filteredProducts = appData.products;

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredProducts = filteredProducts.filter(product => {
            const name = product.name.toLowerCase();
            const code = product.code.toLowerCase();
            const description = (product.description || '').toLowerCase();

            return name.includes(searchText) || code.includes(searchText) || description.includes(searchText);
        });
    }

    // تطبيق فلتر الفئة
    if (categoryFilter) {
        filteredProducts = filteredProducts.filter(product => product.category === categoryFilter);
    }

    // تطبيق فلتر المخزن
    if (warehouseFilter) {
        filteredProducts = filteredProducts.filter(product => product.warehouseId == warehouseFilter);
    }

    // تطبيق فلتر حالة المخزون
    if (stockFilter) {
        filteredProducts = filteredProducts.filter(product => {
            const quantity = product.quantity || 0;
            const minQuantity = product.minQuantity || 0;

            switch (stockFilter) {
                case 'low': return quantity <= minQuantity && quantity > 0;
                case 'normal': return quantity > minQuantity;
                case 'out': return quantity === 0;
                default: return true;
            }
        });
    }

    // تحديث الجدول
    updateProductsTable(filteredProducts);
}

/**
 * مسح فلاتر الأصناف
 */
function clearProductsFilter() {
    const searchInput = document.getElementById('productSearch');
    const categoryFilter = document.getElementById('productCategoryFilter');
    const warehouseFilter = document.getElementById('productWarehouseFilter');
    const stockFilter = document.getElementById('productStockFilter');

    if (searchInput) searchInput.value = '';
    if (categoryFilter) categoryFilter.value = '';
    if (warehouseFilter) warehouseFilter.value = '';
    if (stockFilter) stockFilter.value = '';

    // عرض جميع الأصناف
    updateProductsTable(appData.products);
}

/**
 * تحديث جدول الأصناف
 */
function updateProductsTable(products) {
    const tableContainer = document.querySelector('#productsTable tbody') ||
                          document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (products.length > 0) {
        tableContainer.innerHTML = products.map(product => {
            const isLowStock = product.quantity <= product.minQuantity;
            return `
                <tr class="${isLowStock ? 'table-warning' : ''}">
                    <td><strong>${product.code}</strong></td>
                    <td>
                        ${product.name}
                        ${product.description ? `<br><small class="text-muted">${product.description}</small>` : ''}
                    </td>
                    <td>${product.unit}</td>
                    <td>${formatCurrency(product.costPrice)}</td>
                    <td>${formatCurrency(product.sellingPrice)}</td>
                    <td>
                        <span class="badge bg-${isLowStock ? 'danger' : 'success'}">
                            ${product.quantity} ${product.unit}
                        </span>
                    </td>
                    <td>${product.minQuantity} ${product.unit}</td>
                    <td>
                        ${isLowStock ? '<i class="fas fa-exclamation-triangle text-warning" title="مخزون منخفض"></i>' : '<i class="fas fa-check-circle text-success" title="مخزون آمن"></i>'}
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="editProduct(${product.id})" title="تعديل">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-info" onclick="viewProductMovements(${product.id})" title="حركة المخزون">
                                <i class="fas fa-exchange-alt"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct(${product.id})" title="حذف">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="9" class="text-center text-muted py-4">
                    <i class="fas fa-boxes fa-3x mb-3"></i>
                    <h5>لا توجد أصناف تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearProductsFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * تطبيق فلاتر سندات القبض
 */
function applyReceiptsFilter() {
    const customerFilter = document.getElementById('receiptCustomerFilter')?.value || '';
    const methodFilter = document.getElementById('receiptMethodFilter')?.value || '';
    const fromDate = document.getElementById('receiptFromDate')?.value || '';
    const toDate = document.getElementById('receiptToDate')?.value || '';
    const searchText = document.getElementById('receiptSearch')?.value.toLowerCase() || '';

    let filteredReceipts = appData.payments.filter(p => p.paymentType === 'receipt');

    // تطبيق فلتر العميل
    if (customerFilter) {
        filteredReceipts = filteredReceipts.filter(receipt => receipt.customerId == customerFilter);
    }

    // تطبيق فلتر طريقة الدفع
    if (methodFilter) {
        filteredReceipts = filteredReceipts.filter(receipt => receipt.paymentMethod === methodFilter);
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredReceipts = filteredReceipts.filter(receipt => receipt.paymentDate >= fromDate);
    }
    if (toDate) {
        filteredReceipts = filteredReceipts.filter(receipt => receipt.paymentDate <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredReceipts = filteredReceipts.filter(receipt => {
            const customer = appData.customers.find(c => c.id === receipt.customerId);
            const customerName = customer ? customer.name.toLowerCase() : '';
            const receiptNumber = receipt.paymentNumber.toLowerCase();

            return receiptNumber.includes(searchText) || customerName.includes(searchText);
        });
    }

    // تحديث الجدول
    updateReceiptsTable(filteredReceipts);
}

/**
 * مسح فلاتر سندات القبض
 */
function clearReceiptsFilter() {
    const customerFilter = document.getElementById('receiptCustomerFilter');
    const methodFilter = document.getElementById('receiptMethodFilter');
    const fromDate = document.getElementById('receiptFromDate');
    const toDate = document.getElementById('receiptToDate');
    const searchText = document.getElementById('receiptSearch');

    if (customerFilter) customerFilter.value = '';
    if (methodFilter) methodFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';

    // عرض جميع سندات القبض
    const allReceipts = appData.payments.filter(p => p.paymentType === 'receipt');
    updateReceiptsTable(allReceipts);
}

/**
 * تطبيق فلاتر سندات الدفع
 */
function applyPaymentsFilter() {
    const supplierFilter = document.getElementById('paymentSupplierFilter')?.value || '';
    const methodFilter = document.getElementById('paymentMethodFilter')?.value || '';
    const fromDate = document.getElementById('paymentFromDate')?.value || '';
    const toDate = document.getElementById('paymentToDate')?.value || '';
    const searchText = document.getElementById('paymentSearch')?.value.toLowerCase() || '';

    let filteredPayments = appData.payments.filter(p => p.paymentType === 'payment');

    // تطبيق فلتر المورد
    if (supplierFilter) {
        filteredPayments = filteredPayments.filter(payment => payment.supplierId == supplierFilter);
    }

    // تطبيق فلتر طريقة الدفع
    if (methodFilter) {
        filteredPayments = filteredPayments.filter(payment => payment.paymentMethod === methodFilter);
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredPayments = filteredPayments.filter(payment => payment.paymentDate >= fromDate);
    }
    if (toDate) {
        filteredPayments = filteredPayments.filter(payment => payment.paymentDate <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredPayments = filteredPayments.filter(payment => {
            const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
            const supplierName = supplier ? supplier.name.toLowerCase() : '';
            const paymentNumber = payment.paymentNumber.toLowerCase();

            return paymentNumber.includes(searchText) || supplierName.includes(searchText);
        });
    }

    // تحديث الجدول
    updatePaymentsTable(filteredPayments);
}

/**
 * مسح فلاتر سندات الدفع
 */
function clearPaymentsFilter() {
    const supplierFilter = document.getElementById('paymentSupplierFilter');
    const methodFilter = document.getElementById('paymentMethodFilter');
    const fromDate = document.getElementById('paymentFromDate');
    const toDate = document.getElementById('paymentToDate');
    const searchText = document.getElementById('paymentSearch');

    if (supplierFilter) supplierFilter.value = '';
    if (methodFilter) methodFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';

    // عرض جميع سندات الدفع
    const allPayments = appData.payments.filter(p => p.paymentType === 'payment');
    updatePaymentsTable(allPayments);
}

/**
 * تحديث جدول سندات القبض
 */
function updateReceiptsTable(receipts) {
    const tableContainer = document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (receipts.length > 0) {
        tableContainer.innerHTML = receipts.map(receipt => {
            const customer = appData.customers.find(c => c.id === receipt.customerId);
            return `
                <tr>
                    <td><strong>${receipt.paymentNumber}</strong></td>
                    <td>${customer ? customer.name : 'غير محدد'}</td>
                    <td>${receipt.paymentDate}</td>
                    <td>${formatCurrency(receipt.amount)}</td>
                    <td>${getPaymentMethodText(receipt.paymentMethod)}</td>
                    <td>${receipt.referenceNumber || '-'}</td>
                    <td><span class="badge bg-${getStatusColor(receipt.status)}">${getStatusText(receipt.status)}</span></td>
                    <td>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="viewReceipt(${receipt.id})" title="عرض">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-success" onclick="printReceipt(${receipt.id})" title="طباعة">
                                <i class="fas fa-print"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-info" onclick="editReceipt(${receipt.id})" title="تعديل">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteReceipt(${receipt.id})" title="حذف">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="8" class="text-center text-muted py-4">
                    <i class="fas fa-hand-holding-usd fa-3x mb-3"></i>
                    <h5>لا توجد سندات قبض تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearReceiptsFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * تحديث جدول سندات الدفع
 */
function updatePaymentsTable(payments) {
    const tableContainer = document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (payments.length > 0) {
        tableContainer.innerHTML = payments.map(payment => {
            const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
            return `
                <tr>
                    <td><strong>${payment.paymentNumber}</strong></td>
                    <td>${supplier ? supplier.name : 'غير محدد'}</td>
                    <td>${payment.paymentDate}</td>
                    <td>${formatCurrency(payment.amount)}</td>
                    <td>${getPaymentMethodText(payment.paymentMethod)}</td>
                    <td>${payment.referenceNumber || '-'}</td>
                    <td><span class="badge bg-${getStatusColor(payment.status)}">${getStatusText(payment.status)}</span></td>
                    <td>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="viewPayment(${payment.id})" title="عرض">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-success" onclick="printPayment(${payment.id})" title="طباعة">
                                <i class="fas fa-print"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-info" onclick="editPayment(${payment.id})" title="تعديل">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deletePayment(${payment.id})" title="حذف">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="8" class="text-center text-muted py-4">
                    <i class="fas fa-money-bill-wave fa-3x mb-3"></i>
                    <h5>لا توجد سندات دفع تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearPaymentsFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * الحصول على نص طريقة الدفع
 */
function getPaymentMethodText(method) {
    const methods = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };
    return methods[method] || method;
}

/**
 * تطبيق فلاتر دفتر اليومية
 */
function applyJournalFilter() {
    console.log('🔍 تطبيق فلاتر دفتر اليومية...');

    // جمع جميع الفلاتر
    const typeFilter = document.getElementById('journalTypeFilter')?.value || '';
    const fromDate = document.getElementById('journalFromDate')?.value || '';
    const toDate = document.getElementById('journalToDate')?.value || '';
    const currencyFilter = document.getElementById('journalCurrencyFilter')?.value || '';
    const accountFilter = document.getElementById('journalAccountFilter')?.value || '';
    const searchText = document.getElementById('journalSearch')?.value.toLowerCase() || '';
    const amountRange = document.getElementById('journalAmountRange')?.value || '';
    const balanceFilter = document.getElementById('journalBalanceFilter')?.value || '';
    const clientFilter = document.getElementById('journalClientFilter')?.value || '';
    const referenceFilter = document.getElementById('journalReferenceFilter')?.value.toLowerCase() || '';
    const sortOrder = document.getElementById('journalSortOrder')?.value || 'date_desc';

    // الحصول على جميع القيود من مصادر مختلفة (نفس منطق getJournalEntriesRows)
    let allEntries = [];

    // 1. القيود اليدوية الموجودة
    if (appData.journalEntries && appData.journalEntries.length > 0) {
        allEntries = [...appData.journalEntries];
    }

    // 2. قيود من الفواتير
    if (appData.invoices && appData.invoices.length > 0) {
        appData.invoices.forEach(invoice => {
            if (invoice.status === 'confirmed' && invoice.isDeleted !== true) {
                const client = invoice.invoiceType === 'sale' ?
                    appData.customers.find(c => c.id === invoice.customerId) :
                    appData.suppliers.find(s => s.id === invoice.supplierId);

                const clientName = client ? client.name : 'غير محدد';
                const invoiceTypeText = invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات';

                if (invoice.invoiceType === 'sale') {
                    allEntries.push({
                        entryDate: invoice.invoiceDate,
                        entryType: 'sale_invoice',
                        description: `فاتورة مبيعات رقم ${invoice.invoiceNumber} - ${clientName}`,
                        debitAccount: `العملاء - ${clientName}`,
                        creditAccount: 'المبيعات',
                        debitAmount: invoice.totalAmount,
                        creditAmount: invoice.totalAmount,
                        currency: invoice.currency || 'SYP',
                        referenceType: 'invoice',
                        referenceId: invoice.invoiceNumber,
                        source: 'invoice',
                        customerId: invoice.customerId,
                        invoiceId: invoice.id
                    });
                } else {
                    allEntries.push({
                        entryDate: invoice.invoiceDate,
                        entryType: 'purchase_invoice',
                        description: `فاتورة مشتريات رقم ${invoice.invoiceNumber} - ${clientName}`,
                        debitAccount: 'المشتريات',
                        creditAccount: `الموردين - ${clientName}`,
                        debitAmount: invoice.totalAmount,
                        creditAmount: invoice.totalAmount,
                        currency: invoice.currency || 'SYP',
                        referenceType: 'invoice',
                        referenceId: invoice.invoiceNumber,
                        source: 'invoice',
                        supplierId: invoice.supplierId,
                        invoiceId: invoice.id
                    });
                }
            }
        });
    }

    // 3. قيود من سندات القبض والدفع
    if (appData.payments && appData.payments.length > 0) {
        appData.payments.forEach(payment => {
            if (payment.status === 'confirmed' && payment.isDeleted !== true) {
                const client = payment.paymentType === 'receipt' ?
                    appData.customers.find(c => c.id === payment.customerId) :
                    appData.suppliers.find(s => s.id === payment.supplierId);

                const clientName = client ? client.name : 'غير محدد';

                if (payment.paymentType === 'receipt') {
                    allEntries.push({
                        entryDate: payment.paymentDate,
                        entryType: 'receipt',
                        description: `سند قبض رقم ${payment.paymentNumber} - ${clientName}`,
                        debitAccount: payment.paymentMethod === 'cash' ? 'الصندوق' : 'البنك',
                        creditAccount: `العملاء - ${clientName}`,
                        debitAmount: payment.amount,
                        creditAmount: payment.amount,
                        currency: payment.currency || 'SYP',
                        referenceType: 'receipt',
                        referenceId: payment.paymentNumber,
                        source: 'payment',
                        customerId: payment.customerId,
                        paymentId: payment.id
                    });
                } else {
                    allEntries.push({
                        entryDate: payment.paymentDate,
                        entryType: 'payment',
                        description: `سند دفع رقم ${payment.paymentNumber} - ${clientName}`,
                        debitAccount: `الموردين - ${clientName}`,
                        creditAccount: payment.paymentMethod === 'cash' ? 'الصندوق' : 'البنك',
                        debitAmount: payment.amount,
                        creditAmount: payment.amount,
                        currency: payment.currency || 'SYP',
                        referenceType: 'payment',
                        referenceId: payment.paymentNumber,
                        source: 'payment',
                        supplierId: payment.supplierId,
                        paymentId: payment.id
                    });
                }
            }
        });
    }

    console.log(`📊 إجمالي القيود قبل الفلترة: ${allEntries.length}`);

    // تطبيق الفلاتر
    let filteredEntries = allEntries;

    // فلتر نوع العملية
    if (typeFilter) {
        filteredEntries = filteredEntries.filter(entry => {
            switch (typeFilter) {
                case 'sale_invoice':
                    return entry.entryType === 'sale_invoice';
                case 'purchase_invoice':
                    return entry.entryType === 'purchase_invoice';
                case 'invoice':
                    return entry.entryType === 'sale_invoice' || entry.entryType === 'purchase_invoice';
                case 'receipt':
                    return entry.entryType === 'receipt';
                case 'payment':
                    return entry.entryType === 'payment';
                case 'all_payments':
                    return entry.entryType === 'receipt' || entry.entryType === 'payment';
                case 'inventory_in':
                    return entry.entryType === 'inventory_in';
                case 'inventory_out':
                    return entry.entryType === 'inventory_out';
                case 'inventory_transfer':
                    return entry.entryType === 'inventory_transfer';
                case 'inventory_adjustment':
                    return entry.entryType === 'inventory_adjustment';
                case 'adjustment':
                    return entry.entryType === 'adjustment';
                case 'opening':
                    return entry.entryType === 'opening';
                case 'closing':
                    return entry.entryType === 'closing';
                case 'manual':
                    return entry.entryType === 'manual';
                default:
                    return true;
            }
        });
    }

    // فلتر التاريخ
    if (fromDate) {
        filteredEntries = filteredEntries.filter(entry => {
            const entryDate = entry.entryDate || entry.date;
            return entryDate >= fromDate;
        });
    }
    if (toDate) {
        filteredEntries = filteredEntries.filter(entry => {
            const entryDate = entry.entryDate || entry.date;
            return entryDate <= toDate;
        });
    }

    // تطبيق فلتر البحث النصي المحسن
    if (searchText) {
        filteredEntries = filteredEntries.filter(entry => {
            const description = (entry.description || '').toLowerCase();
            const debitAccount = (entry.debitAccount || '').toLowerCase();
            const creditAccount = (entry.creditAccount || '').toLowerCase();
            const reference = (entry.reference || entry.referenceNumber || '').toLowerCase();
            const entryNumber = (entry.entryNumber || '').toLowerCase();
            const entryDate = (entry.entryDate || entry.date || '').toLowerCase();
            const amount = (entry.debitAmount || entry.creditAmount || 0).toString();
            const currency = (entry.currency || '').toLowerCase();

            return description.includes(searchText) ||
                   debitAccount.includes(searchText) ||
                   creditAccount.includes(searchText) ||
                   reference.includes(searchText) ||
                   entryNumber.includes(searchText) ||
                   entryDate.includes(searchText) ||
                   amount.includes(searchText) ||
                   currency.includes(searchText);
        });
    }

    // تحديث الجدول مع الإحصائيات
    updateJournalTable(filteredEntries);

    // عرض إحصائيات الفلترة
    showJournalFilterStats(filteredEntries);
}

/**
 * مسح فلاتر دفتر اليومية
 */
function clearJournalFilter() {
    // مسح فلاتر دفتر اليومية المحسنة
    const typeFilter = document.getElementById('journalTypeFilter');
    const fromDate = document.getElementById('journalFromDate');
    const toDate = document.getElementById('journalToDate');
    const searchText = document.getElementById('journalSearch');
    const currencyFilter = document.getElementById('journalCurrencyFilter');
    const accountFilter = document.getElementById('journalAccountFilter');

    if (typeFilter) typeFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';
    if (currencyFilter) currencyFilter.value = '';
    if (accountFilter) accountFilter.value = '';

    // عرض جميع القيود
    updateJournalTable(appData.journalEntries || []);
    showJournalFilterStats(appData.journalEntries || []);

    console.log('🔄 تم مسح جميع فلاتر دفتر اليومية');
}

/**
 * عرض إحصائيات فلترة دفتر اليومية
 */
function showJournalFilterStats(entries) {
    // حساب الإحصائيات
    let totalDebit = 0;
    let totalCredit = 0;
    const currencyTotals = {};
    const typeCounts = {};

    entries.forEach(entry => {
        const debitAmount = entry.debitAmount || 0;
        const creditAmount = entry.creditAmount || 0;
        const currency = entry.currency || 'SYP';
        const entryType = entry.entryType || 'other';

        totalDebit += debitAmount;
        totalCredit += creditAmount;

        // إحصائيات العملات
        if (!currencyTotals[currency]) {
            currencyTotals[currency] = { debit: 0, credit: 0, count: 0 };
        }
        currencyTotals[currency].debit += debitAmount;
        currencyTotals[currency].credit += creditAmount;
        currencyTotals[currency].count++;

        // إحصائيات أنواع القيود
        typeCounts[entryType] = (typeCounts[entryType] || 0) + 1;
    });

    // عرض الإحصائيات
    const statsContainer = document.getElementById('journalFilterStats');
    if (statsContainer) {
        const currencyStatsHtml = Object.keys(currencyTotals).map(currency => {
            const stats = currencyTotals[currency];
            const symbol = getCurrencySymbol(currency);
            return `
                <div class="col-md-3 mb-2">
                    <div class="card border-primary">
                        <div class="card-body p-2">
                            <h6 class="card-title mb-1">${currency} ${symbol}</h6>
                            <small class="text-muted">
                                مدين: ${formatCurrency(stats.debit)} ${symbol}<br>
                                دائن: ${formatCurrency(stats.credit)} ${symbol}<br>
                                عدد القيود: ${stats.count}
                            </small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        statsContainer.innerHTML = `
            <div class="row">
                <div class="col-md-6">
                    <div class="alert alert-info mb-2">
                        <strong>إجمالي القيود المفلترة:</strong> ${entries.length} قيد<br>
                        <strong>إجمالي المدين:</strong> ${formatCurrency(totalDebit)}<br>
                        <strong>إجمالي الدائن:</strong> ${formatCurrency(totalCredit)}<br>
                        <strong>الفرق:</strong> ${formatCurrency(Math.abs(totalDebit - totalCredit))}
                        ${totalDebit !== totalCredit ? '<span class="text-warning"> (غير متوازن)</span>' : '<span class="text-success"> (متوازن)</span>'}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="row">
                        ${currencyStatsHtml}
                    </div>
                </div>
            </div>
        `;
    }
}







/**
 * تحديث جدول دفتر اليومية
 */
function updateJournalTable(entries) {
    const tableContainer = document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (entries.length > 0) {
        let totalDebit = 0;
        let totalCredit = 0;

        // ترتيب القيود حسب التاريخ
        const sortedEntries = entries.sort((a, b) => new Date(a.entryDate || a.date) - new Date(b.entryDate || b.date));

        tableContainer.innerHTML = sortedEntries.map((entry, index) => {
            const debitAmount = entry.debitAmount || 0;
            const creditAmount = entry.creditAmount || 0;

            totalDebit += debitAmount;
            totalCredit += creditAmount;

            // تحديد نوع العملية ولونها
            const entryTypeInfo = getEntryTypeInfo(entry);
            const currencySymbol = entry.currency ? getCurrencySymbol(entry.currency) : 'ل.س';

            return `
                <tr class="journal-entry-row">
                    <td>
                        <strong>${formatDate(entry.entryDate || entry.date)}</strong>
                        <br><small class="text-muted">${entry.createdAt ? formatDateTime(entry.createdAt).split(' ')[1] : ''}</small>
                    </td>
                    <td>
                        <span class="badge bg-${entryTypeInfo.color} fs-6">
                            <i class="${entryTypeInfo.icon} me-1"></i>
                            ${entryTypeInfo.text}
                        </span>
                    </td>
                    <td>
                        <div class="fw-bold">${entry.description}</div>
                        ${entry.referenceType ? `<small class="text-muted">مرجع: ${entry.referenceType}</small>` : ''}
                    </td>
                    <td>
                        <span class="badge bg-danger bg-opacity-10 text-danger">
                            <i class="fas fa-arrow-up me-1"></i>
                            ${entry.debitAccount}
                        </span>
                    </td>
                    <td>
                        <span class="badge bg-success bg-opacity-10 text-success">
                            <i class="fas fa-arrow-down me-1"></i>
                            ${entry.creditAccount}
                        </span>
                    </td>
                    <td class="text-end">
                        <strong class="text-danger">
                            ${debitAmount > 0 ? formatCurrency(debitAmount, entry.currency) : '-'}
                        </strong>
                    </td>
                    <td class="text-end">
                        <strong class="text-success">
                            ${creditAmount > 0 ? formatCurrency(creditAmount, entry.currency) : '-'}
                        </strong>
                    </td>
                    <td class="text-center">
                        <span class="badge bg-secondary">
                            ${entry.referenceId || entry.reference || (index + 1)}
                        </span>
                    </td>
                </tr>
            `;
        }).join('');

        // تحديث الإجماليات - عرض بدون رمز عملة إذا كانت عملات مختلطة
        const totalDebitElement = document.getElementById('totalDebit');
        const totalCreditElement = document.getElementById('totalCredit');

        // التحقق من وجود عملات متعددة في النتائج
        const currencies = [...new Set(entries.map(entry => entry.currency || 'SYP'))];
        const currencyDisplay = currencies.length === 1 ? ` ${getCurrencySymbol(currencies[0])}` : '';

        if (totalDebitElement) totalDebitElement.textContent = formatCurrency(totalDebit) + currencyDisplay;
        if (totalCreditElement) totalCreditElement.textContent = formatCurrency(totalCredit) + currencyDisplay;

        // إضافة صف التوازن
        const balanceClass = Math.abs(totalDebit - totalCredit) < 0.01 ? 'text-success' : 'text-danger';
        const balanceIcon = Math.abs(totalDebit - totalCredit) < 0.01 ? 'fa-check-circle' : 'fa-exclamation-triangle';

        tableContainer.innerHTML += `
            <tr class="table-warning">
                <td colspan="5" class="text-center">
                    <strong>
                        <i class="fas ${balanceIcon} me-2"></i>
                        حالة التوازن:
                        <span class="${balanceClass}">
                            ${Math.abs(totalDebit - totalCredit) < 0.01 ? 'متوازن' : 'غير متوازن'}
                        </span>
                    </strong>
                </td>
                <td class="text-end"><strong>${formatCurrency(totalDebit)}${currencyDisplay}</strong></td>
                <td class="text-end"><strong>${formatCurrency(totalCredit)}${currencyDisplay}</strong></td>
                <td class="text-center">
                    <span class="badge ${Math.abs(totalDebit - totalCredit) < 0.01 ? 'bg-success' : 'bg-danger'}">
                        الفرق: ${formatCurrency(Math.abs(totalDebit - totalCredit))}${currencyDisplay}
                    </span>
                </td>
            </tr>
        `;

    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="8" class="text-center text-muted py-5">
                    <i class="fas fa-book fa-4x mb-3 text-muted"></i>
                    <h4>لا توجد قيود محاسبية</h4>
                    <p class="mb-3">لم يتم العثور على قيود تطابق معايير البحث المحددة</p>
                    <button class="btn btn-primary" onclick="clearJournalFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                    <button class="btn btn-outline-success ms-2" onclick="showPage('sales-invoices')">
                        <i class="fas fa-plus me-2"></i>إضافة فاتورة
                    </button>
                </td>
            </tr>
        `;

        // إعادة تعيين الإجماليات
        const totalDebitElement = document.getElementById('totalDebit');
        const totalCreditElement = document.getElementById('totalCredit');
        if (totalDebitElement) totalDebitElement.textContent = '0.00';
        if (totalCreditElement) totalCreditElement.textContent = '0.00';
    }
}

/**
 * إضافة عنصر جديد للفاتورة
 */
function addInvoiceItem() {
    console.log('➕ إضافة عنصر جديد للفاتورة...');

    const tableBody = document.getElementById('invoiceItemsTable');
    if (!tableBody) {
        console.error('❌ جدول عناصر الفاتورة غير موجود');
        alert('خطأ: جدول عناصر الفاتورة غير موجود. يرجى إعادة تحميل الصفحة.');
        return;
    }

    console.log('📦 عدد الأصناف المتاحة:', appData.products.length);

    if (appData.products.length === 0) {
        alert('لا توجد أصناف متاحة. يرجى إضافة أصناف أولاً من صفحة الأصناف.');
        return;
    }

    const row = document.createElement('tr');
    row.innerHTML = `
        <td>
            <select class="form-select item-product" onchange="updateItemPrice(this)" required>
                <option value="">اختر الصنف</option>
                ${appData.products.map(p => `<option value="${p.id}" data-price="${p.sellingPrice}" data-unit="${p.unit}">${p.name} (${p.quantity} ${p.unit})</option>`).join('')}
            </select>
        </td>
        <td>
            <input type="number" class="form-control item-quantity" min="1" step="1" value="1" onchange="calculateItemTotal(this)" required>
        </td>
        <td>
            <input type="number" class="form-control item-price" min="0" step="0.01" value="0" onchange="calculateItemTotal(this)" required>
        </td>
        <td>
            <input type="number" class="form-control item-discount" min="0" max="100" step="0.01" value="0" onchange="calculateItemTotal(this)">
        </td>
        <td>
            <span class="item-total fw-bold">0.00</span>
        </td>
        <td>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeInvoiceItem(this)" title="حذف العنصر">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;

    tableBody.appendChild(row);
    console.log('✅ تم إضافة عنصر جديد للفاتورة. العدد الحالي:', tableBody.children.length);

    // تحديث الإجماليات
    calculateInvoiceTotals();
}

/**
 * حذف عنصر من الفاتورة
 */
function removeInvoiceItem(button) {
    const row = button.closest('tr');
    if (row) {
        row.remove();
        calculateInvoiceTotals();
        console.log('تم حذف عنصر من الفاتورة');
    }
}

/**
 * تحديث سعر الصنف عند اختياره
 */
function updateItemPrice(selectElement) {
    console.log('💰 تحديث سعر الصنف...');

    const selectedOption = selectElement.options[selectElement.selectedIndex];
    const productId = selectElement.value;
    const price = selectedOption.getAttribute('data-price') || 0;
    const unit = selectedOption.getAttribute('data-unit') || '';
    const row = selectElement.closest('tr');
    const priceInput = row.querySelector('.item-price');
    const quantityInput = row.querySelector('.item-quantity');

    console.log('📊 معلومات الصنف:', { productId, price, unit });

    if (priceInput) {
        priceInput.value = parseFloat(price).toFixed(2);
        console.log('✅ تم تحديث السعر إلى:', price);
    }

    // التحقق من الكمية المتاحة
    if (productId && quantityInput) {
        const product = appData.products.find(p => p.id == productId);
        if (product) {
            const requestedQuantity = parseFloat(quantityInput.value) || 1;
            if (requestedQuantity > product.quantity) {
                alert(`تحذير: الكمية المطلوبة (${requestedQuantity}) أكبر من الكمية المتاحة (${product.quantity} ${product.unit})`);
                quantityInput.value = Math.min(requestedQuantity, product.quantity);
            }
        }
    }

    calculateItemTotal(priceInput || selectElement);
}

/**
 * حساب إجمالي العنصر
 */
function calculateItemTotal(element) {
    console.log('🧮 حساب إجمالي العنصر...');

    const row = element.closest('tr');
    if (!row) {
        console.error('❌ لا يمكن العثور على الصف');
        return;
    }

    const quantityInput = row.querySelector('.item-quantity');
    const priceInput = row.querySelector('.item-price');
    const discountInput = row.querySelector('.item-discount');
    const totalSpan = row.querySelector('.item-total');

    if (!quantityInput || !priceInput || !totalSpan) {
        console.error('❌ عناصر الصف مفقودة');
        return;
    }

    const quantity = parseFloat(quantityInput.value) || 0;
    const price = parseFloat(priceInput.value) || 0;
    const discount = discountInput ? parseFloat(discountInput.value) || 0 : 0;

    console.log('📊 قيم العنصر:', { quantity, price, discount });

    const subtotal = quantity * price;
    const discountAmount = subtotal * (discount / 100);
    const total = subtotal - discountAmount;

    console.log('💰 الحسابات:', { subtotal, discountAmount, total });

    // عرض المبلغ بدون رمز عملة إذا لم تحدد عملة
    totalSpan.textContent = `${total.toFixed(2)}`;

    console.log('✅ تم تحديث إجمالي العنصر:', total);

    calculateInvoiceTotals();
}

/**
 * حساب إجماليات الفاتورة
 */
function calculateInvoiceTotals() {
    console.log('🧮 حساب إجماليات الفاتورة...');

    const rows = document.querySelectorAll('#invoiceItemsTable tr');
    let subtotal = 0;

    console.log('📊 عدد صفوف العناصر:', rows.length);

    rows.forEach((row, index) => {
        const totalSpan = row.querySelector('.item-total');
        if (totalSpan) {
            const itemTotal = parseFloat(totalSpan.textContent.replace(/[^\d.-]/g, '')) || 0;
            subtotal += itemTotal;
            console.log(`📦 العنصر ${index + 1}: ${itemTotal}`);
        }
    });

    console.log('💰 المجموع الفرعي:', subtotal);

    const discountPercentageElement = document.getElementById('discountPercentage');
    const taxPercentageElement = document.getElementById('taxPercentage');

    const discountPercentage = discountPercentageElement ? parseFloat(discountPercentageElement.value) || 0 : 0;
    const taxPercentage = taxPercentageElement ? parseFloat(taxPercentageElement.value) || 0 : 0;

    console.log('📊 النسب:', { discountPercentage, taxPercentage });

    const discountAmount = subtotal * (discountPercentage / 100);
    const taxableAmount = subtotal - discountAmount;
    const taxAmount = taxableAmount * (taxPercentage / 100);
    const totalAmount = taxableAmount + taxAmount;

    console.log('💰 الحسابات النهائية:', { subtotal, discountAmount, taxAmount, totalAmount });

    // تحديث العرض بدون رمز عملة
    const subtotalElement = document.getElementById('subtotalAmount');
    const discountAmountElement = document.getElementById('discountAmount');
    const taxAmountElement = document.getElementById('taxAmount');
    const totalAmountElement = document.getElementById('totalAmount');

    if (subtotalElement) subtotalElement.textContent = `${subtotal.toFixed(2)}`;
    if (discountAmountElement) discountAmountElement.textContent = `${discountAmount.toFixed(2)}`;
    if (taxAmountElement) taxAmountElement.textContent = `${taxAmount.toFixed(2)}`;
    if (totalAmountElement) totalAmountElement.textContent = `${totalAmount.toFixed(2)}`;

    console.log('✅ تم تحديث عرض الإجماليات');

    return { subtotal, discountAmount, taxAmount, totalAmount };
}

/**
 * تحديث خيارات العميل/المورد حسب نوع الفاتورة
 */
function updateClientOptions() {
    console.log('🔄 تحديث خيارات العميل/المورد...');

    const invoiceType = document.getElementById('invoiceType').value;
    const clientSelect = document.getElementById('clientSelect');
    const clientLabel = document.getElementById('clientLabel');

    if (!clientSelect || !clientLabel) {
        console.warn('⚠️ عناصر العميل غير موجودة');
        return;
    }

    clientSelect.innerHTML = '<option value="">اختر العميل/المورد</option>';

    if (invoiceType === 'sale') {
        clientLabel.textContent = 'العميل';
        console.log('📊 عدد العملاء:', appData.customers.length);

        if (appData.customers && appData.customers.length > 0) {
            appData.customers.forEach(customer => {
                const option = document.createElement('option');
                option.value = customer.id;
                option.textContent = customer.name;
                clientSelect.appendChild(option);
            });
            console.log('✅ تم تحديث قائمة العملاء');
        } else {
            console.warn('⚠️ لا توجد عملاء');
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'لا توجد عملاء - اضغط "إصلاح مشكلة الحفظ"';
            option.disabled = true;
            clientSelect.appendChild(option);
        }
    } else if (invoiceType === 'purchase') {
        clientLabel.textContent = 'المورد';
        console.log('📊 عدد الموردين:', appData.suppliers.length);

        if (appData.suppliers && appData.suppliers.length > 0) {
            appData.suppliers.forEach(supplier => {
                const option = document.createElement('option');
                option.value = supplier.id;
                option.textContent = supplier.name;
                clientSelect.appendChild(option);
            });
            console.log('✅ تم تحديث قائمة الموردين');
        } else {
            console.warn('⚠️ لا توجد موردين');
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'لا توجد موردين - اضغط "إصلاح مشكلة الحفظ"';
            option.disabled = true;
            clientSelect.appendChild(option);
        }
    }

    // تحديث رقم الفاتورة
    if (invoiceType) {
        const invoiceNumber = generateInvoiceNumber(invoiceType);
        const invoiceNumberInput = document.getElementById('invoiceNumber');
        if (invoiceNumberInput) {
            invoiceNumberInput.value = invoiceNumber;
            console.log('✅ تم تحديث رقم الفاتورة:', invoiceNumber);
        }
    }
}

/**
 * تحديث معلومات العميل/المورد المحدد
 */
function updateClientInfo() {
    const invoiceType = document.getElementById('invoiceType')?.value;
    const clientSelect = document.getElementById('clientSelect');
    const clientInfo = document.getElementById('clientInfo');
    const invoiceCurrency = document.getElementById('invoiceCurrency');

    if (!clientSelect || !clientInfo) {
        return;
    }

    const clientId = parseInt(clientSelect.value);
    if (!clientId) {
        clientInfo.innerHTML = '<span class="text-muted">اختر العميل/المورد لعرض المعلومات</span>';
        return;
    }

    let client = null;
    if (invoiceType === 'sale') {
        client = appData.customers.find(c => c.id === clientId);
    } else if (invoiceType === 'purchase') {
        client = appData.suppliers.find(s => s.id === clientId);
    }

    if (!client) {
        clientInfo.innerHTML = '<span class="text-danger">العميل/المورد غير موجود</span>';
        return;
    }

    // تحديث عملة الفاتورة إلى عملة العميل/المورد الافتراضية
    if (client.currency && invoiceCurrency) {
        invoiceCurrency.value = client.currency;
        updateCurrencyDisplay();
    }

    // عرض معلومات العميل/المورد
    const balance = client.currentBalance || 0;
    const balanceText = balance > 0 ?
        `<span class="text-danger">${formatCurrency(Math.abs(balance))} ${getCurrencySymbol(client.currency || 'SYP')} (مدين)</span>` :
        balance < 0 ?
        `<span class="text-success">${formatCurrency(Math.abs(balance))} ${getCurrencySymbol(client.currency || 'SYP')} (دائن)</span>` :
        `<span class="text-muted">${formatCurrency(0)} ${getCurrencySymbol(client.currency || 'SYP')} (متوازن)</span>`;

    const creditLimit = client.creditLimit || 0;
    const creditLimitText = creditLimit > 0 ?
        `<span class="text-info">حد الائتمان: ${formatCurrency(creditLimit)} ${getCurrencySymbol(client.currency || 'SYP')}</span>` : '';

    clientInfo.innerHTML = `
        <div class="row">
            <div class="col-md-6">
                <small class="text-muted">الهاتف:</small> ${client.phone || 'غير محدد'}<br>
                <small class="text-muted">البريد:</small> ${client.email || 'غير محدد'}
            </div>
            <div class="col-md-6">
                <small class="text-muted">الرصيد الحالي:</small> ${balanceText}<br>
                ${creditLimitText}
            </div>
        </div>
        ${client.currency && client.currency !== 'SYP' ?
            `<div class="mt-2"><span class="badge bg-info">العملة الافتراضية: ${getCurrencyName(client.currency)} (${getCurrencySymbol(client.currency)})</span></div>` :
            ''
        }
    `;

    console.log(`✅ تم تحديث معلومات ${invoiceType === 'sale' ? 'العميل' : 'المورد'}:`, client.name);
}

/**
 * تهيئة صفحة إنشاء الفاتورة
 */
function initializeCreateInvoicePage() {
    console.log('🚀 تهيئة صفحة إنشاء الفاتورة...');

    // تعيين التاريخ الحالي
    const today = getCurrentDateForInput();
    const invoiceDateInput = document.getElementById('invoiceDate');
    if (invoiceDateInput) {
        invoiceDateInput.value = today;
        console.log('📅 تم تعيين التاريخ الحالي:', today);
    } else {
        console.warn('⚠️ حقل تاريخ الفاتورة غير موجود');
    }

    // تعيين تاريخ الاستحقاق (بعد 30 يوم)
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30);
    const dueDateInput = document.getElementById('dueDate');
    if (dueDateInput) {
        const dueDateFormatted = formatDateForDB(dueDate);
        dueDateInput.value = dueDateFormatted;
        console.log('📅 تم تعيين تاريخ الاستحقاق:', dueDateFormatted);
    }

    // تعيين نسبة الضريبة الافتراضية
    const taxPercentageInput = document.getElementById('taxPercentage');
    if (taxPercentageInput && appData.settings.taxRate) {
        taxPercentageInput.value = appData.settings.taxRate;
        console.log('💰 تم تعيين نسبة الضريبة الافتراضية:', appData.settings.taxRate);
    }

    // إضافة عنصر واحد افتراضي
    setTimeout(() => {
        console.log('➕ إضافة عنصر افتراضي...');
        addInvoiceItem();
        console.log('✅ تم تهيئة صفحة إنشاء الفاتورة بنجاح');
    }, 200);
}

/**
 * اختبار حفظ الفواتير
 */
function testInvoiceSave() {
    console.log('🧪 اختبار حفظ الفواتير...');

    // التحقق من وجود العناصر المطلوبة
    const requiredElements = [
        'invoiceType',
        'clientSelect',
        'invoiceDate',
        'invoiceItemsTable'
    ];

    const missingElements = [];
    requiredElements.forEach(id => {
        const element = document.getElementById(id);
        if (!element) {
            missingElements.push(id);
        } else {
            console.log(`✅ ${id}: موجود`);
        }
    });

    if (missingElements.length > 0) {
        console.error('❌ عناصر مفقودة:', missingElements);
        alert(`عناصر مفقودة في النموذج: ${missingElements.join(', ')}`);
        return false;
    }

    // التحقق من وجود بيانات اختبار
    if (!appData.customers || appData.customers.length === 0) {
        console.warn('⚠️ لا توجد عملاء');
        if (confirm('لا توجد عملاء. هل تريد إضافة بيانات تجريبية؟')) {
            createSampleData();
            return true;
        }
        return false;
    }

    if (!appData.products || appData.products.length === 0) {
        console.warn('⚠️ لا توجد أصناف');
        if (confirm('لا توجد أصناف. هل تريد إضافة بيانات تجريبية؟')) {
            createSampleData();
            return true;
        }
        return false;
    }

    console.log('✅ جميع العناصر المطلوبة موجودة');
    console.log('✅ البيانات الأساسية متوفرة');
    console.log('🎉 النظام جاهز لحفظ الفواتير');

    return true;
}

/**
 * إنشاء بيانات تجريبية
 */
function createSampleData() {
    console.log('🔧 إنشاء بيانات تجريبية...');

    // إضافة عملاء تجريبيين
    if (!appData.customers || appData.customers.length === 0) {
        appData.customers = [
            {
                id: 1,
                name: 'أحمد محمد',
                phone: '0991234567',
                email: 'ahmed@example.com',
                address: 'دمشق - المزة',
                taxNumber: '123456789',
                creditLimit: 10000,
                currency: appData.settings.currency || 'SYP',
                currentBalance: 0,
                createdAt: new Date().toISOString().split('T')[0]
            },
            {
                id: 2,
                name: 'فاطمة علي',
                phone: '0992345678',
                email: 'fatima@example.com',
                address: 'حلب - الشهباء',
                taxNumber: '987654321',
                creditLimit: 15000,
                currency: appData.settings.currency || 'SYP',
                currentBalance: 0,
                createdAt: new Date().toISOString().split('T')[0]
            }
        ];
        console.log('✅ تم إضافة عملاء تجريبيين');
    }

    // إضافة موردين تجريبيين
    if (!appData.suppliers || appData.suppliers.length === 0) {
        appData.suppliers = [
            {
                id: 1,
                name: 'شركة التوريدات المتقدمة',
                phone: '0113456789',
                email: 'supplies@example.com',
                address: 'دمشق - التجارة',
                taxNumber: '555666777',
                currency: appData.settings.currency || 'SYP',
                currentBalance: 0,
                createdAt: new Date().toISOString().split('T')[0]
            }
        ];
        console.log('✅ تم إضافة موردين تجريبيين');
    }

    // إضافة أصناف تجريبية
    if (!appData.products || appData.products.length === 0) {
        appData.products = [
            {
                id: 1,
                name: 'لابتوب ديل',
                code: 'DELL001',
                category: 'إلكترونيات',
                unit: 'قطعة',
                purchasePrice: 800,
                sellingPrice: 1000,
                quantity: 10,
                minQuantity: 2,
                warehouseId: 1,
                createdAt: new Date().toISOString().split('T')[0]
            },
            {
                id: 2,
                name: 'ماوس لاسلكي',
                code: 'MOUSE001',
                category: 'إكسسوارات',
                unit: 'قطعة',
                purchasePrice: 15,
                sellingPrice: 25,
                quantity: 50,
                minQuantity: 10,
                warehouseId: 1,
                createdAt: new Date().toISOString().split('T')[0]
            },
            {
                id: 3,
                name: 'كيبورد ميكانيكي',
                code: 'KB001',
                category: 'إكسسوارات',
                unit: 'قطعة',
                purchasePrice: 40,
                sellingPrice: 60,
                quantity: 25,
                minQuantity: 5,
                warehouseId: 1,
                createdAt: new Date().toISOString().split('T')[0]
            }
        ];
        console.log('✅ تم إضافة أصناف تجريبية');
    }

    // حفظ البيانات
    saveData();
    console.log('✅ تم حفظ البيانات التجريبية');

    alert('تم إنشاء البيانات التجريبية بنجاح!\n\n- 2 عميل\n- 1 مورد\n- 3 أصناف\n\nيمكنك الآن إنشاء الفواتير.');

    // إعادة تحميل الصفحة لتطبيق البيانات الجديدة
    showPage('create-invoice');
}

/**
 * اختبار سريع لحفظ الفواتير
 */
function quickTest() {
    console.log('🚀 اختبار سريع لحفظ الفواتير...');

    // إنشاء البيانات إذا لم توجد
    if (!appData.customers || appData.customers.length === 0 || !appData.products || appData.products.length === 0) {
        createSampleData();
        setTimeout(() => {
            performQuickTest();
        }, 500);
    } else {
        performQuickTest();
    }
}

/**
 * تنفيذ الاختبار السريع
 */
function performQuickTest() {
    console.log('⚡ تنفيذ الاختبار السريع...');

    // ملء النموذج تلقائياً
    fillFormAutomatically();

    // انتظار قليل ثم محاولة الحفظ
    setTimeout(() => {
        console.log('💾 محاولة حفظ الفاتورة...');

        if (confirm('هل تريد حفظ فاتورة تجريبية الآن؟')) {
            const result = saveInvoiceSimple('confirmed');

            if (result) {
                console.log('🎉 نجح الاختبار السريع!');
                alert('🎉 نجح الاختبار السريع!\n\nتم حفظ الفاتورة بنجاح. النظام يعمل بشكل مثالي!');
            } else {
                console.log('❌ فشل الاختبار السريع');
                alert('❌ فشل الاختبار السريع\n\nيرجى التحقق من البيانات والمحاولة مرة أخرى.');
            }
        }
    }, 1000);
}

/**
 * مسح فلاتر العملاء
 */
function clearCustomersFilter() {
    const searchInput = document.getElementById('customerSearch');
    const typeFilter = document.getElementById('customerTypeFilter');
    const cityFilter = document.getElementById('customerCityFilter');

    if (searchInput) searchInput.value = '';
    if (typeFilter) typeFilter.value = '';
    if (cityFilter) cityFilter.value = '';

    // عرض جميع العملاء
    updateCustomersTable(appData.customers);
}

/**
 * تحديث جدول العملاء
 */
function updateCustomersTable(customers) {
    const tableContainer = document.querySelector('#customersTable tbody') ||
                          document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (customers.length > 0) {
        tableContainer.innerHTML = customers.map(customer => `
            <tr>
                <td><strong>${customer.name}</strong></td>
                <td>${customer.phone}</td>
                <td>${customer.email || 'غير محدد'}</td>
                <td>${formatCurrency(customer.balance || 0)}</td>
                <td>${formatCurrency(customer.creditLimit || 0)}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary" onclick="editCustomer(${customer.id})" title="تعديل">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteCustomer(${customer.id})" title="حذف">
                        <i class="fas fa-trash"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-info" onclick="showPage('customer-statement')" title="كشف حساب">
                        <i class="fas fa-file-alt"></i>
                    </button>
                </td>
            </tr>
        `).join('');
    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-muted py-4">
                    <i class="fas fa-users fa-3x mb-3"></i>
                    <h5>لا توجد عملاء تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearCustomersFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * عرض صفحة معينة
 */
function showPage(pageName) {
    console.log('🔄 تحميل الصفحة:', pageName);

    // إخفاء أو إظهار شريط التنقل حسب الصفحة
    const navbar = document.querySelector('nav.navbar');
    if (navbar) {
        if (pageName === 'login') {
            navbar.style.display = 'none';
        } else {
            navbar.style.display = 'block';
        }
    }

    // التحقق من تسجيل الدخول (ما عدا صفحة تسجيل الدخول)
    if (pageName !== 'login') {
        if (!checkLogin()) {
            console.log('🔒 فشل التحقق من تسجيل الدخول، إعادة توجيه لصفحة تسجيل الدخول');
            return;
        }

        // التحقق من الصلاحيات للصفحات المحمية
        if (!checkPagePermission(pageName)) {
            console.log('🔒 ليس لديك صلاحية للوصول لهذه الصفحة:', pageName);
            alert('ليس لديك صلاحية للوصول لهذه الصفحة');
            showPage('dashboard'); // إعادة توجيه للوحة التحكم
            return;
        }
    }

    const mainContent = document.getElementById('main-content');

    switch(pageName) {
        case 'dashboard':
            mainContent.innerHTML = getDashboardHTML();
            break;
        case 'customers':
            mainContent.innerHTML = getCustomersHTML();
            break;
        case 'add-customer':
            mainContent.innerHTML = getAddCustomerHTML();
            break;
        case 'suppliers':
            mainContent.innerHTML = getSuppliersHTML();
            break;
        case 'products':
            mainContent.innerHTML = getProductsHTML();
            break;
        case 'create-invoice':
            mainContent.innerHTML = getCreateInvoiceHTML();
            setTimeout(() => {
                initializeCreateInvoicePage();
            }, 100);
            break;
        case 'create-custom-invoice':
            mainContent.innerHTML = getCreateCustomInvoiceHTML();
            setTimeout(() => {
                initializeCreateCustomInvoicePage();
            }, 100);
            break;
        case 'customer-supplier-balances':
            mainContent.innerHTML = getCustomerSupplierBalancesHTML();
            setTimeout(() => {
                initializeCustomerSupplierBalancesPage();
            }, 100);
            break;
        case 'usd-balances-report':
            mainContent.innerHTML = getUSDBalancesReportHTML();
            setTimeout(() => {
                initializeUSDBalancesReport();
            }, 100);
            break;
        case 'backup':
            mainContent.innerHTML = getBackupRestoreHTML();
            setTimeout(() => {
                initializeBackupRestorePage();
            }, 100);
            break;
        case 'add-supplier':
            mainContent.innerHTML = getAddSupplierHTML();
            break;
        case 'warehouses':
            mainContent.innerHTML = getWarehousesHTML();
            break;
        case 'inventory':
            mainContent.innerHTML = getInventoryHTML();
            break;
        case 'inventory-details':
            mainContent.innerHTML = getInventoryDetailsHTML();
            break;
        case 'sales-invoices':
            mainContent.innerHTML = getSalesInvoicesHTML();
            break;
        case 'purchase-invoices':
            mainContent.innerHTML = getPurchaseInvoicesHTML();
            break;
        case 'receipts':
            mainContent.innerHTML = getReceiptsHTML();
            break;
        case 'payments':
            mainContent.innerHTML = getPaymentsHTML();
            break;
        case 'journal':
            mainContent.innerHTML = getJournalHTML();
            // تحديث دفتر اليومية عند تحميل الصفحة
            setTimeout(() => updateJournalTable(appData.journalEntries || []), 100);
            break;
        case 'customer-statement':
            mainContent.innerHTML = getCustomerStatementHTML();
            break;
        case 'sales-report':
            mainContent.innerHTML = getSalesReportHTML();
            break;
        case 'purchase-report':
            mainContent.innerHTML = getPurchaseReportHTML();
            break;
        case 'currency-balances':
            mainContent.innerHTML = getCurrencyBalancesHTML();
            // تحديث الأرصدة عند تحميل الصفحة مع تأخير بسيط للتأكد من تحميل العناصر
            setTimeout(() => {
                console.log('🔄 تحميل صفحة الأرصدة الإجمالية...');
                updateCurrencyBalancesTable();
                console.log('✅ تم تحميل صفحة الأرصدة الإجمالية');
            }, 200);
            break;
        case 'customer-payments-report':
            mainContent.innerHTML = getCustomerPaymentsReportHTML();
            break;
        case 'supplier-payments-report':
            mainContent.innerHTML = getSupplierPaymentsReportHTML();
            break;
        case 'supplier-statement':
            mainContent.innerHTML = getSupplierStatementHTML();
            break;
        case 'add-product':
            mainContent.innerHTML = getAddProductHTML();
            break;
        case 'settings':
            mainContent.innerHTML = getSettingsHTML();
            break;
        case 'login':
            mainContent.innerHTML = getLoginHTML();
            break;
        case 'backup':
            mainContent.innerHTML = getBackupHTML();
            break;
        case 'users':
            mainContent.innerHTML = getUsersHTML();
            // تحديث جدول المستخدمين عند تحميل الصفحة
            setTimeout(() => refreshUsers(), 100);
            break;
        default:
            mainContent.innerHTML = getComingSoonHTML(pageName);
    }
    
    // إعادة تهيئة الأحداث
    initializePageEvents();
}

/**
 * لوحة التحكم
 */
function getDashboardHTML() {
    console.log('🏠 تحميل لوحة التحكم...');

    const stats = calculateStats();

    // الحصول على المنتجات منخفضة المخزون بدقة محسنة
    const lowStockProducts = appData.products.filter(product => {
        const quantity = parseFloat(product.quantity) || 0;
        const minQuantity = parseFloat(product.minQuantity) || 0;
        const isActive = product.isActive !== false;

        // التأكد من أن الحد الأدنى محدد ومنطقي
        const validMinQuantity = minQuantity > 0 ? minQuantity : 1;

        return isActive && quantity <= validMinQuantity;
    }).sort((a, b) => {
        // ترتيب حسب مستوى الخطورة (الأقل كمية أولاً)
        const aQuantity = parseFloat(a.quantity) || 0;
        const bQuantity = parseFloat(b.quantity) || 0;
        return aQuantity - bQuantity;
    }).slice(0, 10); // عرض أول 10 منتجات فقط
    
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-tachometer-alt me-2"></i>
                    لوحة التحكم
                </h1>
            </div>
        </div>

        <!-- إحصائيات سريعة -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-right-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">العملاء</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${stats.customersCount}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-right-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">الموردين</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${stats.suppliersCount}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-truck fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-right-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">الأصناف</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${stats.productsCount}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-boxes fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-right-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">الفواتير</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${stats.invoicesCount}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-file-invoice fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات مالية -->
        <div class="row mb-4">
            <div class="col-xl-4 col-md-6 mb-4">
                <div class="card border-right-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">إجمالي المبيعات</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${formatCurrency(stats.totalSales)}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-4 col-md-6 mb-4">
                <div class="card border-right-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">المدفوعات المعلقة</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${formatCurrency(stats.pendingPayments)}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-clock fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-4 col-md-6 mb-4">
                <div class="card border-right-danger shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">منتجات منخفضة المخزون</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">${lowStockProducts.length}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- آخر الفواتير -->
            <div class="col-lg-8 mb-4">
                <div class="card shadow">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <h6 class="m-0 font-weight-bold text-primary">آخر الفواتير</h6>
                        <button class="btn btn-sm btn-primary" onclick="showPage('sales-invoices')">عرض الكل</button>
                    </div>
                    <div class="card-body">
                        ${getRecentInvoicesTable()}
                    </div>
                </div>
            </div>

            <!-- المنتجات منخفضة المخزون -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            منتجات منخفضة المخزون
                            <span class="badge bg-warning">${lowStockProducts.length}</span>
                        </h6>
                    </div>
                    <div class="card-body">
                        ${getLowStockProductsList(lowStockProducts)}
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * حساب الإحصائيات
 */
function calculateStats() {
    console.log('📊 حساب إحصائيات لوحة التحكم...');

    // التأكد من وجود البيانات الأساسية
    if (!appData.customers) appData.customers = [];
    if (!appData.suppliers) appData.suppliers = [];
    if (!appData.products) appData.products = [];
    if (!appData.invoices) appData.invoices = [];
    if (!appData.payments) appData.payments = [];

    // حساب إحصائيات الفواتير
    const salesInvoices = appData.invoices.filter(inv => inv.invoiceType === 'sale' && inv.status === 'confirmed');
    const purchaseInvoices = appData.invoices.filter(inv => inv.invoiceType === 'purchase' && inv.status === 'confirmed');

    const totalSales = salesInvoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
    const totalPurchases = purchaseInvoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
    const pendingPayments = appData.invoices.reduce((sum, inv) => sum + (inv.remainingAmount || 0), 0);

    // حساب المنتجات منخفضة المخزون بدقة محسنة
    const lowStockProducts = appData.products.filter(product => {
        // التحقق من صحة البيانات وتنظيفها
        const quantity = parseFloat(product.quantity) || 0;
        const minQuantity = parseFloat(product.minQuantity) || 0;
        const isActive = product.isActive !== false; // افتراضي true إذا لم يكن محدد

        // التأكد من أن الحد الأدنى محدد ومنطقي
        const validMinQuantity = minQuantity > 0 ? minQuantity : 1; // افتراضي 1 إذا لم يكن محدد

        // المنتج منخفض المخزون إذا كانت الكمية أقل من أو تساوي الحد الأدنى
        const isLowStock = quantity <= validMinQuantity;

        // تسجيل تفاصيل للمراقبة
        if (isLowStock && isActive) {
            console.log(`⚠️ منتج منخفض المخزون: ${product.name} - الكمية: ${quantity}, الحد الأدنى: ${validMinQuantity}`);
        }

        return isActive && isLowStock;
    });

    // حساب المنتجات نفد مخزونها
    const outOfStockProducts = appData.products.filter(product => {
        const quantity = parseFloat(product.quantity) || 0;
        const isActive = product.isActive !== false;
        return isActive && quantity === 0;
    });

    // حساب إجمالي قيمة المخزون
    const totalInventoryValue = appData.products.reduce((sum, product) => {
        const quantity = parseFloat(product.quantity) || 0;
        const costPrice = parseFloat(product.costPrice) || 0;
        return sum + (quantity * costPrice);
    }, 0);

    // حساب أرصدة العملاء والموردين
    const totalCustomerBalance = appData.customers.reduce((sum, customer) => {
        return sum + (parseFloat(customer.currentBalance) || 0);
    }, 0);

    const totalSupplierBalance = appData.suppliers.reduce((sum, supplier) => {
        return sum + (parseFloat(supplier.currentBalance) || 0);
    }, 0);

    const stats = {
        customersCount: appData.customers.filter(c => c.isActive !== false).length,
        suppliersCount: appData.suppliers.filter(s => s.isActive !== false).length,
        productsCount: appData.products.filter(p => p.isActive !== false).length,
        warehousesCount: appData.warehouses ? appData.warehouses.filter(w => w.isActive !== false).length : 0,
        invoicesCount: appData.invoices.length,
        totalSales: totalSales,
        totalPurchases: totalPurchases,
        pendingPayments: pendingPayments,
        lowStockProductsCount: lowStockProducts.length,
        outOfStockProductsCount: outOfStockProducts.length,
        totalInventoryValue: totalInventoryValue,
        totalCustomerBalance: totalCustomerBalance,
        totalSupplierBalance: totalSupplierBalance,
        // إضافة تفاصيل إضافية للمراقبة
        activeProductsCount: appData.products.filter(p => p.isActive !== false).length,
        totalProductsCount: appData.products.length
    };

    // التحقق من دقة كميات المنتجات وتحديثها إذا لزم الأمر
    validateAndUpdateProductQuantities();

    console.log('✅ تم حساب الإحصائيات:', {
        'المنتجات منخفضة المخزون': stats.lowStockProductsCount,
        'المنتجات نفد مخزونها': stats.outOfStockProductsCount,
        'إجمالي المنتجات النشطة': stats.activeProductsCount,
        'إجمالي قيمة المخزون': stats.totalInventoryValue
    });

    return stats;
}

/**
 * التحقق من دقة كميات المنتجات وتحديثها بناءً على حركات المخزون - محسن ودقيق
 */
function validateAndUpdateProductQuantities() {
    console.log('🔍 التحقق من دقة كميات المنتجات...');

    if (!appData.products || !appData.inventoryMovements) {
        console.log('⚠️ البيانات الأساسية غير متوفرة');
        return { updated: 0, errors: 0, total: 0 };
    }

    let updatedCount = 0;
    let errorCount = 0;

    appData.products.forEach(product => {
        try {
            // حساب الكمية الفعلية من حركات المخزون مع معالجة شاملة
            const productMovements = appData.inventoryMovements.filter(m =>
                m.productId === product.id &&
                m.warehouseId === product.warehouseId &&
                m.isDeleted !== true
            );

            let calculatedQuantity = 0;
            let totalIn = 0;
            let totalOut = 0;

            productMovements.forEach(movement => {
                const quantity = parseFloat(movement.quantity) || 0;

                // معالجة شاملة لجميع أنواع الحركات
                switch (movement.movementType) {
                    case 'in':
                    case 'purchase':
                    case 'return_sale':
                    case 'transfer_in':
                        totalIn += Math.abs(quantity);
                        calculatedQuantity += Math.abs(quantity);
                        break;

                    case 'out':
                    case 'sale':
                    case 'return_purchase':
                    case 'transfer_out':
                        totalOut += Math.abs(quantity);
                        calculatedQuantity -= Math.abs(quantity);
                        break;

                    case 'adjustment':
                        // التسوية يمكن أن تكون موجبة أو سالبة
                        if (quantity >= 0) {
                            totalIn += quantity;
                            calculatedQuantity += quantity;
                        } else {
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity); // طرح الكمية السالبة
                        }
                        break;

                    case 'transfer':
                        // التحويل بين المخازن
                        if (movement.warehouseId === product.warehouseId) {
                            // إخراج من المخزن الحالي
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                        } else if (movement.toWarehouseId === product.warehouseId) {
                            // إدخال للمخزن الحالي
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                        }
                        break;

                    default:
                        console.warn(`⚠️ نوع حركة غير معروف: ${movement.movementType} للمنتج ${product.name}`);
                }
            });

            // التأكد من عدم وجود كميات سالبة
            calculatedQuantity = Math.max(0, calculatedQuantity);

            // مقارنة الكمية المحسوبة مع الكمية المسجلة
            const currentQuantity = parseFloat(product.quantity) || 0;
            const difference = Math.abs(calculatedQuantity - currentQuantity);

            if (difference > 0.001) { // تحمل خطأ صغير للأرقام العشرية
                console.log(`📊 تحديث كمية المنتج ${product.name}:`, {
                    'الكمية الحالية': currentQuantity,
                    'الكمية المحسوبة': calculatedQuantity,
                    'إجمالي الإدخالات': totalIn,
                    'إجمالي الإخراجات': totalOut,
                    'عدد الحركات': productMovements.length
                });

                product.quantity = calculatedQuantity;
                product.lastQuantityUpdate = new Date().toISOString();
                updatedCount++;
            }

        } catch (error) {
            console.error(`❌ خطأ في حساب كمية المنتج ${product.name}:`, error);
            errorCount++;
        }
    });

    if (updatedCount > 0 || errorCount > 0) {
        if (updatedCount > 0) {
            saveData();
            console.log(`✅ تم تحديث ${updatedCount} منتج بنجاح`);
        }
        if (errorCount > 0) {
            console.warn(`⚠️ حدثت أخطاء في ${errorCount} منتج`);
        }
    } else {
        console.log('✅ جميع كميات المنتجات صحيحة');
    }

    return {
        updated: updatedCount,
        errors: errorCount,
        total: appData.products.length
    };
}

/**
 * إعادة حساب وتصحيح جميع كميات الأصناف - وظيفة شاملة
 */
function recalculateAllProductQuantities() {
    console.log('🔄 إعادة حساب جميع كميات الأصناف...');

    if (!appData.products || !appData.inventoryMovements) {
        console.log('⚠️ البيانات الأساسية غير متوفرة');
        showErrorToast('البيانات الأساسية غير متوفرة');
        return;
    }

    let correctedCount = 0;
    let errorCount = 0;
    const corrections = [];

    try {
        appData.products.forEach(product => {
            try {
                // حساب الكمية الفعلية من حركات المخزون
                const productMovements = appData.inventoryMovements.filter(m =>
                    m.productId === product.id &&
                    m.warehouseId === product.warehouseId &&
                    m.isDeleted !== true
                );

                let calculatedQuantity = 0;
                let totalIn = 0;
                let totalOut = 0;

                productMovements.forEach(movement => {
                    const quantity = parseFloat(movement.quantity) || 0;

                    switch (movement.movementType) {
                        case 'in':
                        case 'purchase':
                        case 'return_sale':
                        case 'transfer_in':
                            totalIn += Math.abs(quantity);
                            calculatedQuantity += Math.abs(quantity);
                            break;

                        case 'out':
                        case 'sale':
                        case 'return_purchase':
                        case 'transfer_out':
                        case 'damage':
                            totalOut += Math.abs(quantity);
                            calculatedQuantity -= Math.abs(quantity);
                            break;

                        case 'adjustment':
                            if (quantity >= 0) {
                                totalIn += quantity;
                                calculatedQuantity += quantity;
                            } else {
                                totalOut += Math.abs(quantity);
                                calculatedQuantity -= Math.abs(quantity);
                            }
                            break;

                        case 'transfer':
                            if (movement.warehouseId === product.warehouseId) {
                                totalOut += Math.abs(quantity);
                                calculatedQuantity -= Math.abs(quantity);
                            } else if (movement.toWarehouseId === product.warehouseId) {
                                totalIn += Math.abs(quantity);
                                calculatedQuantity += Math.abs(quantity);
                            }
                            break;
                    }
                });

                // التأكد من عدم وجود كميات سالبة
                calculatedQuantity = Math.max(0, calculatedQuantity);

                const currentQuantity = parseFloat(product.quantity) || 0;
                const difference = Math.abs(calculatedQuantity - currentQuantity);

                if (difference > 0.001) {
                    corrections.push({
                        productName: product.name,
                        productCode: product.code,
                        oldQuantity: currentQuantity,
                        newQuantity: calculatedQuantity,
                        difference: calculatedQuantity - currentQuantity,
                        totalIn: totalIn,
                        totalOut: totalOut,
                        movementsCount: productMovements.length
                    });

                    product.quantity = calculatedQuantity;
                    product.lastQuantityUpdate = new Date().toISOString();
                    correctedCount++;
                }

            } catch (error) {
                console.error(`❌ خطأ في حساب كمية المنتج ${product.name}:`, error);
                errorCount++;
            }
        });

        // حفظ البيانات إذا تم التصحيح
        if (correctedCount > 0) {
            saveData();
            console.log(`✅ تم تصحيح ${correctedCount} منتج`);

            // إظهار تقرير التصحيحات
            showQuantityCorrectionsReport(corrections);

            // تحديث العرض
            if (typeof updateProductsDisplay === 'function') {
                updateProductsDisplay();
            }

            showSuccessToast(`تم تصحيح كميات ${correctedCount} منتج بنجاح`);
        } else {
            console.log('✅ جميع الكميات صحيحة - لا حاجة للتصحيح');
            showInfoToast('جميع كميات الأصناف صحيحة');
        }

        if (errorCount > 0) {
            console.warn(`⚠️ حدثت أخطاء في ${errorCount} منتج`);
            showWarningToast(`حدثت أخطاء في ${errorCount} منتج`);
        }

    } catch (error) {
        console.error('❌ خطأ عام في إعادة حساب الكميات:', error);
        showErrorToast('حدث خطأ في إعادة حساب الكميات: ' + error.message);
    }

    return {
        corrected: correctedCount,
        errors: errorCount,
        total: appData.products.length,
        corrections: corrections
    };
}

/**
 * عرض تقرير تصحيحات الكميات
 */
function showQuantityCorrectionsReport(corrections) {
    if (!corrections || corrections.length === 0) return;

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'quantityCorrectionsModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-check-circle me-2"></i>
                        تقرير تصحيح الكميات
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-success">
                        <i class="fas fa-info-circle me-2"></i>
                        تم تصحيح كميات <strong>${corrections.length}</strong> منتج بناءً على حركات المخزون
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>الصنف</th>
                                    <th>الكود</th>
                                    <th>الكمية السابقة</th>
                                    <th>الكمية المصححة</th>
                                    <th>الفرق</th>
                                    <th>إجمالي الإدخالات</th>
                                    <th>إجمالي الإخراجات</th>
                                    <th>عدد الحركات</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${corrections.map(correction => `
                                    <tr>
                                        <td><strong>${correction.productName}</strong></td>
                                        <td>${correction.productCode}</td>
                                        <td class="text-center">
                                            <span class="badge bg-secondary">${correction.oldQuantity}</span>
                                        </td>
                                        <td class="text-center">
                                            <span class="badge bg-success">${correction.newQuantity}</span>
                                        </td>
                                        <td class="text-center">
                                            <span class="badge bg-${correction.difference > 0 ? 'primary' : 'warning'}">
                                                ${correction.difference > 0 ? '+' : ''}${correction.difference.toFixed(2)}
                                            </span>
                                        </td>
                                        <td class="text-center text-success">+${correction.totalIn}</td>
                                        <td class="text-center text-danger">-${correction.totalOut}</td>
                                        <td class="text-center">
                                            <span class="badge bg-info">${correction.movementsCount}</span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">إجمالي التصحيحات</h6>
                                    <h4 class="text-success">${corrections.length}</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">زيادات</h6>
                                    <h4 class="text-primary">${corrections.filter(c => c.difference > 0).length}</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">نقصان</h6>
                                    <h4 class="text-warning">${corrections.filter(c => c.difference < 0).length}</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-success" onclick="exportCorrectionsToExcel(${JSON.stringify(corrections).replace(/"/g, '&quot;')})">
                        <i class="fas fa-file-excel me-2"></i>
                        تصدير Excel
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * جدول آخر الفواتير
 */
function getRecentInvoicesTable() {
    if (appData.invoices.length === 0) {
        return '<p class="text-center text-muted">لا توجد فواتير حتى الآن</p>';
    }

    const recentInvoices = appData.invoices.slice(-5).reverse();

    let html = `
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>رقم الفاتورة</th>
                        <th>النوع</th>
                        <th>العميل/المورد</th>
                        <th>المبلغ</th>
                        <th>التاريخ</th>
                        <th>الحالة</th>
                    </tr>
                </thead>
                <tbody>
    `;

    recentInvoices.forEach(invoice => {
        const customer = appData.customers.find(c => c.id === invoice.customerId);
        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
        const clientName = customer ? customer.name : (supplier ? supplier.name : '-');

        html += `
            <tr>
                <td>${invoice.invoiceNumber}</td>
                <td>
                    <span class="badge bg-${invoice.invoiceType === 'sale' ? 'success' : 'info'}">
                        ${invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'}
                    </span>
                </td>
                <td>${clientName}</td>
                <td>${formatCurrency(invoice.totalAmount)}</td>
                <td>${invoice.invoiceDate}</td>
                <td>
                    <span class="badge bg-${getStatusColor(invoice.status)}">
                        ${getStatusText(invoice.status)}
                    </span>
                </td>
            </tr>
        `;
    });

    html += `
                </tbody>
            </table>
        </div>
    `;

    return html;
}

/**
 * قائمة المنتجات منخفضة المخزون المحسنة
 */
function getLowStockProductsList(products) {
    console.log('📦 عرض قائمة المنتجات منخفضة المخزون:', products.length);

    if (products.length === 0) {
        return `
            <div class="text-center text-success py-4">
                <i class="fas fa-check-circle fa-3x mb-3"></i>
                <h6>جميع المنتجات في مستوى آمن</h6>
                <small class="text-muted">لا توجد منتجات تحتاج إلى إعادة تموين</small>
            </div>
        `;
    }

    // ترتيب المنتجات حسب مستوى الخطورة (الأقل كمية أولاً)
    const sortedProducts = products.sort((a, b) => {
        const aQuantity = parseFloat(a.quantity) || 0;
        const bQuantity = parseFloat(b.quantity) || 0;
        return aQuantity - bQuantity;
    });

    let html = '';
    sortedProducts.forEach((product, index) => {
        const quantity = parseFloat(product.quantity) || 0;
        const minQuantity = parseFloat(product.minQuantity) || 0;
        const warehouse = appData.warehouses.find(w => w.id === product.warehouseId);

        // تحديد مستوى الخطورة
        let alertLevel = 'danger';
        let alertIcon = 'fas fa-exclamation-triangle';
        let alertText = 'نفد المخزون';

        if (quantity > 0) {
            if (quantity <= minQuantity * 0.5) {
                alertLevel = 'danger';
                alertIcon = 'fas fa-exclamation-triangle';
                alertText = 'مخزون منخفض جداً';
            } else {
                alertLevel = 'warning';
                alertIcon = 'fas fa-exclamation-circle';
                alertText = 'مخزون منخفض';
            }
        }

        html += `
            <div class="d-flex align-items-center border-bottom py-2 ${index < 3 ? 'bg-light' : ''}"
                 onclick="showProductDetails(${product.id})" style="cursor: pointer;">
                <div class="me-2">
                    <i class="${alertIcon} text-${alertLevel}" title="${alertText}"></i>
                </div>
                <div class="flex-grow-1">
                    <div class="fw-bold">${product.name}</div>
                    <small class="text-muted">
                        ${product.code} | ${warehouse ? warehouse.name : 'مخزن غير محدد'}
                    </small>
                    <div class="mt-1">
                        <small class="text-muted">
                            الحد الأدنى: ${minQuantity} ${product.unit || 'قطعة'}
                        </small>
                    </div>
                </div>
                <div class="text-end">
                    <div>
                        <span class="badge bg-${alertLevel} mb-1">
                            ${quantity} ${product.unit || 'قطعة'}
                        </span>
                    </div>
                    <div>
                        <small class="text-muted">
                            ${quantity === 0 ? 'نفد المخزون' :
                              quantity <= minQuantity * 0.5 ? 'حرج جداً' : 'يحتاج تموين'}
                        </small>
                    </div>
                </div>
            </div>
        `;
    });

    // إضافة زر لعرض جميع المنتجات منخفضة المخزون
    html += `
        <div class="text-center mt-3">
            <button class="btn btn-outline-warning btn-sm" onclick="showAllLowStockProducts()">
                <i class="fas fa-list me-2"></i>
                عرض جميع المنتجات منخفضة المخزون (${products.length})
            </button>
        </div>
    `;

    return html;
}

/**
 * عرض تفاصيل منتج معين
 */
function showProductDetails(productId) {
    console.log(`📦 عرض تفاصيل المنتج ID: ${productId}`);

    const product = appData.products.find(p => p.id === productId);
    if (!product) {
        alert('المنتج غير موجود');
        return;
    }

    // الانتقال إلى صفحة الأصناف مع تمييز المنتج المحدد
    showPage('products');

    // تمييز المنتج في الجدول بعد تحميل الصفحة
    setTimeout(() => {
        const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
        if (productRow) {
            productRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
            productRow.classList.add('table-warning');
            setTimeout(() => {
                productRow.classList.remove('table-warning');
            }, 3000);
        }
    }, 500);
}

/**
 * عرض جميع المنتجات منخفضة المخزون
 */
function showAllLowStockProducts() {
    console.log('📦 عرض جميع المنتجات منخفضة المخزون');

    // الانتقال إلى صفحة الأصناف مع تطبيق فلتر المخزون المنخفض
    showPage('products');

    // تطبيق فلتر المخزون المنخفض بعد تحميل الصفحة
    setTimeout(() => {
        const stockFilter = document.getElementById('productStockFilter');
        if (stockFilter) {
            stockFilter.value = 'low';
            applyProductsFilter();
        }
    }, 500);
}

/**
 * صفحة العملاء
 */
function getCustomersHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-users me-2"></i>
                        قائمة العملاء
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showPage('add-customer')">
                            <i class="fas fa-plus me-2"></i>
                            إضافة عميل جديد
                        </button>
                        <button class="btn btn-outline-success" onclick="exportCustomersToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printContent('customers', 'قائمة العملاء')">
                            <i class="fas fa-print me-2"></i>
                            طباعة القائمة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">البحث</label>
                        <input type="text" class="form-control" id="customerSearch" placeholder="البحث باسم العميل أو رقم الهاتف..." onkeyup="applyCustomersFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">نوع العميل</label>
                        <select class="form-select" id="customerTypeFilter" onchange="applyCustomersFilter()">
                            <option value="">جميع الأنواع</option>
                            <option value="individual">فرد</option>
                            <option value="company">شركة</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">المدينة</label>
                        <select class="form-select" id="customerCityFilter" onchange="applyCustomersFilter()">
                            <option value="">جميع المدن</option>
                            ${[...new Set(appData.customers.map(c => c.city).filter(city => city))].map(city =>
                                `<option value="${city}">${city}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <div>
                            <button class="btn btn-outline-primary" onclick="applyCustomersFilter()">
                                <i class="fas fa-search me-2"></i>
                                بحث
                            </button>
                            <button class="btn btn-outline-secondary ms-2" onclick="clearCustomersFilter()">
                                <i class="fas fa-times me-2"></i>
                                مسح
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول العملاء -->
        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="customersTable">
                        <thead class="table-light">
                            <tr>
                                <th>الاسم</th>
                                <th>الهاتف</th>
                                <th>البريد الإلكتروني</th>
                                <th>الرصيد الحالي</th>
                                <th>حد الائتمان</th>
                                <th>تاريخ الإنشاء</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${getCustomersTableRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفوف جدول العملاء
 */
function getCustomersTableRows() {
    if (appData.customers.length === 0) {
        return '<tr><td colspan="7" class="text-center text-muted">لا توجد عملاء</td></tr>';
    }

    let html = '';
    appData.customers.forEach(customer => {
        html += `
            <tr>
                <td>
                    <strong>${customer.name}</strong>
                    ${customer.taxNumber ? `<br><small class="text-muted">الرقم الضريبي: ${customer.taxNumber}</small>` : ''}
                </td>
                <td>${customer.phone || '-'}</td>
                <td>${customer.email || '-'}</td>
                <td>
                    <span class="badge bg-${customer.currentBalance > 0 ? 'danger' : customer.currentBalance < 0 ? 'success' : 'secondary'}">
                        ${formatCurrency(customer.currentBalance)}
                        ${customer.currentBalance > 0 ? '(مدين)' : customer.currentBalance < 0 ? '(دائن)' : '(متوازن)'}
                    </span>
                </td>
                <td>${formatCurrency(customer.creditLimit)}</td>
                <td>${customer.createdAt}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="editCustomer(${customer.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="viewCustomerStatement(${customer.id})" title="كشف حساب">
                            <i class="fas fa-file-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteCustomer(${customer.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفحة إضافة عميل
 */
function getAddCustomerHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-user-plus me-2"></i>
                        إضافة عميل جديد
                    </h1>
                    <button class="btn btn-outline-secondary" onclick="showPage('customers')">
                        <i class="fas fa-arrow-right me-2"></i>
                        العودة للقائمة
                    </button>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-user me-2"></i>
                            بيانات العميل
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="addCustomerForm" onsubmit="addCustomer(event)">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="customerName" class="form-label">
                                        <i class="fas fa-user me-1"></i>
                                        اسم العميل <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" class="form-control" id="customerName" required>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="customerPhone" class="form-label">
                                        <i class="fas fa-phone me-1"></i>
                                        رقم الهاتف
                                    </label>
                                    <input type="tel" class="form-control" id="customerPhone">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="customerEmail" class="form-label">
                                        <i class="fas fa-envelope me-1"></i>
                                        البريد الإلكتروني
                                    </label>
                                    <input type="email" class="form-control" id="customerEmail">
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="customerTaxNumber" class="form-label">
                                        <i class="fas fa-receipt me-1"></i>
                                        الرقم الضريبي
                                    </label>
                                    <input type="text" class="form-control" id="customerTaxNumber">
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="customerAddress" class="form-label">
                                    <i class="fas fa-map-marker-alt me-1"></i>
                                    العنوان
                                </label>
                                <textarea class="form-control" id="customerAddress" rows="3"></textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="customerCreditLimit" class="form-label">
                                        <i class="fas fa-credit-card me-1"></i>
                                        حد الائتمان
                                    </label>
                                    <input type="number" class="form-control" id="customerCreditLimit" min="0" step="0.01" value="0">
                                </div>
                                <div class="col-md-6 mb-3" ${appData.settings.enableMultiCurrency ? '' : 'style="display: none;"'}>
                                    <label for="customerCurrency" class="form-label">
                                        <i class="fas fa-coins me-1"></i>
                                        العملة
                                    </label>
                                    <select class="form-select" id="customerCurrency">
                                        <option value="${appData.settings.currency || 'SYP'}">${getCurrencySymbol(appData.settings.currency || 'SYP')}</option>
                                        ${appData.settings.enableMultiCurrency ? `
                                            <option value="USD">$ (الدولار الأمريكي)</option>
                                            <option value="EUR">€ (اليورو)</option>
                                            <option value="SAR">ر.س (الريال السعودي)</option>
                                            <option value="AED">د.إ (الدرهم الإماراتي)</option>
                                            <option value="EGP">ج.م (الجنيه المصري)</option>
                                            <option value="JOD">د.أ (الدينار الأردني)</option>
                                            <option value="LBP">ل.ل (الليرة اللبنانية)</option>
                                            <option value="TRY">₺ (الليرة التركية)</option>
                                            <option value="GBP">£ (الجنيه الإسترليني)</option>
                                        ` : ''}
                                    </select>
                                </div>
                            </div>

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" onclick="showPage('customers')">
                                    <i class="fas fa-times me-2"></i>
                                    إلغاء
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ العميل
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة الموردين
 */
function getSuppliersHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-truck me-2"></i>
                        قائمة الموردين
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showPage('add-supplier')">
                            <i class="fas fa-plus me-2"></i>
                            إضافة مورد جديد
                        </button>
                        <button class="btn btn-outline-success" onclick="exportSuppliersToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printContent('suppliers', 'قائمة الموردين')">
                            <i class="fas fa-print me-2"></i>
                            طباعة القائمة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">البحث</label>
                        <input type="text" class="form-control" id="supplierSearch" placeholder="البحث باسم المورد أو رقم الهاتف..." onkeyup="applySuppliersFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">نوع المورد</label>
                        <select class="form-select" id="supplierTypeFilter" onchange="applySuppliersFilter()">
                            <option value="">جميع الأنواع</option>
                            <option value="individual">فرد</option>
                            <option value="company">شركة</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">حالة الرصيد</label>
                        <select class="form-select" id="supplierBalanceFilter" onchange="applySuppliersFilter()">
                            <option value="">جميع الحالات</option>
                            <option value="positive">دائن</option>
                            <option value="negative">مدين</option>
                            <option value="zero">متوازن</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <div>
                            <button class="btn btn-outline-primary" onclick="applySuppliersFilter()">
                                <i class="fas fa-search me-2"></i>
                                بحث
                            </button>
                            <button class="btn btn-outline-secondary ms-2" onclick="clearSuppliersFilter()">
                                <i class="fas fa-times me-2"></i>
                                مسح
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="suppliersTable">
                        <thead class="table-light">
                            <tr>
                                <th>الاسم</th>
                                <th>الهاتف</th>
                                <th>البريد الإلكتروني</th>
                                <th>الرصيد الحالي</th>
                                <th>تاريخ الإنشاء</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${getSuppliersTableRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفوف جدول الموردين
 */
function getSuppliersTableRows() {
    if (appData.suppliers.length === 0) {
        return '<tr><td colspan="6" class="text-center text-muted">لا توجد موردين</td></tr>';
    }

    let html = '';
    appData.suppliers.forEach(supplier => {
        html += `
            <tr>
                <td>
                    <strong>${supplier.name}</strong>
                    ${supplier.taxNumber ? `<br><small class="text-muted">الرقم الضريبي: ${supplier.taxNumber}</small>` : ''}
                </td>
                <td>${supplier.phone || '-'}</td>
                <td>${supplier.email || '-'}</td>
                <td>
                    <span class="badge bg-${supplier.currentBalance > 0 ? 'success' : supplier.currentBalance < 0 ? 'danger' : 'secondary'}">
                        ${formatCurrency(supplier.currentBalance)}
                        ${supplier.currentBalance > 0 ? '(دائن)' : supplier.currentBalance < 0 ? '(مدين)' : '(متوازن)'}
                    </span>
                </td>
                <td>${supplier.createdAt}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="editSupplier(${supplier.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="viewSupplierStatement(${supplier.id})" title="كشف حساب">
                            <i class="fas fa-file-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteSupplier(${supplier.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفحة الأصناف
 */
function getProductsHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-boxes me-2"></i>
                        قائمة الأصناف
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showPage('add-product')">
                            <i class="fas fa-plus me-2"></i>
                            إضافة صنف جديد
                        </button>
                        <button class="btn btn-outline-warning" onclick="recalculateAllProductQuantities()" title="إعادة حساب جميع الكميات من حركات المخزون">
                            <i class="fas fa-calculator me-2"></i>
                            إعادة حساب الكميات
                        </button>
                        <button class="btn btn-outline-info" onclick="validateAndUpdateProductQuantities()" title="التحقق من دقة الكميات">
                            <i class="fas fa-check-double me-2"></i>
                            التحقق من الكميات
                        </button>
                        <button class="btn btn-outline-success" onclick="printContent('products', 'قائمة الأصناف')">
                            <i class="fas fa-print me-2"></i>
                            طباعة القائمة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">البحث</label>
                        <input type="text" class="form-control" id="productSearch" placeholder="البحث بالاسم أو الكود..." onkeyup="applyProductsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الفئة</label>
                        <select class="form-select" id="productCategoryFilter" onchange="applyProductsFilter()">
                            <option value="">جميع الفئات</option>
                            ${[...new Set(appData.products.map(p => p.category).filter(cat => cat))].map(category =>
                                `<option value="${category}">${category}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">المخزن</label>
                        <select class="form-select" id="productWarehouseFilter" onchange="applyProductsFilter()">
                            <option value="">جميع المخازن</option>
                            ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">حالة المخزون</label>
                        <select class="form-select" id="productStockFilter" onchange="applyProductsFilter()">
                            <option value="">جميع الحالات</option>
                            <option value="low">مخزون منخفض</option>
                            <option value="normal">مخزون آمن</option>
                            <option value="out">نفد المخزون</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <div>
                            <button class="btn btn-outline-primary" onclick="applyProductsFilter()">
                                <i class="fas fa-search me-2"></i>
                                بحث
                            </button>
                            <button class="btn btn-outline-secondary ms-2" onclick="clearProductsFilter()">
                                <i class="fas fa-times me-2"></i>
                                مسح
                            </button>
                            <button class="btn btn-outline-success ms-2" onclick="exportProductsToExcel()">
                                <i class="fas fa-file-excel me-2"></i>
                                Excel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="productsTable">
                        <thead class="table-light">
                            <tr>
                                <th>الكود</th>
                                <th>الاسم</th>
                                <th>الوحدة</th>
                                <th>سعر التكلفة</th>
                                <th>سعر البيع</th>
                                <th>الكمية</th>
                                <th>الحد الأدنى</th>
                                <th>الحالة</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${getProductsTableRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفوف جدول الأصناف
 */
function getProductsTableRows() {
    if (appData.products.length === 0) {
        return '<tr><td colspan="9" class="text-center text-muted">لا توجد أصناف</td></tr>';
    }

    let html = '';
    appData.products.forEach(product => {
        const isLowStock = product.quantity <= product.minQuantity;
        html += `
            <tr class="${isLowStock ? 'table-warning' : ''}">
                <td><strong>${product.code}</strong></td>
                <td>
                    ${product.name}
                    ${product.description ? `<br><small class="text-muted">${product.description}</small>` : ''}
                </td>
                <td>${product.unit}</td>
                <td>${formatCurrency(product.costPrice)}</td>
                <td>${formatCurrency(product.sellingPrice)}</td>
                <td>
                    <span class="badge bg-${isLowStock ? 'danger' : 'success'}">
                        ${product.quantity} ${product.unit}
                    </span>
                </td>
                <td>${product.minQuantity} ${product.unit}</td>
                <td>
                    ${isLowStock ? '<i class="fas fa-exclamation-triangle text-warning" title="مخزون منخفض"></i>' : '<i class="fas fa-check-circle text-success" title="مخزون آمن"></i>'}
                </td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="editProduct(${product.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="viewProductMovements(${product.id})" title="حركة المخزون">
                            <i class="fas fa-exchange-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct(${product.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفحة قريباً
 */
function getComingSoonHTML(pageName) {
    return `
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <div class="card shadow">
                    <div class="card-body py-5">
                        <i class="fas fa-tools fa-3x text-muted mb-3"></i>
                        <h3 class="text-muted">قريباً</h3>
                        <p class="text-muted">هذه الصفحة قيد التطوير</p>
                        <p class="text-muted">الصفحة المطلوبة: <strong>${pageName}</strong></p>
                        <button class="btn btn-primary" onclick="showPage('dashboard')">
                            <i class="fas fa-home me-2"></i>
                            العودة للرئيسية
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفوف جدول المخازن
 */
function getWarehousesTableRows() {
    if (appData.warehouses.length === 0) {
        return '<tr><td colspan="6" class="text-center text-muted">لا توجد مخازن</td></tr>';
    }

    let html = '';
    appData.warehouses.forEach(warehouse => {
        const productsCount = appData.products.filter(p => p.warehouseId === warehouse.id).length;
        html += `
            <tr>
                <td><strong>${warehouse.name}</strong></td>
                <td>${warehouse.location || '-'}</td>
                <td>${warehouse.manager || '-'}</td>
                <td>${warehouse.phone || '-'}</td>
                <td><span class="badge bg-info">${productsCount}</span></td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-info" onclick="showWarehouseProductMovements(${warehouse.id})" title="حركة الأصناف المفصلة">
                            <i class="fas fa-chart-line"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" onclick="editWarehouse(${warehouse.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteWarehouse(${warehouse.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفوف جدول تفاصيل حركة المخزون المحسن
 */
function getInventoryDetailsRows() {
    const movements = appData.inventoryMovements || [];

    if (movements.length === 0) {
        return '<tr><td colspan="11" class="text-center text-muted">لا توجد حركات مخزون</td></tr>';
    }

    // ترتيب الحركات حسب التاريخ (الأحدث أولاً)
    const sortedMovements = movements.sort((a, b) => new Date(b.date) - new Date(a.date));

    let html = '';
    sortedMovements.forEach((movement, index) => {
        const product = appData.products.find(p => p.id === movement.productId);
        const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

        const typeText = {
            'in': 'إدخال',
            'out': 'إخراج',
            'transfer': 'تحويل',
            'adjustment': 'تسوية',
            'sale': 'مبيعات',
            'purchase': 'مشتريات',
            'return': 'مرتجعات'
        };

        const typeColor = {
            'in': 'success',
            'out': 'danger',
            'transfer': 'info',
            'adjustment': 'warning',
            'sale': 'primary',
            'purchase': 'secondary',
            'return': 'dark'
        };

        const typeIcon = {
            'in': 'fa-arrow-up',
            'out': 'fa-arrow-down',
            'transfer': 'fa-exchange-alt',
            'adjustment': 'fa-balance-scale',
            'sale': 'fa-shopping-cart',
            'purchase': 'fa-shopping-bag',
            'return': 'fa-undo'
        };

        // تحديد سبب الحركة بناءً على المرجع
        let reason = movement.reference || '-';
        let reasonClass = '';

        if (movement.reference) {
            if (movement.reference.includes('فاتورة')) {
                reason = movement.reference;
                reasonClass = 'text-primary';
            } else if (movement.reference.includes('تحويل')) {
                reason = movement.reference;
                reasonClass = 'text-info';
            } else if (movement.reference.includes('تسوية')) {
                reason = movement.reference;
                reasonClass = 'text-warning';
            }
        }

        // تحديد المستخدم (افتراضي)
        const user = movement.userId ? 'مستخدم ' + movement.userId : 'النظام';

        html += `
            <tr class="movement-row" data-movement-type="${movement.movementType}" data-product-id="${movement.productId}" data-warehouse-id="${movement.warehouseId}">
                <td class="text-center">
                    <small>${movement.date}</small>
                </td>
                <td class="text-center">
                    <span class="badge bg-${typeColor[movement.movementType]} d-flex align-items-center justify-content-center" style="min-width: 80px;">
                        <i class="fas ${typeIcon[movement.movementType]} me-1"></i>
                        ${typeText[movement.movementType] || movement.movementType}
                    </span>
                </td>
                <td>
                    <div class="d-flex flex-column">
                        <strong class="text-dark">${product ? product.name : 'منتج محذوف'}</strong>
                        <small class="text-muted">${product ? product.code : '-'}</small>
                    </div>
                </td>
                <td>
                    <span class="badge bg-light text-dark">${warehouse ? warehouse.name : 'مخزن محذوف'}</span>
                </td>
                <td class="text-center">
                    <strong class="text-${movement.movementType === 'out' ? 'danger' : 'success'}">
                        ${movement.movementType === 'out' ? '-' : '+'}${movement.quantity}
                    </strong>
                </td>
                <td class="text-center">
                    <small class="text-muted">${product ? product.unit : '-'}</small>
                </td>
                <td class="text-end">
                    ${formatCurrency(movement.unitPrice || 0)}
                </td>
                <td class="text-end">
                    <strong>${formatCurrency(movement.totalAmount || (movement.quantity * (movement.unitPrice || 0)))}</strong>
                </td>
                <td class="${reasonClass}">
                    <small>${reason}</small>
                </td>
                <td class="text-center">
                    <small class="text-muted">${user}</small>
                </td>
                <td>
                    <small class="text-muted">${movement.notes || '-'}</small>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفوف جدول حركة المخزون
 */
function getInventoryMovementsRows() {
    const movements = appData.inventoryMovements || [];

    if (movements.length === 0) {
        return '<tr><td colspan="9" class="text-center text-muted">لا توجد حركات مخزون</td></tr>';
    }

    let html = '';
    movements.forEach(movement => {
        const product = appData.products.find(p => p.id === movement.productId);
        const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

        const typeText = {
            'in': 'إدخال',
            'out': 'إخراج',
            'transfer': 'تحويل',
            'adjustment': 'تسوية'
        };

        const typeColor = {
            'in': 'success',
            'out': 'danger',
            'transfer': 'info',
            'adjustment': 'warning'
        };

        html += `
            <tr>
                <td>${movement.date}</td>
                <td><span class="badge bg-${typeColor[movement.movementType]}">${typeText[movement.movementType]}</span></td>
                <td>${product ? product.name : 'منتج محذوف'}</td>
                <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                <td>${movement.quantity}</td>
                <td>${formatCurrency(movement.unitPrice)}</td>
                <td>${formatCurrency(movement.totalAmount)}</td>
                <td>${movement.reference}</td>
                <td>${movement.notes || '-'}</td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفوف جدول فواتير المبيعات
 */
function getSalesInvoicesRows(invoices) {
    let html = '';
    invoices.forEach(invoice => {
        const customer = appData.customers.find(c => c.id === invoice.customerId);
        html += `
            <tr>
                <td><strong>${invoice.invoiceNumber}</strong></td>
                <td>${customer ? customer.name : '-'}</td>
                <td>${invoice.invoiceDate}</td>
                <td>${formatCurrency(invoice.totalAmount)}</td>
                <td>${formatCurrency(invoice.paidAmount)}</td>
                <td>${formatCurrency(invoice.remainingAmount)}</td>
                <td><span class="badge bg-${getStatusColor(invoice.status)}">${getStatusText(invoice.status)}</span></td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="viewInvoice(${invoice.id})" title="عرض">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="printInvoice(${invoice.id})" title="طباعة">
                            <i class="fas fa-print"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="editInvoice(${invoice.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteInvoice(${invoice.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * صفوف جدول فواتير المشتريات
 */
function getPurchaseInvoicesRows(invoices) {
    let html = '';
    invoices.forEach(invoice => {
        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
        html += `
            <tr>
                <td><strong>${invoice.invoiceNumber}</strong></td>
                <td>${supplier ? supplier.name : '-'}</td>
                <td>${invoice.invoiceDate}</td>
                <td>${formatCurrency(invoice.totalAmount)}</td>
                <td>${formatCurrency(invoice.paidAmount)}</td>
                <td>${formatCurrency(invoice.remainingAmount)}</td>
                <td><span class="badge bg-${getStatusColor(invoice.status)}">${getStatusText(invoice.status)}</span></td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="viewInvoice(${invoice.id})" title="عرض">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="printInvoice(${invoice.id})" title="طباعة">
                            <i class="fas fa-print"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="editInvoice(${invoice.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteInvoice(${invoice.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

/**
 * إضافة عميل جديد
 */
function addCustomer(event) {
    event.preventDefault();

    // التحقق من الصلاحيات
    if (!hasPermission('customers')) {
        alert('ليس لديك صلاحية لإضافة العملاء');
        return;
    }

    const name = document.getElementById('customerName').value.trim();
    const phone = document.getElementById('customerPhone').value.trim();
    const email = document.getElementById('customerEmail').value.trim();
    const taxNumber = document.getElementById('customerTaxNumber').value.trim();
    const address = document.getElementById('customerAddress').value.trim();
    const creditLimit = parseFloat(document.getElementById('customerCreditLimit').value) || 0;
    const currency = document.getElementById('customerCurrency')?.value || appData.settings.currency || 'SYP';

    if (!name) {
        alert('يرجى إدخال اسم العميل');
        return;
    }

    // التحقق من عدم تكرار الاسم
    if (appData.customers.some(c => c.name === name)) {
        alert('يوجد عميل بنفس الاسم مسبقاً');
        return;
    }

    const newCustomer = {
        id: Date.now(),
        name: name,
        phone: phone,
        email: email,
        address: address,
        taxNumber: taxNumber,
        creditLimit: creditLimit,
        currency: currency,
        currentBalance: 0,
        createdAt: new Date().toISOString().split('T')[0]
    };

    appData.customers.push(newCustomer);
    saveData();

    alert('تم إضافة العميل بنجاح');
    showPage('customers');
}

/**
 * حذف عميل
 */
function deleteCustomer(customerId) {
    // التحقق من الصلاحيات
    if (!hasPermission('customers')) {
        alert('ليس لديك صلاحية لحذف العملاء');
        return;
    }

    const customer = appData.customers.find(c => c.id === customerId);
    if (!customer) return;

    if (confirm(`هل أنت متأكد من حذف العميل "${customer.name}"؟`)) {
        // التحقق من وجود فواتير مرتبطة
        const hasInvoices = appData.invoices.some(inv => inv.customerId === customerId);
        if (hasInvoices) {
            alert('لا يمكن حذف العميل لوجود فواتير مرتبطة به');
            return;
        }

        appData.customers = appData.customers.filter(c => c.id !== customerId);
        saveData();

        alert('تم حذف العميل بنجاح');
        showPage('customers');
    }
}

/**
 * تصفية العملاء
 */
function filterCustomers() {
    const searchTerm = document.getElementById('customerSearch').value.toLowerCase();
    const table = document.getElementById('customersTable');
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const text = row.textContent.toLowerCase();

        if (text.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    }
}

/**
 * تنسيق العملة مع دقة محسنة
 */
function formatCurrency(amount, currency = null, decimals = 2) {
    // التحقق من صحة المدخلات
    if (isNaN(amount) || amount === null || amount === undefined) {
        amount = 0;
    }

    // تحويل إلى رقم وتطبيق الدقة
    const numericAmount = parseFloat(amount);

    // تجنب مشاكل الفاصلة العائمة
    const factor = Math.pow(10, decimals);
    const roundedAmount = Math.round((numericAmount + Number.EPSILON) * factor) / factor;

    // تنسيق الرقم مع فواصل الآلاف
    const formattedNumber = new Intl.NumberFormat('ar-SY', {
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals,
        useGrouping: true
    }).format(roundedAmount);

    // إضافة رمز العملة إذا تم تحديدها
    if (currency) {
        const currencySymbol = getCurrencySymbol(currency);
        return `${formattedNumber} ${currencySymbol}`;
    }

    return formattedNumber;
}

/**
 * تنسيق الأرقام مع دقة محسنة
 */
function formatNumber(number, decimals = 2) {
    if (isNaN(number) || number === null || number === undefined) return '0.00';

    // التعامل مع الأرقام الكبيرة والصغيرة
    const num = parseFloat(number);

    // تجنب مشاكل الفاصلة العائمة
    const factor = Math.pow(10, decimals);
    const rounded = Math.round((num + Number.EPSILON) * factor) / factor;

    return rounded.toFixed(decimals);
}

/**
 * حساب دقيق للنسبة المئوية
 */
function calculatePercentage(value, total, decimals = 2) {
    if (!total || total === 0) return 0;

    const percentage = (value / total) * 100;
    return parseFloat(formatNumber(percentage, decimals));
}

/**
 * حساب دقيق للخصم
 */
function calculateDiscount(amount, discountPercent, decimals = 2) {
    if (!amount || !discountPercent) return 0;

    const discount = preciseMultiply(amount, discountPercent) / 100;
    return parseFloat(formatNumber(discount, decimals));
}

/**
 * حساب دقيق للضريبة
 */
function calculateTax(amount, taxPercent, decimals = 2) {
    if (!amount || !taxPercent) return 0;

    const tax = preciseMultiply(amount, taxPercent) / 100;
    return parseFloat(formatNumber(tax, decimals));
}

/**
 * جمع دقيق للأرقام (تجنب مشاكل الفاصلة العائمة)
 */
function preciseAdd(...numbers) {
    let sum = 0;
    const decimals = 6; // دقة داخلية عالية

    numbers.forEach(num => {
        if (!isNaN(num) && num !== null && num !== undefined) {
            sum += parseFloat(num);
        }
    });

    // تقريب النتيجة النهائية
    const factor = Math.pow(10, decimals);
    return Math.round((sum + Number.EPSILON) * factor) / factor;
}

/**
 * طرح دقيق للأرقام
 */
function preciseSubtract(a, b) {
    if (isNaN(a) || a === null || a === undefined) a = 0;
    if (isNaN(b) || b === null || b === undefined) b = 0;

    const decimals = 6;
    const factor = Math.pow(10, decimals);

    return Math.round(((parseFloat(a) - parseFloat(b)) + Number.EPSILON) * factor) / factor;
}

/**
 * ضرب دقيق للأرقام
 */
function preciseMultiply(a, b, decimals = 6) {
    if (isNaN(a) || a === null || a === undefined) a = 0;
    if (isNaN(b) || b === null || b === undefined) b = 0;

    const result = parseFloat(a) * parseFloat(b);
    const factor = Math.pow(10, decimals);

    return Math.round((result + Number.EPSILON) * factor) / factor;
}

/**
 * قسمة دقيقة للأرقام
 */
function preciseDivide(a, b, decimals = 6) {
    if (isNaN(a) || a === null || a === undefined) a = 0;
    if (isNaN(b) || b === null || b === undefined || b === 0) return 0;

    const result = parseFloat(a) / parseFloat(b);
    const factor = Math.pow(10, decimals);

    return Math.round((result + Number.EPSILON) * factor) / factor;
}

/**
 * الحصول على العملات المتاحة في النظام
 */
function getAvailableCurrencies() {
    const currencies = new Set();

    // إضافة العملة الافتراضية
    currencies.add(appData.settings.currency || 'SYP');

    // إضافة العملات من العملاء
    if (appData.customers) {
        appData.customers.forEach(customer => {
            if (customer.currency) {
                currencies.add(customer.currency);
            }
        });
    }

    // إضافة العملات من الموردين
    if (appData.suppliers) {
        appData.suppliers.forEach(supplier => {
            if (supplier.currency) {
                currencies.add(supplier.currency);
            }
        });
    }

    // إضافة العملات من الفواتير
    if (appData.invoices) {
        appData.invoices.forEach(invoice => {
            if (invoice.currency) {
                currencies.add(invoice.currency);
            }
        });
    }

    // إضافة العملات من المدفوعات
    if (appData.receipts) {
        appData.receipts.forEach(receipt => {
            if (receipt.currency) {
                currencies.add(receipt.currency);
            }
        });
    }

    if (appData.payments) {
        appData.payments.forEach(payment => {
            if (payment.currency) {
                currencies.add(payment.currency);
            }
        });
    }

    return Array.from(currencies).sort();
}

/**
 * الحصول على قائمة الحسابات المتاحة
 */
function getAvailableAccounts() {
    const accounts = new Set();

    // إضافة الحسابات من القيود المحاسبية
    if (appData.journalEntries) {
        appData.journalEntries.forEach(entry => {
            if (entry.debitAccount) {
                accounts.add(entry.debitAccount);
            }
            if (entry.creditAccount) {
                accounts.add(entry.creditAccount);
            }
        });
    }

    return Array.from(accounts).sort();
}

/**
 * الحصول على لون الحالة
 */
function getStatusColor(status) {
    switch(status) {
        case 'confirmed': return 'success';
        case 'draft': return 'warning';
        case 'cancelled': return 'danger';
        case 'paid': return 'info';
        default: return 'secondary';
    }
}

/**
 * الحصول على نص الحالة
 */
function getStatusText(status) {
    switch(status) {
        case 'confirmed': return 'مؤكدة';
        case 'draft': return 'مسودة';
        case 'cancelled': return 'ملغية';
        case 'paid': return 'مدفوعة';
        default: return status;
    }
}

/**
 * إضافة منتج جديد
 */
function addNewProduct(event) {
    event.preventDefault();

    const code = document.getElementById('productCode').value.trim();
    const name = document.getElementById('productName').value.trim();
    const description = document.getElementById('productDescription').value.trim();
    const unit = document.getElementById('productUnit').value;
    const category = document.getElementById('productCategory').value;
    const warehouseId = parseInt(document.getElementById('productWarehouse').value);
    const costPrice = parseFloat(document.getElementById('productCostPrice').value);
    const sellingPrice = parseFloat(document.getElementById('productSellingPrice').value);
    const quantity = parseFloat(document.getElementById('productQuantity').value);
    const minQuantity = parseFloat(document.getElementById('productMinQuantity').value);
    const barcode = document.getElementById('productBarcode').value.trim();

    if (!code || !name || !unit || !warehouseId || costPrice < 0 || sellingPrice < 0 || quantity < 0 || minQuantity < 0) {
        alert('يرجى ملء جميع الحقول المطلوبة بقيم صحيحة');
        return;
    }

    // التحقق من عدم تكرار الكود
    if (appData.products.some(p => p.code === code)) {
        alert('يوجد منتج بنفس الكود مسبقاً');
        return;
    }

    const newProduct = {
        id: Date.now(),
        code: code,
        name: name,
        description: description,
        unit: unit,
        category: category,
        warehouseId: warehouseId,
        costPrice: costPrice,
        sellingPrice: sellingPrice,
        quantity: quantity,
        minQuantity: minQuantity,
        barcode: barcode,
        isActive: true,
        createdAt: new Date().toISOString().split('T')[0]
    };

    appData.products.push(newProduct);

    // إضافة حركة مخزون للكمية الأولية
    if (quantity > 0) {
        addInventoryMovement({
            productId: newProduct.id,
            warehouseId: warehouseId,
            movementType: 'in',
            quantity: quantity,
            unitPrice: costPrice,
            reference: 'إدخال أولي',
            notes: 'كمية أولية عند إضافة المنتج'
        });
    }

    saveData();

    alert('تم إضافة المنتج بنجاح');
    showPage('products');
}

/**
 * عرض حركة الأصناف المفصلة لمخزن معين
 */
function showWarehouseProductMovements(warehouseId) {
    console.log(`📊 عرض حركة الأصناف المفصلة للمخزن ID: ${warehouseId}`);

    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) {
        alert('المخزن غير موجود');
        return;
    }

    // الحصول على جميع المنتجات في هذا المخزن
    const warehouseProducts = appData.products.filter(p => p.warehouseId === warehouseId);

    // الحصول على جميع حركات المخزون لهذا المخزن
    const warehouseMovements = (appData.inventoryMovements || []).filter(m => m.warehouseId === warehouseId);

    // إنشاء تقرير مفصل لكل منتج
    let reportHTML = `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-chart-line me-2"></i>
                        حركة الأصناف المفصلة - ${warehouse.name}
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" onclick="showPage('warehouses')">
                            <i class="fas fa-arrow-right me-2"></i>
                            العودة للمخازن
                        </button>
                        <button class="btn btn-warning" onclick="refreshWarehouseMovements(${warehouseId})" title="تحديث حسابات الحركة">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث الحسابات
                        </button>
                        <button class="btn btn-outline-success" onclick="exportWarehouseMovementsToExcel(${warehouseId})">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-primary" onclick="printWarehouseMovements(${warehouseId})">
                            <i class="fas fa-print me-2"></i>
                            طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- معلومات المخزن -->
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-warehouse me-2"></i>
                    معلومات المخزن
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <strong>اسم المخزن:</strong> ${warehouse.name}
                    </div>
                    <div class="col-md-3">
                        <strong>الموقع:</strong> ${warehouse.location || '-'}
                    </div>
                    <div class="col-md-3">
                        <strong>المدير:</strong> ${warehouse.manager || '-'}
                    </div>
                    <div class="col-md-3">
                        <strong>عدد الأصناف:</strong> <span class="badge bg-info">${warehouseProducts.length}</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات سريعة محسنة -->
        ${generateWarehouseStatistics(warehouseId, warehouseMovements, warehouseProducts)}
    `;

    // إضافة تفاصيل كل منتج
    if (warehouseProducts.length > 0) {
        reportHTML += `
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-boxes me-2"></i>
                        تفاصيل حركة الأصناف
                    </h5>
                </div>
                <div class="card-body">
        `;

        warehouseProducts.forEach(product => {
            // فلترة الحركات للمنتج الحالي (استبعاد المحذوفة)
            const productMovements = warehouseMovements.filter(m =>
                m.productId === product.id &&
                m.isDeleted !== true
            );

            // حساب الإدخالات (شراء، إرجاع مبيعات، تحويل داخل، تسوية موجبة)
            const totalIn = productMovements.filter(m =>
                m.movementType === 'in' ||
                (m.movementType === 'adjustment' && m.quantity > 0) ||
                m.movementType === 'return_sale' ||
                m.movementType === 'transfer_in'
            ).reduce((sum, m) => sum + Math.abs(m.quantity), 0);

            // حساب الإخراجات (بيع، إرجاع مشتريات، تحويل خارج، تسوية سالبة، تلف)
            const totalOut = productMovements.filter(m =>
                m.movementType === 'out' ||
                (m.movementType === 'adjustment' && m.quantity < 0) ||
                m.movementType === 'return_purchase' ||
                m.movementType === 'transfer_out' ||
                m.movementType === 'damage' ||
                m.movementType === 'sale'
            ).reduce((sum, m) => sum + Math.abs(m.quantity), 0);

            // إضافة إخراجات من فواتير المبيعات
            const salesFromInvoices = (appData.invoices || [])
                .filter(inv =>
                    inv.invoiceType === 'sale' &&
                    inv.status === 'confirmed' &&
                    inv.isDeleted !== true
                )
                .reduce((sum, inv) => {
                    const item = inv.items.find(item => item.productId === product.id);
                    return sum + (item ? item.quantity : 0);
                }, 0);

            const totalOutWithSales = totalOut + salesFromInvoices;
            const netMovement = totalIn - totalOutWithSales;

            reportHTML += `
                <div class="accordion mb-3" id="product-${product.id}">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapse-${product.id}">
                                <div class="d-flex justify-content-between w-100 me-3">
                                    <div>
                                        <strong>${product.name}</strong>
                                        <span class="text-muted">(${product.code})</span>
                                    </div>
                                    <div>
                                        <span class="badge bg-primary me-2">الكمية الحالية: ${product.quantity}</span>
                                        <span class="badge bg-success me-2">إدخال: ${totalIn}</span>
                                        <span class="badge bg-danger me-2">إخراج: ${totalOutWithSales}</span>
                                        <span class="badge bg-warning me-2">مبيعات: ${salesFromInvoices}</span>
                                        <span class="badge bg-${netMovement >= 0 ? 'info' : 'warning'}">الصافي: ${netMovement}</span>
                                    </div>
                                </div>
                            </button>
                        </h2>
                        <div id="collapse-${product.id}" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                ${getProductMovementsTable(product, productMovements)}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        reportHTML += `
                </div>
            </div>
        `;
    } else {
        reportHTML += `
            <div class="card shadow">
                <div class="card-body text-center">
                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">لا توجد أصناف في هذا المخزن</h5>
                </div>
            </div>
        `;
    }

    // عرض التقرير
    document.getElementById('main-content').innerHTML = reportHTML;
}

/**
 * إنشاء إحصائيات المخزن المحسنة
 */
function generateWarehouseStatistics(warehouseId, warehouseMovements, warehouseProducts) {
    console.log('📊 حساب إحصائيات المخزن المحسنة...');

    // حساب الإحصائيات الأساسية
    let totalIn = 0, totalOut = 0, totalTransferIn = 0, totalTransferOut = 0;
    let totalAdjustmentPositive = 0, totalAdjustmentNegative = 0;
    let totalValue = 0, totalMovements = 0;

    // حساب إخراجات من فواتير المبيعات
    let totalSalesFromInvoices = 0;
    (appData.invoices || [])
        .filter(inv =>
            inv.invoiceType === 'sale' &&
            inv.status === 'confirmed' &&
            inv.isDeleted !== true
        )
        .forEach(inv => {
            inv.items.forEach(item => {
                const product = warehouseProducts.find(p => p.id === item.productId);
                if (product) {
                    totalSalesFromInvoices += item.quantity;
                }
            });
        });

    // تحليل حركات المخزون
    warehouseMovements.forEach(movement => {
        if (movement.isDeleted === true) return;

        const quantity = Math.abs(parseFloat(movement.quantity) || 0);
        const unitPrice = parseFloat(movement.unitPrice) || 0;
        const value = quantity * unitPrice;

        totalMovements++;
        totalValue += value;

        switch (movement.movementType) {
            case 'in':
                totalIn += quantity;
                break;
            case 'out':
                totalOut += quantity;
                break;
            case 'transfer_in':
            case 'transfer':
                if (movement.quantity > 0) {
                    totalTransferIn += quantity;
                } else {
                    totalTransferOut += quantity;
                }
                break;
            case 'transfer_out':
                totalTransferOut += quantity;
                break;
            case 'adjustment':
                if (movement.quantity > 0) {
                    totalAdjustmentPositive += quantity;
                } else {
                    totalAdjustmentNegative += quantity;
                }
                break;
        }
    });

    // حساب الصافي
    const netIn = totalIn + totalTransferIn + totalAdjustmentPositive;
    const netOut = totalOut + totalTransferOut + totalAdjustmentNegative + totalSalesFromInvoices;
    const netMovement = netIn - netOut;

    // حساب قيمة المخزون الحالية
    const currentStockValue = warehouseProducts.reduce((sum, product) => {
        return sum + ((product.quantity || 0) * (product.costPrice || 0));
    }, 0);

    return `
        <div class="row mb-4">
            <!-- الإدخالات -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-success text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-up fa-2x mb-2"></i>
                        <h4>${totalIn.toFixed(2)}</h4>
                        <small>إجمالي الإدخالات</small>
                    </div>
                </div>
            </div>

            <!-- الإخراجات -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-danger text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-down fa-2x mb-2"></i>
                        <h4>${totalOut.toFixed(2)}</h4>
                        <small>إجمالي الإخراجات</small>
                    </div>
                </div>
            </div>

            <!-- التحويلات الداخلة -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-info text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-right fa-2x mb-2"></i>
                        <h4>${totalTransferIn.toFixed(2)}</h4>
                        <small>تحويلات داخلة</small>
                    </div>
                </div>
            </div>

            <!-- التحويلات الخارجة -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-warning text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-left fa-2x mb-2"></i>
                        <h4>${totalTransferOut.toFixed(2)}</h4>
                        <small>تحويلات خارجة</small>
                    </div>
                </div>
            </div>

            <!-- المبيعات من الفواتير -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-primary text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                        <h4>${totalSalesFromInvoices.toFixed(2)}</h4>
                        <small>مبيعات من الفواتير</small>
                    </div>
                </div>
            </div>

            <!-- الصافي -->
            <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
                <div class="card bg-${netMovement >= 0 ? 'secondary' : 'dark'} text-white h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-balance-scale fa-2x mb-2"></i>
                        <h4>${netMovement.toFixed(2)}</h4>
                        <small>صافي الحركة</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات التسويات -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-success">
                    <div class="card-body text-center">
                        <h6 class="card-title text-success">تسويات موجبة</h6>
                        <h4 class="text-success">${totalAdjustmentPositive.toFixed(2)}</h4>
                        <small class="text-muted">زيادة في المخزون</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-danger">
                    <div class="card-body text-center">
                        <h6 class="card-title text-danger">تسويات سالبة</h6>
                        <h4 class="text-danger">${Math.abs(totalAdjustmentNegative).toFixed(2)}</h4>
                        <small class="text-muted">نقص في المخزون</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-info">
                    <div class="card-body text-center">
                        <h6 class="card-title text-info">إجمالي الحركات</h6>
                        <h4 class="text-info">${totalMovements}</h4>
                        <small class="text-muted">عدد الحركات</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-primary">
                    <div class="card-body text-center">
                        <h6 class="card-title text-primary">قيمة المخزون</h6>
                        <h4 class="text-primary">${formatCurrency(currentStockValue)}</h4>
                        <small class="text-muted">القيمة الحالية</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص مفصل -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h6 class="mb-0">
                    <i class="fas fa-chart-bar me-2"></i>
                    ملخص مفصل للحركة
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-success">إجمالي الداخل:</h6>
                        <ul class="list-unstyled ms-3">
                            <li>• إدخالات مباشرة: <strong>${totalIn.toFixed(2)}</strong></li>
                            <li>• تحويلات داخلة: <strong>${totalTransferIn.toFixed(2)}</strong></li>
                            <li>• تسويات موجبة: <strong>${totalAdjustmentPositive.toFixed(2)}</strong></li>
                            <li class="border-top pt-2 mt-2">
                                <strong>المجموع: ${netIn.toFixed(2)}</strong>
                            </li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-danger">إجمالي الخارج:</h6>
                        <ul class="list-unstyled ms-3">
                            <li>• إخراجات مباشرة: <strong>${totalOut.toFixed(2)}</strong></li>
                            <li>• تحويلات خارجة: <strong>${totalTransferOut.toFixed(2)}</strong></li>
                            <li>• تسويات سالبة: <strong>${Math.abs(totalAdjustmentNegative).toFixed(2)}</strong></li>
                            <li>• مبيعات من الفواتير: <strong>${totalSalesFromInvoices.toFixed(2)}</strong></li>
                            <li class="border-top pt-2 mt-2">
                                <strong>المجموع: ${netOut.toFixed(2)}</strong>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="alert alert-${netMovement >= 0 ? 'success' : 'warning'} mb-0">
                            <strong>صافي الحركة: ${netMovement.toFixed(2)}</strong>
                            ${netMovement >= 0 ?
                                ' - المخزن في حالة زيادة' :
                                ' - المخزن في حالة نقص'
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * إنشاء جدول حركات منتج معين
 */
function getProductMovementsTable(product, movements) {
    if (movements.length === 0) {
        return `
            <div class="text-center text-muted">
                <i class="fas fa-info-circle me-2"></i>
                لا توجد حركات لهذا الصنف
            </div>
        `;
    }

    let tableHTML = `
        <div class="table-responsive">
            <table class="table table-sm table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>التاريخ</th>
                        <th>نوع الحركة</th>
                        <th>الكمية</th>
                        <th>سعر الوحدة</th>
                        <th>المجموع</th>
                        <th>المرجع</th>
                        <th>ملاحظات</th>
                    </tr>
                </thead>
                <tbody>
    `;

    movements.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(movement => {
        const typeText = {
            'in': 'إدخال',
            'out': 'إخراج',
            'transfer': 'تحويل',
            'adjustment': 'تسوية'
        };

        const typeColor = {
            'in': 'success',
            'out': 'danger',
            'transfer': 'info',
            'adjustment': 'warning'
        };

        tableHTML += `
            <tr>
                <td>${movement.date}</td>
                <td><span class="badge bg-${typeColor[movement.movementType]}">${typeText[movement.movementType]}</span></td>
                <td>${movement.quantity}</td>
                <td>${formatCurrency(movement.unitPrice || 0)}</td>
                <td>${formatCurrency(movement.totalAmount || 0)}</td>
                <td>${movement.reference || '-'}</td>
                <td>${movement.notes || '-'}</td>
            </tr>
        `;
    });

    tableHTML += `
                </tbody>
            </table>
        </div>
    `;

    return tableHTML;
}

/**
 * إضافة حركة مخزون
 */
function addInventoryMovement(movement) {
    if (!appData.inventoryMovements) {
        appData.inventoryMovements = [];
    }

    const newMovement = {
        id: Date.now(),
        date: new Date().toISOString().split('T')[0],
        productId: movement.productId,
        warehouseId: movement.warehouseId,
        movementType: movement.movementType, // 'in', 'out', 'transfer', 'adjustment'
        quantity: movement.quantity,
        unitPrice: movement.unitPrice || 0,
        totalAmount: movement.quantity * (movement.unitPrice || 0),
        reference: movement.reference || '',
        notes: movement.notes || '',
        createdAt: new Date().toISOString()
    };

    appData.inventoryMovements.push(newMovement);

    // تحديث كمية المنتج
    const product = appData.products.find(p => p.id === movement.productId);
    if (product) {
        if (movement.movementType === 'in') {
            product.quantity += movement.quantity;
        } else if (movement.movementType === 'out') {
            product.quantity -= movement.quantity;
        }
    }
}

/**
 * عرض نافذة إضافة حركة مخزون
 */
function showAddMovementModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addMovementModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">إضافة حركة مخزون</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addMovementForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="movementType" class="form-label">نوع الحركة <span class="text-danger">*</span></label>
                                <select class="form-select" id="movementType" required>
                                    <option value="">اختر نوع الحركة</option>
                                    <option value="in">إدخال</option>
                                    <option value="out">إخراج</option>
                                    <option value="adjustment">تسوية</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="movementProduct" class="form-label">المنتج <span class="text-danger">*</span></label>
                                <select class="form-select" id="movementProduct" required>
                                    <option value="">اختر المنتج</option>
                                    ${appData.products.map(p => `<option value="${p.id}">${p.name} (${p.code})</option>`).join('')}
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="movementWarehouse" class="form-label">المخزن <span class="text-danger">*</span></label>
                                <select class="form-select" id="movementWarehouse" required>
                                    <option value="">اختر المخزن</option>
                                    ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="movementQuantity" class="form-label">الكمية <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="movementQuantity" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="movementUnitPrice" class="form-label">سعر الوحدة</label>
                                <input type="number" class="form-control" id="movementUnitPrice" min="0" step="0.01">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="movementReference" class="form-label">المرجع</label>
                                <input type="text" class="form-control" id="movementReference">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="movementNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="movementNotes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveInventoryMovement()">حفظ الحركة</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ حركة المخزون
 */
function saveInventoryMovement() {
    const movementType = document.getElementById('movementType').value;
    const productId = parseInt(document.getElementById('movementProduct').value);
    const warehouseId = parseInt(document.getElementById('movementWarehouse').value);
    const quantity = parseFloat(document.getElementById('movementQuantity').value);
    const unitPrice = parseFloat(document.getElementById('movementUnitPrice').value) || 0;
    const reference = document.getElementById('movementReference').value.trim();
    const notes = document.getElementById('movementNotes').value.trim();

    if (!movementType || !productId || !warehouseId || quantity <= 0) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    // التحقق من توفر الكمية في حالة الإخراج
    if (movementType === 'out') {
        const product = appData.products.find(p => p.id === productId);
        if (product && product.quantity < quantity) {
            alert(`الكمية المتاحة: ${product.quantity} ${product.unit}`);
            return;
        }
    }

    addInventoryMovement({
        productId: productId,
        warehouseId: warehouseId,
        movementType: movementType,
        quantity: quantity,
        unitPrice: unitPrice,
        reference: reference,
        notes: notes
    });

    saveData();

    // إغلاق النافذة
    const modal = bootstrap.Modal.getInstance(document.getElementById('addMovementModal'));
    modal.hide();

    alert('تم حفظ حركة المخزون بنجاح');
    showPage('inventory');
}

/**
 * إضافة مورد جديد
 */
function addSupplier(event) {
    event.preventDefault();

    // التحقق من الصلاحيات
    if (!hasPermission('suppliers')) {
        alert('ليس لديك صلاحية لإضافة الموردين');
        return;
    }

    const name = document.getElementById('supplierName').value.trim();
    const phone = document.getElementById('supplierPhone').value.trim();
    const email = document.getElementById('supplierEmail').value.trim();
    const taxNumber = document.getElementById('supplierTaxNumber').value.trim();
    const address = document.getElementById('supplierAddress').value.trim();
    const currency = document.getElementById('supplierCurrency')?.value || appData.settings.currency || 'SYP';

    if (!name) {
        alert('يرجى إدخال اسم المورد');
        return;
    }

    // التحقق من عدم تكرار الاسم
    if (appData.suppliers.some(s => s.name === name)) {
        alert('يوجد مورد بنفس الاسم مسبقاً');
        return;
    }

    const newSupplier = {
        id: Date.now(),
        name: name,
        phone: phone,
        email: email,
        address: address,
        taxNumber: taxNumber,
        currency: currency,
        currentBalance: 0,
        createdAt: new Date().toISOString().split('T')[0]
    };

    appData.suppliers.push(newSupplier);
    saveData();

    alert('تم إضافة المورد بنجاح');
    showPage('suppliers');
}

/**
 * إضافة مخزن جديد
 */
function addWarehouse() {
    const name = document.getElementById('warehouseName').value.trim();
    const location = document.getElementById('warehouseLocation').value.trim();
    const manager = document.getElementById('warehouseManager').value.trim();
    const phone = document.getElementById('warehousePhone').value.trim();

    if (!name) {
        alert('يرجى إدخال اسم المخزن');
        return;
    }

    // التحقق من عدم تكرار الاسم
    if (appData.warehouses.some(w => w.name === name)) {
        alert('يوجد مخزن بنفس الاسم مسبقاً');
        return;
    }

    const newWarehouse = {
        id: Date.now(),
        name: name,
        location: location,
        manager: manager,
        phone: phone,
        isActive: true,
        createdAt: new Date().toISOString().split('T')[0]
    };

    appData.warehouses.push(newWarehouse);
    saveData();

    // إغلاق النافذة المنبثقة
    const modal = bootstrap.Modal.getInstance(document.getElementById('addWarehouseModal'));
    modal.hide();

    // إعادة تحميل الصفحة
    showPage('warehouses');

    alert('تم إضافة المخزن بنجاح');
}

/**
 * عرض نافذة إضافة مخزن
 */
function showAddWarehouseModal() {
    const modal = new bootstrap.Modal(document.getElementById('addWarehouseModal'));
    modal.show();
}

/**
 * تحديث خيارات العميل/المورد في فاتورة
 */
function updateClientOptions() {
    const invoiceType = document.getElementById('invoiceType').value;
    const clientSelect = document.getElementById('clientSelect');
    const clientLabel = document.getElementById('clientLabel');

    // مسح الخيارات الحالية
    clientSelect.innerHTML = '<option value="">اختر العميل/المورد</option>';

    if (invoiceType === 'sale') {
        clientLabel.textContent = 'العميل';
        appData.customers.forEach(customer => {
            const option = document.createElement('option');
            option.value = customer.id;
            option.textContent = customer.name;
            clientSelect.appendChild(option);
        });
    } else if (invoiceType === 'purchase') {
        clientLabel.textContent = 'المورد';
        appData.suppliers.forEach(supplier => {
            const option = document.createElement('option');
            option.value = supplier.id;
            option.textContent = supplier.name;
            clientSelect.appendChild(option);
        });
    }

    // تحديث رقم الفاتورة
    updateInvoiceNumber();
}

/**
 * تحديث رقم الفاتورة
 */
function updateInvoiceNumber() {
    const invoiceType = document.getElementById('invoiceType').value;
    const invoiceNumber = document.getElementById('invoiceNumber');

    if (invoiceType) {
        const prefix = invoiceType === 'sale' ? 'SALE' : 'PUR';
        const year = new Date().getFullYear();
        const count = appData.invoices.filter(inv => inv.invoiceType === invoiceType).length + 1;
        invoiceNumber.value = `${prefix}-${year}-${count.toString().padStart(3, '0')}`;
    } else {
        invoiceNumber.value = '';
    }
}

/**
 * إضافة عنصر للفاتورة - نسخة محسنة ومتوافقة
 */
function addInvoiceItem() {
    console.log('➕ إضافة عنصر جديد للفاتورة...');

    const tableBody = document.getElementById('invoiceItemsTable');
    if (!tableBody) {
        console.error('❌ جدول عناصر الفاتورة غير موجود');
        alert('خطأ: جدول عناصر الفاتورة غير موجود');
        return;
    }

    const row = document.createElement('tr');
    row.innerHTML = `
        <td>
            <select class="form-select item-product" required onchange="updateItemPrice(this)">
                <option value="">اختر الصنف</option>
                ${appData.products.map(p => `<option value="${p.id}" data-price="${p.sellingPrice}">${p.name}</option>`).join('')}
            </select>
        </td>
        <td>
            <textarea class="form-control item-specifications" rows="2" placeholder="أدخل المواصفات (اختياري)"></textarea>
        </td>
        <td>
            <input type="number" class="form-control item-quantity" min="1" step="0.01" value="1" required onchange="calculateItemTotal(this)">
        </td>
        <td>
            <input type="number" class="form-control item-price" min="0" step="0.01" required onchange="calculateItemTotal(this)">
        </td>
        <td>
            <input type="number" class="form-control item-discount" min="0" max="100" step="0.01" value="0" onchange="calculateItemTotal(this)">
        </td>
        <td>
            <span class="item-total">0.00 ل.س</span>
        </td>
        <td>
            <button type="button" class="btn btn-sm btn-danger" onclick="removeInvoiceItem(this)">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;

    tableBody.appendChild(row);
    console.log('✅ تم إضافة عنصر جديد للفاتورة');
}

/**
 * حذف عنصر من الفاتورة
 */
function removeInvoiceItem(button) {
    const row = button.closest('tr');
    row.remove();
    calculateInvoiceTotals();
}

/**
 * تحديث سعر العنصر عند اختيار الصنف
 */
function updateItemPrice(select) {
    console.log('💰 تحديث سعر العنصر...');

    const selectedOption = select.options[select.selectedIndex];
    const price = selectedOption.getAttribute('data-price');
    const row = select.closest('tr');
    const priceInput = row.querySelector('.item-price');

    if (price && priceInput) {
        priceInput.value = price;
        console.log('✅ تم تحديث السعر:', price);
        calculateItemTotal(priceInput);
    }
}

/**
 * حساب إجمالي العنصر
 */
function calculateItemTotal(input) {
    console.log('🧮 حساب إجمالي العنصر...');

    const row = input.closest('tr');
    const quantity = parseFloat(row.querySelector('.item-quantity')?.value) || 0;
    const unitPrice = parseFloat(row.querySelector('.item-price')?.value) || 0;
    const discountPercent = parseFloat(row.querySelector('.item-discount')?.value) || 0;

    const subtotal = quantity * unitPrice;
    const discountAmount = subtotal * (discountPercent / 100);
    const total = subtotal - discountAmount;

    const totalElement = row.querySelector('.item-total');
    if (totalElement) {
        totalElement.textContent = `${total.toFixed(2)} ل.س`;
    }

    console.log('✅ تم حساب المجموع:', { quantity, unitPrice, discountPercent, total });
    calculateInvoiceTotals();
}

/**
 * حساب إجماليات الفاتورة
 */
function calculateInvoiceTotals() {
    console.log('💰 حساب إجماليات الفاتورة بدقة محسنة...');

    // جمع مجاميع العناصر باستخدام حسابات دقيقة
    const itemRows = document.querySelectorAll('#invoiceItemsTable tr');
    let subtotalItems = [];

    itemRows.forEach(row => {
        const quantity = parseFloat(row.querySelector('.item-quantity')?.value) || 0;
        const unitPrice = parseFloat(row.querySelector('.item-price')?.value) || 0;
        const discountPercent = parseFloat(row.querySelector('.item-discount')?.value) || 0;

        // حساب دقيق لكل عنصر
        const itemSubtotal = preciseMultiply(quantity, unitPrice);
        const itemDiscountAmount = calculateDiscount(itemSubtotal, discountPercent);
        const itemTotal = preciseSubtract(itemSubtotal, itemDiscountAmount);

        subtotalItems.push(itemTotal);

        // تحديث عرض المجموع للعنصر
        const itemTotalElement = row.querySelector('.item-total');
        if (itemTotalElement) {
            itemTotalElement.textContent = formatCurrency(itemTotal);
        }
    });

    // حساب المجموع الفرعي الإجمالي
    const subtotal = preciseAdd(...subtotalItems);

    // حساب الخصم العام والضريبة
    const discountPercent = parseFloat(document.getElementById('discountPercentage')?.value) || 0;
    const taxPercent = parseFloat(document.getElementById('taxPercentage')?.value) || 0;

    const discountAmount = calculateDiscount(subtotal, discountPercent);
    const taxableAmount = preciseSubtract(subtotal, discountAmount);
    const taxAmount = calculateTax(taxableAmount, taxPercent);
    const totalAmount = preciseAdd(taxableAmount, taxAmount);

    // تحديث العرض مع التنسيق المحسن
    const subtotalElement = document.getElementById('subtotalAmount');
    const discountAmountElement = document.getElementById('discountAmount');
    const taxAmountElement = document.getElementById('taxAmount');
    const totalAmountElement = document.getElementById('totalAmount');

    if (subtotalElement) subtotalElement.textContent = formatCurrency(subtotal);
    if (discountAmountElement) discountAmountElement.textContent = formatCurrency(discountAmount);
    if (taxAmountElement) taxAmountElement.textContent = formatCurrency(taxAmount);
    if (totalAmountElement) totalAmountElement.textContent = formatCurrency(totalAmount);

    // تحديث عرض العملة إذا كان متاحاً
    const currencySelect = document.getElementById('invoiceCurrency');
    if (currencySelect) {
        updateInvoiceCurrencyDisplay(currencySelect.value, getCurrencySymbol(currencySelect.value));
    }

    console.log('✅ تم حساب الإجماليات بدقة:', {
        subtotal: formatNumber(subtotal),
        discountAmount: formatNumber(discountAmount),
        taxAmount: formatNumber(taxAmount),
        totalAmount: formatNumber(totalAmount)
    });

    return {
        subtotal,
        discountAmount,
        taxAmount,
        totalAmount,
        itemsCount: subtotalItems.length
    };
}

/**
 * تهيئة أحداث الصفحة
 */
function initializePageEvents() {
    // إعادة تهيئة التلميحات
    const tooltips = document.querySelectorAll('[title]');
    tooltips.forEach(element => {
        element.setAttribute('data-bs-toggle', 'tooltip');
        new bootstrap.Tooltip(element);
    });

    // تعيين التاريخ الحالي للحقول
    const today = getCurrentDateForInput();
    const dateInputs = document.querySelectorAll('input[type="date"]');
    dateInputs.forEach(input => {
        if (!input.value && input.id.includes('Date') && !input.id.includes('due')) {
            input.value = today;
        }
    });
}

/**
 * وظائف مؤقتة للصفحات والعمليات
 */

// وظائف العملاء
function editCustomer(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('customers')) {
        alert('ليس لديك صلاحية لتعديل العملاء');
        return;
    }

    const customer = appData.customers.find(c => c.id === id);
    if (!customer) {
        alert('لم يتم العثور على العميل');
        return;
    }

    // إنشاء نافذة تعديل العميل
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editCustomerModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل العميل: ${customer.name}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editCustomerForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">اسم العميل *</label>
                                    <input type="text" class="form-control" id="editCustomerName" value="${customer.name}" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">رقم الهاتف</label>
                                    <input type="tel" class="form-control" id="editCustomerPhone" value="${customer.phone || ''}">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">البريد الإلكتروني</label>
                                    <input type="email" class="form-control" id="editCustomerEmail" value="${customer.email || ''}">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الرقم الضريبي</label>
                                    <input type="text" class="form-control" id="editCustomerTaxNumber" value="${customer.taxNumber || ''}">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">العنوان</label>
                            <textarea class="form-control" id="editCustomerAddress" rows="2">${customer.address || ''}</textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الحد الائتماني</label>
                                    <input type="number" class="form-control" id="editCustomerCreditLimit" value="${customer.creditLimit || 0}" min="0" step="0.01">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الرصيد الحالي</label>
                                    <input type="number" class="form-control" id="editCustomerBalance" value="${customer.currentBalance || 0}" step="0.01" readonly>
                                    <small class="form-text text-muted">يتم تحديث الرصيد تلقائياً من الفواتير والدفعات</small>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editCustomerNotes" rows="2">${customer.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="updateCustomer(${id})">حفظ التغييرات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function updateCustomer(id) {
    const customer = appData.customers.find(c => c.id === id);
    if (!customer) {
        alert('لم يتم العثور على العميل');
        return;
    }

    // جمع البيانات من النموذج
    const name = document.getElementById('editCustomerName').value.trim();
    const phone = document.getElementById('editCustomerPhone').value.trim();
    const email = document.getElementById('editCustomerEmail').value.trim();
    const taxNumber = document.getElementById('editCustomerTaxNumber').value.trim();
    const address = document.getElementById('editCustomerAddress').value.trim();
    const creditLimit = parseFloat(document.getElementById('editCustomerCreditLimit').value) || 0;
    const notes = document.getElementById('editCustomerNotes').value.trim();

    // التحقق من البيانات المطلوبة
    if (!name) {
        alert('يرجى إدخال اسم العميل');
        return;
    }

    // التحقق من عدم تكرار الاسم (إذا تم تغييره)
    if (name !== customer.name) {
        const existingCustomer = appData.customers.find(c => c.name === name && c.id !== id);
        if (existingCustomer) {
            alert('يوجد عميل آخر بنفس الاسم');
            return;
        }
    }

    // تحديث بيانات العميل
    customer.name = name;
    customer.phone = phone;
    customer.email = email;
    customer.taxNumber = taxNumber;
    customer.address = address;
    customer.creditLimit = creditLimit;
    customer.notes = notes;
    customer.updatedAt = new Date().toISOString().split('T')[0];

    // حفظ البيانات
    saveData();

    // إغلاق النافذة وتحديث الصفحة
    const modal = bootstrap.Modal.getInstance(document.getElementById('editCustomerModal'));
    modal.hide();

    alert('تم تحديث بيانات العميل بنجاح');
    showPage('customers'); // إعادة تحميل صفحة العملاء
}

function viewCustomerStatement(id) {
    showPage('customer-statement');
    // يمكن إضافة منطق لتحديد العميل تلقائياً
}

// وظائف الموردين
function editSupplier(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('suppliers')) {
        alert('ليس لديك صلاحية لتعديل الموردين');
        return;
    }

    const supplier = appData.suppliers.find(s => s.id === id);
    if (!supplier) {
        alert('لم يتم العثور على المورد');
        return;
    }

    // إنشاء نافذة تعديل المورد
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editSupplierModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل المورد: ${supplier.name}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editSupplierForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">اسم المورد *</label>
                                    <input type="text" class="form-control" id="editSupplierName" value="${supplier.name}" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">رقم الهاتف</label>
                                    <input type="tel" class="form-control" id="editSupplierPhone" value="${supplier.phone || ''}">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">البريد الإلكتروني</label>
                                    <input type="email" class="form-control" id="editSupplierEmail" value="${supplier.email || ''}">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الرقم الضريبي</label>
                                    <input type="text" class="form-control" id="editSupplierTaxNumber" value="${supplier.taxNumber || ''}">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">العنوان</label>
                            <textarea class="form-control" id="editSupplierAddress" rows="2">${supplier.address || ''}</textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الرصيد الحالي</label>
                                    <input type="number" class="form-control" id="editSupplierBalance" value="${supplier.currentBalance || 0}" step="0.01" readonly>
                                    <small class="form-text text-muted">يتم تحديث الرصيد تلقائياً من الفواتير والدفعات</small>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editSupplierNotes" rows="2">${supplier.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="updateSupplier(${id})">حفظ التغييرات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function updateSupplier(id) {
    const supplier = appData.suppliers.find(s => s.id === id);
    if (!supplier) {
        alert('لم يتم العثور على المورد');
        return;
    }

    // جمع البيانات من النموذج
    const name = document.getElementById('editSupplierName').value.trim();
    const phone = document.getElementById('editSupplierPhone').value.trim();
    const email = document.getElementById('editSupplierEmail').value.trim();
    const taxNumber = document.getElementById('editSupplierTaxNumber').value.trim();
    const address = document.getElementById('editSupplierAddress').value.trim();
    const notes = document.getElementById('editSupplierNotes').value.trim();

    // التحقق من البيانات المطلوبة
    if (!name) {
        alert('يرجى إدخال اسم المورد');
        return;
    }

    // التحقق من عدم تكرار الاسم (إذا تم تغييره)
    if (name !== supplier.name) {
        const existingSupplier = appData.suppliers.find(s => s.name === name && s.id !== id);
        if (existingSupplier) {
            alert('يوجد مورد آخر بنفس الاسم');
            return;
        }
    }

    // تحديث بيانات المورد
    supplier.name = name;
    supplier.phone = phone;
    supplier.email = email;
    supplier.taxNumber = taxNumber;
    supplier.address = address;
    supplier.notes = notes;
    supplier.updatedAt = new Date().toISOString().split('T')[0];

    // حفظ البيانات
    saveData();

    // إغلاق النافذة وتحديث الصفحة
    const modal = bootstrap.Modal.getInstance(document.getElementById('editSupplierModal'));
    modal.hide();

    alert('تم تحديث بيانات المورد بنجاح');
    showPage('suppliers'); // إعادة تحميل صفحة الموردين
}

function viewSupplierStatement(id) {
    showPage('supplier-statement');
    // يمكن إضافة منطق لتحديد المورد تلقائياً
}

function deleteSupplier(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('suppliers')) {
        alert('ليس لديك صلاحية لحذف الموردين');
        return;
    }

    const supplier = appData.suppliers.find(s => s.id === id);
    if (!supplier) return;

    if (confirm(`هل أنت متأكد من حذف المورد "${supplier.name}"؟`)) {
        // التحقق من وجود فواتير مرتبطة
        const hasInvoices = appData.invoices.some(inv => inv.supplierId === id);
        if (hasInvoices) {
            alert('لا يمكن حذف المورد لوجود فواتير مرتبطة به');
            return;
        }

        // التحقق من وجود دفعات مرتبطة
        const hasPayments = appData.payments.some(pay => pay.supplierId === id);
        if (hasPayments) {
            alert('لا يمكن حذف المورد لوجود دفعات مرتبطة به');
            return;
        }

        appData.suppliers = appData.suppliers.filter(s => s.id !== id);
        saveData();
        showPage('suppliers');
        alert('تم حذف المورد بنجاح');
    }
}

// وظائف الأصناف - محسنة
function editProduct(id) {
    console.log('✏️ فتح نافذة تعديل الصنف ID:', id);

    // التحقق من صحة المعرف
    if (!id || isNaN(id)) {
        showErrorToast('معرف الصنف غير صحيح');
        return;
    }

    // البحث عن الصنف
    const product = appData.products.find(p => p.id == id);
    if (!product) {
        showErrorToast('لم يتم العثور على الصنف المطلوب');
        return;
    }

    // التحقق من حالة الصنف
    if (product.isActive === false) {
        showWarningToast('هذا الصنف محذوف - لا يمكن تعديله');
        return;
    }

    // التحقق من وجود المخازن
    if (!appData.warehouses || appData.warehouses.length === 0) {
        showErrorToast('لا توجد مخازن متاحة - يرجى إضافة مخزن أولاً');
        return;
    }

    try {
        // إزالة أي نافذة تعديل موجودة مسبقاً
        const existingModal = document.getElementById('editProductModal');
        if (existingModal) {
            existingModal.remove();
        }

        // إنشاء نافذة تعديل الصنف مع معالجة محسنة للأخطاء
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'editProductModal';
        modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل الصنف: ${product.name}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">كود الصنف *</label>
                                    <input type="text" class="form-control" id="editProductCode" value="${product.code}" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">اسم الصنف *</label>
                                    <input type="text" class="form-control" id="editProductName" value="${product.name}" required>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">الوصف</label>
                            <textarea class="form-control" id="editProductDescription" rows="2">${product.description || ''}</textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">الوحدة</label>
                                    <input type="text" class="form-control" id="editProductUnit" value="${product.unit || 'قطعة'}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">الفئة</label>
                                    <input type="text" class="form-control" id="editProductCategory" value="${product.category || ''}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">المخزن</label>
                                    <select class="form-select" id="editProductWarehouse" required>
                                        ${appData.warehouses.map(w => `
                                            <option value="${w.id}" ${w.id === product.warehouseId ? 'selected' : ''}>${w.name}</option>
                                        `).join('')}
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">سعر التكلفة</label>
                                    <input type="number" class="form-control" id="editProductCostPrice" value="${product.costPrice || 0}" min="0" step="0.01">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">سعر البيع</label>
                                    <input type="number" class="form-control" id="editProductSellingPrice" value="${product.sellingPrice || 0}" min="0" step="0.01">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الكمية الحالية</label>
                                    <input type="number" class="form-control" id="editProductQuantity" value="${product.quantity || 0}" min="0" step="0.01">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الحد الأدنى</label>
                                    <input type="number" class="form-control" id="editProductMinQuantity" value="${product.minQuantity || 0}" min="0" step="0.01">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">الباركود</label>
                            <input type="text" class="form-control" id="editProductBarcode" value="${product.barcode || ''}">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="updateProduct(${id})">حفظ التغييرات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

        // إزالة النافذة عند الإغلاق مع معالجة الأخطاء
        modal.addEventListener('hidden.bs.modal', function() {
            try {
                if (document.body.contains(modal)) {
                    document.body.removeChild(modal);
                }
            } catch (removeError) {
                console.error('❌ خطأ في إزالة النافذة:', removeError);
            }
        });

        console.log('✅ تم فتح نافذة تعديل الصنف بنجاح');

    } catch (error) {
        console.error('❌ خطأ في إنشاء نافذة تعديل الصنف:', error);
        showErrorToast('حدث خطأ في فتح نافذة التعديل: ' + error.message);

        // تنظيف أي عناصر متبقية
        const existingModal = document.getElementById('editProductModal');
        if (existingModal) {
            try {
                existingModal.remove();
            } catch (cleanupError) {
                console.error('❌ خطأ في تنظيف النافذة:', cleanupError);
            }
        }
    }
}

function updateProduct(id) {
    console.log('💾 تحديث بيانات الصنف ID:', id);

    // التحقق من صحة المعرف
    if (!id || (typeof id !== 'number' && isNaN(parseInt(id)))) {
        showErrorToast('معرف الصنف غير صحيح');
        console.error('❌ معرف الصنف غير صحيح:', id);
        return;
    }

    // التحقق من وجود البيانات الأساسية
    if (!appData || !appData.products || !Array.isArray(appData.products)) {
        showErrorToast('خطأ في البيانات الأساسية - يرجى إعادة تحميل الصفحة');
        console.error('❌ البيانات الأساسية غير متوفرة');
        return;
    }

    // التحقق من وجود الصنف
    const product = appData.products.find(p => p.id == id); // استخدام == للمقارنة المرنة
    if (!product) {
        showErrorToast('لم يتم العثور على الصنف المطلوب');
        console.error('❌ الصنف غير موجود، ID:', id);
        return;
    }

    // التحقق من وجود عناصر النموذج
    const codeElement = document.getElementById('editProductCode');
    const nameElement = document.getElementById('editProductName');
    const descriptionElement = document.getElementById('editProductDescription');
    const unitElement = document.getElementById('editProductUnit');
    const categoryElement = document.getElementById('editProductCategory');
    const warehouseElement = document.getElementById('editProductWarehouse');
    const costPriceElement = document.getElementById('editProductCostPrice');
    const sellingPriceElement = document.getElementById('editProductSellingPrice');
    const quantityElement = document.getElementById('editProductQuantity');
    const minQuantityElement = document.getElementById('editProductMinQuantity');
    const barcodeElement = document.getElementById('editProductBarcode');

    if (!codeElement || !nameElement || !warehouseElement) {
        showErrorToast('خطأ في النموذج - يرجى إعادة فتح نافذة التعديل');
        return;
    }

    // جمع البيانات من النموذج مع التحقق من الأمان
    const code = codeElement.value.trim();
    const name = nameElement.value.trim();
    const description = descriptionElement ? descriptionElement.value.trim() : '';
    const unit = unitElement ? unitElement.value.trim() : 'قطعة';
    const category = categoryElement ? categoryElement.value.trim() : '';
    const warehouseId = parseInt(warehouseElement.value);
    const costPrice = costPriceElement ? (parseFloat(costPriceElement.value) || 0) : 0;
    const sellingPrice = sellingPriceElement ? (parseFloat(sellingPriceElement.value) || 0) : 0;
    const quantity = quantityElement ? (parseFloat(quantityElement.value) || 0) : 0;
    const minQuantity = minQuantityElement ? (parseFloat(minQuantityElement.value) || 0) : 0;
    const barcode = barcodeElement ? barcodeElement.value.trim() : '';

    // التحقق من البيانات المطلوبة
    if (!code || !name) {
        showErrorToast('يرجى إدخال كود واسم الصنف');
        return;
    }

    if (!warehouseId || isNaN(warehouseId)) {
        showErrorToast('يرجى اختيار المخزن');
        return;
    }

    // التحقق من وجود المخزن
    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) {
        showErrorToast('المخزن المحدد غير موجود');
        return;
    }

    // التحقق من عدم تكرار الكود (إذا تم تغييره)
    if (code !== product.code) {
        const existingProduct = appData.products.find(p => p.code === code && p.id !== id);
        if (existingProduct) {
            showErrorToast('يوجد صنف آخر بنفس الكود: ' + code);
            return;
        }
    }

    // التحقق من صحة الأسعار
    if (costPrice < 0 || sellingPrice < 0) {
        showErrorToast('لا يمكن أن تكون الأسعار سالبة');
        return;
    }

    if (quantity < 0 || minQuantity < 0) {
        showErrorToast('لا يمكن أن تكون الكميات سالبة');
        return;
    }

    try {
        // حفظ البيانات القديمة للمقارنة
        const oldData = { ...product };

        // تحديث بيانات الصنف بأمان
        product.code = code;
        product.name = name;
        product.description = description;
        product.unit = unit || 'قطعة';
        product.category = category;
        product.warehouseId = warehouseId;
        product.costPrice = costPrice;
        product.sellingPrice = sellingPrice;
        product.quantity = quantity;
        product.minQuantity = minQuantity;
        product.barcode = barcode;
        product.updatedAt = new Date().toISOString();
        product.lastModified = new Date().toISOString();

        // إنشاء حركة مخزون إذا تغيرت الكمية
        if (oldData.quantity !== quantity) {
            const quantityDifference = quantity - oldData.quantity;
            const movementRecord = {
                id: generateId(),
                productId: id,
                warehouseId: warehouseId,
                movementType: 'adjustment',
                quantity: quantityDifference, // الفرق الفعلي (موجب أو سالب)
                unitPrice: costPrice,
                totalAmount: Math.abs(quantityDifference) * costPrice,
                date: new Date().toISOString().split('T')[0],
                movement_date: new Date().toISOString(),
                reference: `تعديل يدوي - تغيير من ${oldData.quantity} إلى ${quantity}`,
                notes: `تعديل الكمية من قائمة الأصناف - ${quantityDifference > 0 ? 'زيادة' : 'نقص'} ${Math.abs(quantityDifference)}`,
                userId: 'admin'
            };

            // إضافة الحركة إلى قائمة حركات المخزون
            if (!appData.inventoryMovements) {
                appData.inventoryMovements = [];
            }
            appData.inventoryMovements.push(movementRecord);

            console.log('📝 تم تسجيل حركة المخزون:', movementRecord);
        }

        // إنشاء سجل تغيير للتتبع
        const changeRecord = {
            id: generateId(),
            productId: id,
            changeDate: new Date().toISOString(),
            changeType: 'product_update',
            oldData: oldData,
            newData: {
                code, name, description, unit, category, warehouseId,
                costPrice, sellingPrice, quantity, minQuantity, barcode
            },
            userId: 'admin'
        };

        // إضافة السجل إلى قائمة التغييرات
        if (!appData.productChanges) {
            appData.productChanges = [];
        }
        appData.productChanges.push(changeRecord);

        // حفظ البيانات مع معالجة الأخطاء المحسنة
        try {
            saveData();
            console.log('✅ تم حفظ البيانات بنجاح');
        } catch (saveError) {
            console.error('❌ خطأ في حفظ البيانات:', saveError);

            // محاولة حفظ بديلة
            try {
                localStorage.setItem('sam_pro_data_backup', JSON.stringify(appData));
                console.log('💾 تم حفظ نسخة احتياطية');
                showWarningToast('تم الحفظ في النسخة الاحتياطية');
            } catch (backupError) {
                console.error('❌ فشل في حفظ النسخة الاحتياطية:', backupError);
                showErrorToast('فشل في حفظ البيانات - يرجى المحاولة مرة أخرى');
                return; // إيقاف العملية في حالة فشل الحفظ
            }
        }

        // إغلاق النافذة بأمان
        try {
            const modalElement = document.getElementById('editProductModal');
            if (modalElement) {
                const modal = bootstrap.Modal.getInstance(modalElement);
                if (modal) {
                    modal.hide();
                } else {
                    // إغلاق يدوي إذا فشل Bootstrap
                    modalElement.style.display = 'none';
                    modalElement.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    const backdrop = document.querySelector('.modal-backdrop');
                    if (backdrop) backdrop.remove();
                }
            }
        } catch (modalError) {
            console.error('❌ خطأ في إغلاق النافذة:', modalError);
        }

        // تحديث الصفحة مع معالجة الأخطاء
        try {
            updateProductsDisplay();
            console.log('✅ تم تحديث عرض الأصناف بنجاح');
        } catch (displayError) {
            console.error('❌ خطأ في تحديث العرض:', displayError);
            showWarningToast('تم حفظ التعديل ولكن حدث خطأ في تحديث العرض');
            // إعادة تحميل الصفحة كحل بديل
            setTimeout(() => {
                try {
                    showPage('products');
                } catch (pageError) {
                    console.error('❌ خطأ في إعادة تحميل الصفحة:', pageError);
                    location.reload(); // إعادة تحميل كامل للصفحة
                }
            }, 1000);
        }

        // إظهار رسالة نجاح مع تفاصيل التغيير
        const changes = [];
        if (oldData.name !== name) changes.push(`الاسم: ${oldData.name} → ${name}`);
        if (oldData.code !== code) changes.push(`الكود: ${oldData.code} → ${code}`);
        if (oldData.quantity !== quantity) changes.push(`الكمية: ${oldData.quantity} → ${quantity}`);
        if (oldData.costPrice !== costPrice) changes.push(`سعر التكلفة: ${oldData.costPrice} → ${costPrice}`);
        if (oldData.sellingPrice !== sellingPrice) changes.push(`سعر البيع: ${oldData.sellingPrice} → ${sellingPrice}`);
        if (oldData.warehouseId !== warehouseId) {
            const oldWarehouse = appData.warehouses.find(w => w.id === oldData.warehouseId);
            const newWarehouse = appData.warehouses.find(w => w.id === warehouseId);
            changes.push(`المخزن: ${oldWarehouse?.name || 'غير محدد'} → ${newWarehouse?.name || 'غير محدد'}`);
        }

        let successMessage = 'تم تحديث بيانات الصنف بنجاح!';
        if (changes.length > 0) {
            console.log('📋 التغييرات المطبقة:', changes);
        }

        showSuccessToast('تم تحديث الصنف بنجاح!');
        console.log('✅ تم تحديث الصنف:', product.name);

    } catch (error) {
        console.error('❌ خطأ في تحديث الصنف:', error);
        showErrorToast('حدث خطأ أثناء تحديث الصنف: ' + error.message);

        // محاولة استعادة البيانات من النسخة الاحتياطية
        try {
            const backupData = localStorage.getItem('sam_pro_data_backup');
            if (backupData) {
                console.log('🔄 محاولة استعادة البيانات من النسخة الاحتياطية...');
                // يمكن إضافة منطق الاستعادة هنا إذا لزم الأمر
            }
        } catch (restoreError) {
            console.error('❌ فشل في استعادة النسخة الاحتياطية:', restoreError);
        }
    }
}

/**
 * تحديث عرض الأصناف دون إعادة تحميل كامل للصفحة - محسن
 */
function updateProductsDisplay() {
    console.log('🔄 تحديث عرض الأصناف...');

    try {
        // التحقق من وجود البيانات الأساسية
        if (!appData || !appData.products) {
            console.error('❌ البيانات الأساسية غير متوفرة');
            showErrorToast('خطأ في البيانات - سيتم إعادة تحميل الصفحة');
            setTimeout(() => showPage('products'), 1000);
            return;
        }

        // تحديث جدول الأصناف إذا كان موجوداً
        const productsTableBody = document.querySelector('#productsTable tbody');
        if (productsTableBody) {
            try {
                // التحقق من وجود وظيفة getProductsTableRows
                if (typeof getProductsTableRows !== 'function') {
                    console.error('❌ وظيفة getProductsTableRows غير موجودة');
                    productsTableBody.innerHTML = '<tr><td colspan="9" class="text-center text-warning">خطأ في وظيفة العرض - سيتم إعادة تحميل الصفحة</td></tr>';
                    setTimeout(() => showPage('products'), 2000);
                    return;
                }

                const productsRows = getProductsTableRows();
                if (productsRows && productsRows.trim() !== '') {
                    productsTableBody.innerHTML = productsRows;
                    console.log('✅ تم تحديث جدول الأصناف');
                } else {
                    console.warn('⚠️ لم يتم إنشاء صفوف الجدول');
                    productsTableBody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">لا توجد أصناف للعرض</td></tr>';
                }
            } catch (tableError) {
                console.error('❌ خطأ في تحديث جدول الأصناف:', tableError);
                productsTableBody.innerHTML = '<tr><td colspan="9" class="text-center text-danger">خطأ في تحميل البيانات - يرجى إعادة تحميل الصفحة</td></tr>';
                showErrorToast('خطأ في تحديث جدول الأصناف');
            }
        } else {
            console.warn('⚠️ لم يتم العثور على جدول الأصناف في الصفحة');
        }

        // تحديث إحصائيات الأصناف مع معالجة الأخطاء
        try {
            const activeProducts = appData.products.filter(p => p.isActive !== false);

            // إجمالي الأصناف
            const totalProductsElement = document.getElementById('totalProducts');
            if (totalProductsElement) {
                totalProductsElement.textContent = activeProducts.length;
            }

            // الأصناف منخفضة المخزون
            const lowStockProductsElement = document.getElementById('lowStockProducts');
            if (lowStockProductsElement) {
                const lowStockCount = activeProducts.filter(p =>
                    (p.quantity || 0) <= (p.minQuantity || 0) &&
                    (p.minQuantity || 0) > 0
                ).length;
                lowStockProductsElement.textContent = lowStockCount;
            }

            // إجمالي قيمة المخزون
            const totalValueElement = document.getElementById('totalValue');
            if (totalValueElement) {
                const totalValue = activeProducts.reduce((sum, p) => {
                    const quantity = parseFloat(p.quantity) || 0;
                    const costPrice = parseFloat(p.costPrice) || 0;
                    return sum + (quantity * costPrice);
                }, 0);
                totalValueElement.textContent = formatCurrency(totalValue);
            }

            console.log('✅ تم تحديث إحصائيات الأصناف');

        } catch (statsError) {
            console.error('❌ خطأ في تحديث الإحصائيات:', statsError);
            showWarningToast('تم تحديث الجدول ولكن حدث خطأ في الإحصائيات');
        }

        // تحديث عدادات أخرى إذا كانت موجودة
        try {
            // تحديث عداد الأصناف في الشريط الجانبي
            const sidebarProductsCount = document.querySelector('.sidebar .products-count');
            if (sidebarProductsCount) {
                sidebarProductsCount.textContent = appData.products.filter(p => p.isActive !== false).length;
            }

            // تحديث أي عدادات أخرى
            const allProductCounters = document.querySelectorAll('[data-counter="products"]');
            allProductCounters.forEach(counter => {
                counter.textContent = appData.products.filter(p => p.isActive !== false).length;
            });

        } catch (countersError) {
            console.warn('⚠️ خطأ في تحديث العدادات الإضافية:', countersError);
        }

        console.log('✅ تم تحديث عرض الأصناف بنجاح');

    } catch (error) {
        console.error('❌ خطأ عام في تحديث عرض الأصناف:', error);
        showErrorToast('حدث خطأ في تحديث العرض - سيتم إعادة تحميل الصفحة');

        // محاولة إعادة تحميل الصفحة بعد تأخير قصير
        setTimeout(() => {
            try {
                showPage('products');
            } catch (reloadError) {
                console.error('❌ فشل في إعادة تحميل الصفحة:', reloadError);
                location.reload(); // إعادة تحميل كامل للصفحة كحل أخير
            }
        }, 2000);
    }
}

/**
 * عرض حركة صنف مفصلة
 */
function viewProductMovements(productId) {
    console.log(`📊 عرض حركة الصنف المفصلة ID: ${productId}`);

    const product = appData.products.find(p => p.id === productId);
    if (!product) {
        alert('الصنف غير موجود');
        return;
    }

    // الحصول على جميع حركات هذا الصنف
    const productMovements = (appData.inventoryMovements || []).filter(m => m.productId === productId);

    // ترتيب الحركات حسب التاريخ (الأحدث أولاً)
    productMovements.sort((a, b) => new Date(b.date) - new Date(a.date));

    // إنشاء نافذة منبثقة لعرض التفاصيل
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'productMovementsModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-chart-line me-2"></i>
                        حركة الصنف المفصلة: ${product.name}
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- معلومات الصنف -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                معلومات الصنف
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>الكود:</strong> ${product.code}
                                </div>
                                <div class="col-md-3">
                                    <strong>الوحدة:</strong> ${product.unit}
                                </div>
                                <div class="col-md-3">
                                    <strong>الكمية الحالية:</strong>
                                    <span class="badge bg-${product.quantity <= product.minQuantity ? 'danger' : 'success'}">
                                        ${product.quantity} ${product.unit}
                                    </span>
                                </div>
                                <div class="col-md-3">
                                    <strong>الحد الأدنى:</strong> ${product.minQuantity} ${product.unit}
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-md-4">
                                    <strong>سعر التكلفة:</strong> ${formatCurrency(product.costPrice)}
                                </div>
                                <div class="col-md-4">
                                    <strong>سعر البيع:</strong> ${formatCurrency(product.sellingPrice)}
                                </div>
                                <div class="col-md-4">
                                    <strong>إجمالي الحركات:</strong>
                                    <span class="badge bg-info">${productMovements.length}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- إحصائيات الحركة -->
                    ${generateMovementStats(productMovements)}

                    <!-- جدول الحركات -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-list me-2"></i>
                                تفاصيل الحركات
                            </h6>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-success" onclick="exportProductMovementsToExcel(${productId})">
                                    <i class="fas fa-file-excel me-1"></i>
                                    Excel
                                </button>
                                <button class="btn btn-sm btn-outline-primary" onclick="printProductMovements(${productId})">
                                    <i class="fas fa-print me-1"></i>
                                    طباعة
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>التاريخ</th>
                                            <th>نوع الحركة</th>
                                            <th>المخزن</th>
                                            <th>الكمية</th>
                                            <th>سعر الوحدة</th>
                                            <th>إجمالي القيمة</th>
                                            <th>المرجع</th>
                                            <th>الملاحظات</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${generateProductMovementsRows(productMovements)}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * إنشاء إحصائيات حركة الصنف
 */
function generateMovementStats(movements) {
    if (movements.length === 0) {
        return `
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                لا توجد حركات لهذا الصنف
            </div>
        `;
    }

    // حساب الإحصائيات
    let totalIn = 0, totalOut = 0, totalValue = 0;
    const movementTypes = {};
    const monthlyStats = {};

    movements.forEach(movement => {
        const quantity = parseFloat(movement.quantity) || 0;
        const unitPrice = parseFloat(movement.unitPrice) || 0;
        const value = quantity * unitPrice;

        if (movement.movementType === 'in') {
            totalIn += quantity;
        } else if (movement.movementType === 'out') {
            totalOut += quantity;
        }

        totalValue += value;

        // إحصائيات أنواع الحركات
        if (!movementTypes[movement.movementType]) {
            movementTypes[movement.movementType] = { count: 0, quantity: 0, value: 0 };
        }
        movementTypes[movement.movementType].count++;
        movementTypes[movement.movementType].quantity += quantity;
        movementTypes[movement.movementType].value += value;

        // إحصائيات شهرية
        const month = movement.date.substring(0, 7); // YYYY-MM
        if (!monthlyStats[month]) {
            monthlyStats[month] = { in: 0, out: 0, value: 0 };
        }
        if (movement.movementType === 'in') {
            monthlyStats[month].in += quantity;
        } else if (movement.movementType === 'out') {
            monthlyStats[month].out += quantity;
        }
        monthlyStats[month].value += value;
    });

    const netMovement = totalIn - totalOut;
    const typeNames = {
        'in': 'إدخال',
        'out': 'إخراج',
        'transfer': 'تحويل',
        'adjustment': 'تسوية'
    };

    return `
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-up fa-2x mb-2"></i>
                        <h5>${totalIn}</h5>
                        <small>إجمالي الإدخال</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-arrow-down fa-2x mb-2"></i>
                        <h5>${totalOut}</h5>
                        <small>إجمالي الإخراج</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-${netMovement >= 0 ? 'info' : 'warning'} text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-balance-scale fa-2x mb-2"></i>
                        <h5>${netMovement}</h5>
                        <small>صافي الحركة</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-dollar-sign fa-2x mb-2"></i>
                        <h5>${formatCurrency(totalValue)}</h5>
                        <small>إجمالي القيمة</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-chart-pie me-2"></i>
                    إحصائيات أنواع الحركات
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    ${Object.keys(movementTypes).map(type => `
                        <div class="col-md-6 mb-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <span><strong>${typeNames[type] || type}:</strong></span>
                                <span>
                                    ${movementTypes[type].count} حركة |
                                    ${movementTypes[type].quantity} وحدة |
                                    ${formatCurrency(movementTypes[type].value)}
                                </span>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
    `;
}

/**
 * إنشاء صفوف جدول حركات الصنف
 */
function generateProductMovementsRows(movements) {
    if (movements.length === 0) {
        return '<tr><td colspan="8" class="text-center text-muted">لا توجد حركات لهذا الصنف</td></tr>';
    }

    const typeText = {
        'in': 'إدخال',
        'out': 'إخراج',
        'transfer': 'تحويل',
        'adjustment': 'تسوية'
    };

    const typeColor = {
        'in': 'success',
        'out': 'danger',
        'transfer': 'info',
        'adjustment': 'warning'
    };

    return movements.map(movement => {
        const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
        const quantity = parseFloat(movement.quantity) || 0;
        const unitPrice = parseFloat(movement.unitPrice) || 0;
        const totalValue = quantity * unitPrice;

        return `
            <tr>
                <td>${formatDateTime(movement.date)}</td>
                <td>
                    <span class="badge bg-${typeColor[movement.movementType] || 'secondary'}">
                        ${typeText[movement.movementType] || movement.movementType}
                    </span>
                </td>
                <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                <td>
                    <span class="badge bg-${movement.movementType === 'in' ? 'success' : 'danger'}">
                        ${movement.movementType === 'in' ? '+' : '-'}${quantity}
                    </span>
                </td>
                <td>${formatCurrency(unitPrice)}</td>
                <td>${formatCurrency(totalValue)}</td>
                <td>${movement.reference || '-'}</td>
                <td>${movement.notes || '-'}</td>
            </tr>
        `;
    }).join('');
}

/**
 * تصدير حركات الصنف إلى Excel
 */
function exportProductMovementsToExcel(productId) {
    console.log(`📊 تصدير حركات الصنف إلى Excel: ${productId}`);

    const product = appData.products.find(p => p.id === productId);
    if (!product) {
        alert('الصنف غير موجود');
        return;
    }

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const movements = (appData.inventoryMovements || []).filter(m => m.productId === productId);
        movements.sort((a, b) => new Date(b.date) - new Date(a.date));

        // إنشاء البيانات للتصدير
        const data = [
            ['تقرير حركة الصنف المفصل'],
            [''],
            ['معلومات الصنف:'],
            ['الكود', product.code],
            ['الاسم', product.name],
            ['الوحدة', product.unit],
            ['الكمية الحالية', product.quantity],
            ['الحد الأدنى', product.minQuantity],
            ['سعر التكلفة', product.costPrice],
            ['سعر البيع', product.sellingPrice],
            [''],
            ['تفاصيل الحركات:'],
            ['التاريخ', 'نوع الحركة', 'المخزن', 'الكمية', 'سعر الوحدة', 'إجمالي القيمة', 'المرجع', 'الملاحظات']
        ];

        const typeText = {
            'in': 'إدخال',
            'out': 'إخراج',
            'transfer': 'تحويل',
            'adjustment': 'تسوية'
        };

        movements.forEach(movement => {
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
            const quantity = parseFloat(movement.quantity) || 0;
            const unitPrice = parseFloat(movement.unitPrice) || 0;
            const totalValue = quantity * unitPrice;

            data.push([
                movement.date,
                typeText[movement.movementType] || movement.movementType,
                warehouse ? warehouse.name : 'مخزن محذوف',
                quantity,
                unitPrice,
                totalValue,
                movement.reference || '',
                movement.notes || ''
            ]);
        });

        // إنشاء ورقة العمل
        const ws = XLSX.utils.aoa_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'حركة الصنف');

        // تصدير الملف
        const fileName = `حركة_الصنف_${product.code}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);

        console.log('✅ تم تصدير حركات الصنف إلى Excel بنجاح');
    } catch (error) {
        console.error('❌ خطأ في تصدير حركات الصنف:', error);
        alert('حدث خطأ أثناء تصدير البيانات');
    }
}

/**
 * طباعة حركات الصنف
 */
function printProductMovements(productId) {
    console.log(`🖨️ طباعة حركات الصنف: ${productId}`);

    const product = appData.products.find(p => p.id === productId);
    if (!product) {
        alert('الصنف غير موجود');
        return;
    }

    const movements = (appData.inventoryMovements || []).filter(m => m.productId === productId);
    movements.sort((a, b) => new Date(b.date) - new Date(a.date));

    // إنشاء محتوى الطباعة
    const printContent = generateProductMovementsPrintHTML(product, movements);

    // فتح نافذة طباعة
    const printWindow = window.open('', '_blank');
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();
}

/**
 * إنشاء HTML لطباعة حركات الصنف
 */
function generateProductMovementsPrintHTML(product, movements) {
    const settings = appData.settings || {};
    const currentDate = formatDateTime(new Date());

    // حساب الإحصائيات
    let totalIn = 0, totalOut = 0, totalValue = 0;
    movements.forEach(movement => {
        const quantity = parseFloat(movement.quantity) || 0;
        const unitPrice = parseFloat(movement.unitPrice) || 0;

        if (movement.movementType === 'in') {
            totalIn += quantity;
        } else if (movement.movementType === 'out') {
            totalOut += quantity;
        }

        totalValue += quantity * unitPrice;
    });

    const typeText = {
        'in': 'إدخال',
        'out': 'إخراج',
        'transfer': 'تحويل',
        'adjustment': 'تسوية'
    };

    return `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>تقرير حركة الصنف - ${product.name}</title>
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
                .company-info { margin-bottom: 20px; }
                .product-info { background: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .stats { display: flex; justify-content: space-around; margin-bottom: 20px; }
                .stat-card { text-align: center; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
                th { background-color: #f2f2f2; font-weight: bold; }
                .text-success { color: #28a745; }
                .text-danger { color: #dc3545; }
                .text-info { color: #17a2b8; }
                .text-warning { color: #ffc107; }
                .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
                @media print {
                    body { margin: 0; }
                    .no-print { display: none; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تقرير حركة الصنف المفصل</h1>
                <p><strong>${settings.companyName || 'اسم الشركة'}</strong></p>
                <p>تاريخ التقرير: ${currentDate}</p>
            </div>

            <div class="product-info">
                <h3>معلومات الصنف</h3>
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
                    <div><strong>الكود:</strong> ${product.code}</div>
                    <div><strong>الاسم:</strong> ${product.name}</div>
                    <div><strong>الوحدة:</strong> ${product.unit}</div>
                    <div><strong>الكمية الحالية:</strong> ${product.quantity} ${product.unit}</div>
                    <div><strong>الحد الأدنى:</strong> ${product.minQuantity} ${product.unit}</div>
                    <div><strong>سعر التكلفة:</strong> ${formatCurrency(product.costPrice)}</div>
                    <div><strong>سعر البيع:</strong> ${formatCurrency(product.sellingPrice)}</div>
                    <div><strong>عدد الحركات:</strong> ${movements.length}</div>
                </div>
            </div>

            <div class="stats">
                <div class="stat-card">
                    <h4 class="text-success">إجمالي الإدخال</h4>
                    <p>${totalIn} ${product.unit}</p>
                </div>
                <div class="stat-card">
                    <h4 class="text-danger">إجمالي الإخراج</h4>
                    <p>${totalOut} ${product.unit}</p>
                </div>
                <div class="stat-card">
                    <h4 class="text-info">صافي الحركة</h4>
                    <p>${totalIn - totalOut} ${product.unit}</p>
                </div>
                <div class="stat-card">
                    <h4 class="text-warning">إجمالي القيمة</h4>
                    <p>${formatCurrency(totalValue)}</p>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>التاريخ</th>
                        <th>نوع الحركة</th>
                        <th>المخزن</th>
                        <th>الكمية</th>
                        <th>سعر الوحدة</th>
                        <th>إجمالي القيمة</th>
                        <th>المرجع</th>
                        <th>الملاحظات</th>
                    </tr>
                </thead>
                <tbody>
                    ${movements.map(movement => {
                        const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
                        const quantity = parseFloat(movement.quantity) || 0;
                        const unitPrice = parseFloat(movement.unitPrice) || 0;
                        const totalValue = quantity * unitPrice;

                        return `
                            <tr>
                                <td>${movement.date}</td>
                                <td class="text-${movement.movementType === 'in' ? 'success' : 'danger'}">
                                    ${typeText[movement.movementType] || movement.movementType}
                                </td>
                                <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                                <td class="text-${movement.movementType === 'in' ? 'success' : 'danger'}">
                                    ${movement.movementType === 'in' ? '+' : '-'}${quantity}
                                </td>
                                <td>${formatCurrency(unitPrice)}</td>
                                <td>${formatCurrency(totalValue)}</td>
                                <td>${movement.reference || '-'}</td>
                                <td>${movement.notes || '-'}</td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>

            <div class="footer">
                <p>تم إنشاء هذا التقرير بواسطة ${settings.companyName || 'نظام SAM PRO'} - ${currentDate}</p>
            </div>
        </body>
        </html>
    `;
}

function deleteProduct(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('products')) {
        alert('ليس لديك صلاحية لحذف الأصناف');
        return;
    }

    // استخدام النافذة المتقدمة لحذف الصنف
    showProductDeletionDialog(id);
}

// وظائف المخازن
function editWarehouse(id) {
    console.log('✏️ تعديل المخزن ID:', id);

    const warehouse = appData.warehouses.find(w => w.id === id);
    if (!warehouse) {
        alert('لم يتم العثور على المخزن');
        return;
    }

    // حساب إحصائيات المخزن
    const warehouseProducts = appData.products.filter(p => p.warehouseId === id && p.isActive !== false);
    const totalProducts = warehouseProducts.length;
    const totalValue = warehouseProducts.reduce((sum, p) => sum + ((p.quantity || 0) * (p.costPrice || 0)), 0);
    const lowStockProducts = warehouseProducts.filter(p => (p.quantity || 0) <= (p.minQuantity || 0)).length;

    // إنشاء نافذة تعديل المخزن المحسنة
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editWarehouseModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-warehouse me-2"></i>
                        تعديل المخزن: ${warehouse.name}
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- إحصائيات المخزن -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-boxes fa-2x mb-2"></i>
                                    <h5>${totalProducts}</h5>
                                    <small>إجمالي الأصناف</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-dollar-sign fa-2x mb-2"></i>
                                    <h6>${formatCurrency(totalValue)}</h6>
                                    <small>قيمة المخزون</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                                    <h5>${lowStockProducts}</h5>
                                    <small>أصناف منخفضة</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-secondary text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-calendar fa-2x mb-2"></i>
                                    <h6>${warehouse.createdAt || 'غير محدد'}</h6>
                                    <small>تاريخ الإنشاء</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- نموذج التعديل -->
                    <form id="editWarehouseForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">اسم المخزن <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editWarehouseName" value="${warehouse.name}" required>
                                <div class="form-text">يجب أن يكون الاسم فريداً</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">كود المخزن</label>
                                <input type="text" class="form-control" id="editWarehouseCode" value="${warehouse.code || ''}" placeholder="كود اختياري">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">الموقع</label>
                                <input type="text" class="form-control" id="editWarehouseLocation" value="${warehouse.location || ''}" placeholder="عنوان المخزن">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">المدينة</label>
                                <input type="text" class="form-control" id="editWarehouseCity" value="${warehouse.city || ''}" placeholder="المدينة">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">المدير</label>
                                <input type="text" class="form-control" id="editWarehouseManager" value="${warehouse.manager || ''}" placeholder="اسم مدير المخزن">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">رقم الهاتف</label>
                                <input type="tel" class="form-control" id="editWarehousePhone" value="${warehouse.phone || ''}" placeholder="رقم الهاتف">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">السعة القصوى</label>
                                <input type="number" class="form-control" id="editWarehouseCapacity" value="${warehouse.maxCapacity || ''}" min="0" placeholder="عدد الأصناف القصوى">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">الحالة</label>
                                <select class="form-select" id="editWarehouseStatus">
                                    <option value="true" ${warehouse.isActive !== false ? 'selected' : ''}>نشط</option>
                                    <option value="false" ${warehouse.isActive === false ? 'selected' : ''}>غير نشط</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editWarehouseNotes" rows="3" placeholder="ملاحظات إضافية">${warehouse.notes || ''}</textarea>
                        </div>

                        <!-- تحذير عند تغيير الحالة -->
                        <div class="alert alert-warning" id="statusWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>تحذير:</strong> تعطيل المخزن سيؤثر على جميع الأصناف المرتبطة به (${totalProducts} صنف).
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                    <button type="button" class="btn btn-info" onclick="showWarehouseProductMovements(${id})">
                        <i class="fas fa-chart-line me-2"></i>حركة الأصناف
                    </button>
                    <button type="button" class="btn btn-primary" onclick="updateWarehouse(${id})">
                        <i class="fas fa-save me-2"></i>حفظ التغييرات
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إضافة مستمع لتغيير الحالة
    document.getElementById('editWarehouseStatus').addEventListener('change', function() {
        const warning = document.getElementById('statusWarning');
        if (this.value === 'false' && totalProducts > 0) {
            warning.style.display = 'block';
        } else {
            warning.style.display = 'none';
        }
    });

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function updateWarehouse(id) {
    console.log('💾 تحديث بيانات المخزن ID:', id);

    const warehouse = appData.warehouses.find(w => w.id === id);
    if (!warehouse) {
        alert('لم يتم العثور على المخزن');
        return;
    }

    // جمع البيانات من النموذج المحسن
    const name = document.getElementById('editWarehouseName').value.trim();
    const code = document.getElementById('editWarehouseCode').value.trim();
    const location = document.getElementById('editWarehouseLocation').value.trim();
    const city = document.getElementById('editWarehouseCity').value.trim();
    const manager = document.getElementById('editWarehouseManager').value.trim();
    const phone = document.getElementById('editWarehousePhone').value.trim();
    const maxCapacity = parseInt(document.getElementById('editWarehouseCapacity').value) || null;
    const isActive = document.getElementById('editWarehouseStatus').value === 'true';
    const notes = document.getElementById('editWarehouseNotes').value.trim();

    // التحقق من البيانات المطلوبة
    if (!name) {
        alert('يرجى إدخال اسم المخزن');
        return;
    }

    // التحقق من عدم تكرار الاسم (إذا تم تغييره)
    if (name !== warehouse.name) {
        const existingWarehouse = appData.warehouses.find(w => w.name === name && w.id !== id);
        if (existingWarehouse) {
            alert('يوجد مخزن آخر بنفس الاسم');
            return;
        }
    }

    // التحقق من عدم تكرار الكود (إذا تم إدخاله)
    if (code && code !== warehouse.code) {
        const existingCode = appData.warehouses.find(w => w.code === code && w.id !== id);
        if (existingCode) {
            alert('يوجد مخزن آخر بنفس الكود');
            return;
        }
    }

    // التحقق من السعة القصوى
    const currentProductsCount = appData.products.filter(p => p.warehouseId === id && p.isActive !== false).length;
    if (maxCapacity && maxCapacity < currentProductsCount) {
        if (!confirm(`السعة القصوى المحددة (${maxCapacity}) أقل من عدد الأصناف الحالية (${currentProductsCount}). هل تريد المتابعة؟`)) {
            return;
        }
    }

    // التحقق من تأثير تعطيل المخزن
    if (!isActive && warehouse.isActive !== false && currentProductsCount > 0) {
        if (!confirm(`تعطيل هذا المخزن سيؤثر على ${currentProductsCount} صنف. هل تريد المتابعة؟`)) {
            return;
        }
    }

    try {
        // حفظ البيانات القديمة للتراجع في حالة الخطأ
        const oldData = { ...warehouse };

        // تحديث بيانات المخزن
        warehouse.name = name;
        warehouse.code = code;
        warehouse.location = location;
        warehouse.city = city;
        warehouse.manager = manager;
        warehouse.phone = phone;
        warehouse.maxCapacity = maxCapacity;
        warehouse.isActive = isActive;
        warehouse.notes = notes;
        warehouse.updatedAt = new Date().toISOString();

        // إذا تم تعطيل المخزن، تعطيل جميع الأصناف المرتبطة به
        if (!isActive && oldData.isActive !== false) {
            const warehouseProducts = appData.products.filter(p => p.warehouseId === id);
            warehouseProducts.forEach(product => {
                product.isActive = false;
                product.updatedAt = new Date().toISOString();
            });

            console.log(`⚠️ تم تعطيل ${warehouseProducts.length} صنف مرتبط بالمخزن`);
        }

        // إذا تم تفعيل المخزن، تفعيل جميع الأصناف المرتبطة به
        if (isActive && oldData.isActive === false) {
            const warehouseProducts = appData.products.filter(p => p.warehouseId === id);
            warehouseProducts.forEach(product => {
                product.isActive = true;
                product.updatedAt = new Date().toISOString();
            });

            console.log(`✅ تم تفعيل ${warehouseProducts.length} صنف مرتبط بالمخزن`);
        }

        // حفظ البيانات
        saveData();

        // إغلاق النافذة وتحديث الصفحة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editWarehouseModal'));
        modal.hide();

        // إعادة تحميل صفحة المخازن
        showPage('warehouses');

        alert('تم تحديث بيانات المخزن بنجاح');
        console.log('✅ تم تحديث المخزن:', warehouse.name);

    } catch (error) {
        console.error('❌ خطأ في تحديث المخزن:', error);
        alert('حدث خطأ أثناء تحديث المخزن: ' + error.message);
    }
}

function deleteWarehouse(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('warehouses')) {
        alert('ليس لديك صلاحية لحذف المخازن');
        return;
    }

    // استخدام النافذة المتقدمة لحذف المخزن
    showWarehouseDeletionDialog(id);
}

/**
 * الحصول على اسم المخزن
 */
function getWarehouseName(warehouseId) {
    const warehouse = appData.warehouses ? appData.warehouses.find(w => w.id === warehouseId) : null;
    return warehouse ? warehouse.name : 'مخزن غير محدد';
}

/**
 * إعادة حساب إجماليات الفاتورة
 */
function recalculateInvoiceTotals(invoice) {
    if (!invoice || !invoice.items) return;

    // حساب المجموع الفرعي
    invoice.subtotal = invoice.items.reduce((sum, item) => sum + (item.totalAmount || 0), 0);

    // حساب الخصم
    const discountAmount = invoice.subtotal * ((invoice.discountRate || 0) / 100);
    invoice.discountAmount = discountAmount;

    // حساب الضريبة
    const taxableAmount = invoice.subtotal - discountAmount;
    const taxAmount = taxableAmount * ((invoice.taxRate || 0) / 100);
    invoice.taxAmount = taxAmount;

    // المجموع النهائي
    invoice.totalAmount = taxableAmount + taxAmount;
    invoice.remainingAmount = invoice.totalAmount - (invoice.paidAmount || 0);

    console.log(`🔄 تم إعادة حساب إجماليات الفاتورة ${invoice.invoiceNumber}:`, {
        subtotal: invoice.subtotal,
        discountAmount: invoice.discountAmount,
        taxAmount: invoice.taxAmount,
        totalAmount: invoice.totalAmount
    });
}

/**
 * التحقق من الصلاحيات
 */
function hasPermission(permission) {
    // في النسخة الحالية، جميع المستخدمين لديهم جميع الصلاحيات
    // يمكن تطوير هذه الوظيفة لاحقاً لإدارة الصلاحيات
    return true;
}

/**
 * نقل صنف إلى مخزن آخر
 */
function transferProductToWarehouse(productId, newWarehouseId) {
    const product = appData.products.find(p => p.id === productId);
    const newWarehouse = appData.warehouses.find(w => w.id === newWarehouseId);

    if (!product || !newWarehouse) {
        alert('خطأ: لم يتم العثور على الصنف أو المخزن المطلوب');
        return false;
    }

    const oldWarehouse = appData.warehouses.find(w => w.id === product.warehouseId);
    const oldWarehouseName = oldWarehouse ? oldWarehouse.name : 'مخزن غير محدد';

    // تحديث مخزن الصنف
    product.warehouseId = newWarehouseId;

    // إضافة حركة مخزون للنقل
    const transferMovement = {
        id: Date.now(),
        movementType: 'transfer',
        movementDate: new Date().toISOString().split('T')[0],
        productId: productId,
        warehouseId: newWarehouseId,
        fromWarehouseId: oldWarehouse ? oldWarehouse.id : null,
        quantity: product.quantity,
        unitCost: product.costPrice || 0,
        totalCost: (product.quantity || 0) * (product.costPrice || 0),
        referenceType: 'transfer',
        referenceNumber: `TRANS-${Date.now()}`,
        notes: `نقل من ${oldWarehouseName} إلى ${newWarehouse.name}`,
        createdAt: new Date().toISOString()
    };

    if (!appData.inventoryMovements) {
        appData.inventoryMovements = [];
    }
    appData.inventoryMovements.push(transferMovement);

    console.log(`📦 تم نقل الصنف "${product.name}" من "${oldWarehouseName}" إلى "${newWarehouse.name}"`);
    return true;
}

/**
 * حذف آمن للصنف مع خيارات متقدمة
 */
function safeDeleteProduct(productId, options = {}) {
    const product = appData.products.find(p => p.id === productId);
    if (!product) return false;

    const {
        forceDelete = false,
        transferToWarehouse = null,
        removeFromInvoices = false,
        removeMovements = false
    } = options;

    try {
        // التحقق من الارتباطات
        const relatedInvoices = appData.invoices ? appData.invoices.filter(inv =>
            inv.items && inv.items.some(item => item.productId === productId)
        ) : [];

        const relatedMovements = appData.inventoryMovements ?
            appData.inventoryMovements.filter(mov => mov.productId === productId) : [];

        if (!forceDelete && (relatedInvoices.length > 0 || relatedMovements.length > 0)) {
            return {
                success: false,
                message: 'يوجد ارتباطات مع الصنف',
                relatedInvoices: relatedInvoices.length,
                relatedMovements: relatedMovements.length
            };
        }

        // إزالة من الفواتير إذا طُلب ذلك
        if (removeFromInvoices && relatedInvoices.length > 0) {
            relatedInvoices.forEach(invoice => {
                invoice.items = invoice.items.filter(item => item.productId !== productId);
                recalculateInvoiceTotals(invoice);
            });
        }

        // إزالة حركات المخزون إذا طُلب ذلك
        if (removeMovements && relatedMovements.length > 0) {
            appData.inventoryMovements = appData.inventoryMovements.filter(mov => mov.productId !== productId);
        }

        // حذف الصنف
        appData.products = appData.products.filter(p => p.id !== productId);

        return {
            success: true,
            message: 'تم حذف الصنف بنجاح',
            removedInvoiceItems: removeFromInvoices ? relatedInvoices.length : 0,
            removedMovements: removeMovements ? relatedMovements.length : 0
        };

    } catch (error) {
        console.error('خطأ في حذف الصنف:', error);
        return {
            success: false,
            message: 'حدث خطأ أثناء حذف الصنف'
        };
    }
}

/**
 * حذف آمن للمخزن مع خيارات متقدمة
 */
function safeDeleteWarehouse(warehouseId, options = {}) {
    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) return { success: false, message: 'لم يتم العثور على المخزن' };

    // التحقق من أنه ليس المخزن الوحيد
    if (appData.warehouses.length <= 1) {
        return { success: false, message: 'لا يمكن حذف المخزن الوحيد في النظام' };
    }

    const {
        transferToWarehouseId = null,
        forceDelete = false
    } = options;

    try {
        // العثور على الأصناف والحركات المرتبطة
        const relatedProducts = appData.products ? appData.products.filter(p => p.warehouseId === warehouseId) : [];
        const relatedMovements = appData.inventoryMovements ?
            appData.inventoryMovements.filter(mov => mov.warehouseId === warehouseId) : [];

        if (!forceDelete && relatedProducts.length > 0 && !transferToWarehouseId) {
            return {
                success: false,
                message: 'يوجد أصناف مرتبطة بالمخزن',
                relatedProducts: relatedProducts.length,
                relatedMovements: relatedMovements.length
            };
        }

        // نقل الأصناف إلى مخزن آخر
        if (relatedProducts.length > 0) {
            const targetWarehouseId = transferToWarehouseId || appData.warehouses.find(w => w.id !== warehouseId)?.id;

            if (!targetWarehouseId) {
                return { success: false, message: 'لا يوجد مخزن آخر لنقل الأصناف إليه' };
            }

            relatedProducts.forEach(product => {
                transferProductToWarehouse(product.id, targetWarehouseId);
            });
        }

        // تحديث حركات المخزون
        if (relatedMovements.length > 0) {
            const targetWarehouseId = transferToWarehouseId || appData.warehouses.find(w => w.id !== warehouseId)?.id;
            relatedMovements.forEach(movement => {
                movement.warehouseId = targetWarehouseId;
            });
        }

        // حذف المخزن
        appData.warehouses = appData.warehouses.filter(w => w.id !== warehouseId);

        return {
            success: true,
            message: 'تم حذف المخزن بنجاح',
            transferredProducts: relatedProducts.length,
            updatedMovements: relatedMovements.length
        };

    } catch (error) {
        console.error('خطأ في حذف المخزن:', error);
        return {
            success: false,
            message: 'حدث خطأ أثناء حذف المخزن'
        };
    }
}

/**
 * التحقق من إمكانية حذف المخزن
 */
function canDeleteWarehouse(warehouseId) {
    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) return { canDelete: false, reason: 'المخزن غير موجود' };

    if (appData.warehouses.length <= 1) {
        return { canDelete: false, reason: 'لا يمكن حذف المخزن الوحيد' };
    }

    const relatedProducts = appData.products ? appData.products.filter(p => p.warehouseId === warehouseId) : [];
    const relatedMovements = appData.inventoryMovements ?
        appData.inventoryMovements.filter(mov => mov.warehouseId === warehouseId) : [];

    return {
        canDelete: true,
        hasRelatedData: relatedProducts.length > 0 || relatedMovements.length > 0,
        relatedProducts: relatedProducts.length,
        relatedMovements: relatedMovements.length,
        alternativeWarehouses: appData.warehouses.filter(w => w.id !== warehouseId)
    };
}

/**
 * التحقق من إمكانية حذف الصنف
 */
function canDeleteProduct(productId) {
    const product = appData.products.find(p => p.id === productId);
    if (!product) return { canDelete: false, reason: 'الصنف غير موجود' };

    const relatedInvoices = appData.invoices ? appData.invoices.filter(inv =>
        inv.items && inv.items.some(item => item.productId === productId)
    ) : [];

    const relatedMovements = appData.inventoryMovements ?
        appData.inventoryMovements.filter(mov => mov.productId === productId) : [];

    return {
        canDelete: true,
        hasRelatedData: relatedInvoices.length > 0 || relatedMovements.length > 0,
        relatedInvoices: relatedInvoices.length,
        relatedMovements: relatedMovements.length,
        invoiceNumbers: relatedInvoices.map(inv => inv.invoiceNumber)
    };
}

/**
 * عرض نافذة تأكيد حذف المخزن مع خيارات متقدمة
 */
function showWarehouseDeletionDialog(warehouseId) {
    const checkResult = canDeleteWarehouse(warehouseId);

    if (!checkResult.canDelete) {
        alert(`❌ ${checkResult.reason}`);
        return;
    }

    const warehouse = appData.warehouses.find(w => w.id === warehouseId);

    if (!checkResult.hasRelatedData) {
        // حذف مباشر إذا لم توجد بيانات مرتبطة
        if (confirm(`هل أنت متأكد من حذف المخزن "${warehouse.name}"؟`)) {
            const result = safeDeleteWarehouse(warehouseId, { forceDelete: true });
            if (result.success) {
                saveData();
                showPage('warehouses');
                alert(result.message);
            } else {
                alert(`❌ ${result.message}`);
            }
        }
        return;
    }

    // إنشاء نافذة حذف متقدمة
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'deleteWarehouseModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        حذف المخزن: ${warehouse.name}
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>تحذير:</strong> يوجد بيانات مرتبطة بهذا المخزن
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="card border-primary">
                                <div class="card-body text-center">
                                    <i class="fas fa-boxes fa-2x text-primary mb-2"></i>
                                    <h6>الأصناف المرتبطة</h6>
                                    <span class="badge bg-primary fs-6">${checkResult.relatedProducts}</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-info">
                                <div class="card-body text-center">
                                    <i class="fas fa-exchange-alt fa-2x text-info mb-2"></i>
                                    <h6>حركات المخزون</h6>
                                    <span class="badge bg-info fs-6">${checkResult.relatedMovements}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fas fa-warehouse me-2"></i>
                            نقل البيانات إلى المخزن:
                        </label>
                        <select class="form-select" id="targetWarehouseSelect">
                            <option value="">اختر المخزن المستهدف</option>
                            ${checkResult.alternativeWarehouses.map(w =>
                                `<option value="${w.id}">${w.name} - ${w.location || 'بدون موقع'}</option>`
                            ).join('')}
                        </select>
                        <div class="form-text">
                            سيتم نقل جميع الأصناف وحركات المخزون إلى المخزن المحدد
                        </div>
                    </div>

                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>تحذير:</strong> هذا الإجراء لا يمكن التراجع عنه!
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                    <button type="button" class="btn btn-danger" onclick="executeWarehouseDeletion(${warehouseId})">
                        <i class="fas fa-trash me-2"></i>حذف المخزن
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تنفيذ حذف المخزن
 */
function executeWarehouseDeletion(warehouseId) {
    const targetWarehouseId = document.getElementById('targetWarehouseSelect')?.value;

    if (!targetWarehouseId) {
        alert('يرجى اختيار المخزن المستهدف لنقل البيانات');
        return;
    }

    const result = safeDeleteWarehouse(warehouseId, {
        transferToWarehouseId: parseInt(targetWarehouseId),
        forceDelete: true
    });

    if (result.success) {
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('deleteWarehouseModal'));
        modal.hide();

        // تحديث الصفحة
        showPage('warehouses');

        // رسالة نجاح
        alert(`✅ ${result.message}

📊 تم تنفيذ:
- نقل ${result.transferredProducts} صنف
- تحديث ${result.updatedMovements} حركة مخزون`);
    } else {
        alert(`❌ ${result.message}`);
    }
}

/**
 * عرض نافذة تأكيد حذف الصنف مع خيارات متقدمة
 */
function showProductDeletionDialog(productId) {
    const checkResult = canDeleteProduct(productId);

    if (!checkResult.canDelete) {
        alert(`❌ ${checkResult.reason}`);
        return;
    }

    const product = appData.products.find(p => p.id === productId);

    if (!checkResult.hasRelatedData) {
        // حذف مباشر إذا لم توجد بيانات مرتبطة
        if (confirm(`هل أنت متأكد من حذف الصنف "${product.name}"؟`)) {
            const result = safeDeleteProduct(productId, { forceDelete: true });
            if (result.success) {
                saveData();
                showPage('products');
                alert(result.message);
            } else {
                alert(`❌ ${result.message}`);
            }
        }
        return;
    }

    // إنشاء نافذة حذف متقدمة
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'deleteProductModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        حذف الصنف: ${product.name}
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>تحذير:</strong> يوجد بيانات مرتبطة بهذا الصنف
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="card border-primary">
                                <div class="card-body text-center">
                                    <i class="fas fa-file-invoice fa-2x text-primary mb-2"></i>
                                    <h6>الفواتير المرتبطة</h6>
                                    <span class="badge bg-primary fs-6">${checkResult.relatedInvoices}</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-info">
                                <div class="card-body text-center">
                                    <i class="fas fa-exchange-alt fa-2x text-info mb-2"></i>
                                    <h6>حركات المخزون</h6>
                                    <span class="badge bg-info fs-6">${checkResult.relatedMovements}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    ${checkResult.relatedInvoices > 0 ? `
                    <div class="mb-3">
                        <h6><i class="fas fa-file-invoice me-2"></i>الفواتير المرتبطة:</h6>
                        <div class="alert alert-info">
                            ${checkResult.invoiceNumbers.slice(0, 5).join(', ')}
                            ${checkResult.invoiceNumbers.length > 5 ? ` و ${checkResult.invoiceNumbers.length - 5} فاتورة أخرى` : ''}
                        </div>
                    </div>
                    ` : ''}

                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="removeFromInvoices">
                            <label class="form-check-label" for="removeFromInvoices">
                                <i class="fas fa-trash-alt me-2 text-danger"></i>
                                إزالة الصنف من جميع الفواتير المرتبطة
                            </label>
                            <div class="form-text text-danger">
                                تحذير: سيؤثر هذا على دقة الفواتير وإجمالياتها
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="removeMovements">
                            <label class="form-check-label" for="removeMovements">
                                <i class="fas fa-trash-alt me-2 text-danger"></i>
                                حذف جميع حركات المخزون المرتبطة
                            </label>
                            <div class="form-text text-danger">
                                تحذير: سيؤثر هذا على تاريخ حركة المخزون
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>تحذير:</strong> هذا الإجراء لا يمكن التراجع عنه!
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                    <button type="button" class="btn btn-danger" onclick="executeProductDeletion(${productId})">
                        <i class="fas fa-trash me-2"></i>حذف الصنف
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تنفيذ حذف الصنف
 */
function executeProductDeletion(productId) {
    const removeFromInvoices = document.getElementById('removeFromInvoices')?.checked || false;
    const removeMovements = document.getElementById('removeMovements')?.checked || false;

    const result = safeDeleteProduct(productId, {
        forceDelete: true,
        removeFromInvoices: removeFromInvoices,
        removeMovements: removeMovements
    });

    if (result.success) {
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('deleteProductModal'));
        modal.hide();

        // تحديث الصفحة
        showPage('products');

        // رسالة نجاح
        alert(`✅ ${result.message}

📊 تم تنفيذ:
- حذف الصنف من النظام
- إزالة ${result.removedInvoiceItems} عنصر من الفواتير
- حذف ${result.removedMovements} حركة مخزون`);
    } else {
        alert(`❌ ${result.message}`);
    }
}

// وظيفة حذف الفاتورة
function deleteInvoice(id) {
    const invoice = appData.invoices.find(inv => inv.id === id);
    if (!invoice) return;

    if (confirm(`هل أنت متأكد من حذف الفاتورة "${invoice.invoiceNumber}"؟`)) {
        // التحقق من وجود دفعات مرتبطة
        const hasPayments = appData.payments.some(pay => pay.invoiceId === id);
        if (hasPayments) {
            alert('لا يمكن حذف الفاتورة لوجود دفعات مرتبطة بها');
            return;
        }

        // التحقق من حالة الفاتورة
        if (invoice.status === 'confirmed') {
            if (!confirm('هذه الفاتورة مؤكدة. حذفها سيؤثر على المخزون والحسابات. هل تريد المتابعة؟')) {
                return;
            }
        }

        appData.invoices = appData.invoices.filter(inv => inv.id !== id);
        saveData();

        // تحديث الصفحة المناسبة
        if (invoice.invoiceType === 'sale') {
            showPage('sales-invoices');
        } else {
            showPage('purchase-invoices');
        }

        alert('تم حذف الفاتورة بنجاح');
    }
}

// وظائف الفواتير
function createInvoice(event) {
    if (event) {
        event.preventDefault();
    }
    console.log('🔄 محاولة حفظ الفاتورة كمؤكدة...');

    return saveInvoiceSimple('confirmed');
}

/**
 * حفظ الفاتورة - نسخة مبسطة وفعالة
 */
function saveInvoiceSimple(status = 'draft') {
    console.log('🚀 بدء حفظ الفاتورة المبسط...', { status });

    try {
        // جمع البيانات مباشرة
        const invoiceType = document.getElementById('invoiceType')?.value;
        const clientId = parseInt(document.getElementById('clientSelect')?.value);
        const invoiceDate = document.getElementById('invoiceDate')?.value;
        const dueDate = document.getElementById('dueDate')?.value || '';
        const notes = document.getElementById('invoiceNotes')?.value || '';

        console.log('📊 البيانات المجمعة:', { invoiceType, clientId, invoiceDate, dueDate, notes });

        // التحقق السريع
        if (!invoiceType) {
            alert('يرجى اختيار نوع الفاتورة');
            return false;
        }

        if (!clientId || isNaN(clientId)) {
            alert('يرجى اختيار ' + (invoiceType === 'sale' ? 'العميل' : 'المورد'));
            return false;
        }

        if (!invoiceDate) {
            alert('يرجى تحديد تاريخ الفاتورة');
            return false;
        }

        // جمع العناصر
        const items = [];
        const itemRows = document.querySelectorAll('#invoiceItemsTable tr');

        console.log('📦 عدد العناصر:', itemRows.length);

        if (itemRows.length === 0) {
            alert('يرجى إضافة عنصر واحد على الأقل للفاتورة');
            return false;
        }

        let hasValidItems = false;
        itemRows.forEach((row, index) => {
            const productSelect = row.querySelector('.item-product');
            const quantityInput = row.querySelector('.item-quantity');
            const priceInput = row.querySelector('.item-price');
            const discountInput = row.querySelector('.item-discount');

            console.log(`🔍 فحص الصف ${index + 1}:`, {
                productSelect: productSelect ? `موجود (${productSelect.value})` : 'مفقود',
                quantityInput: quantityInput ? `موجود (${quantityInput.value})` : 'مفقود',
                priceInput: priceInput ? `موجود (${priceInput.value})` : 'مفقود',
                discountInput: discountInput ? `موجود (${discountInput.value})` : 'مفقود'
            });

            if (productSelect && quantityInput && priceInput) {
                const productId = parseInt(productSelect.value);
                const quantity = parseFloat(quantityInput.value) || 0;
                const unitPrice = parseFloat(priceInput.value) || 0;
                const discount = parseFloat(discountInput?.value) || 0;

                console.log(`📊 قيم الصف ${index + 1}:`, { productId, quantity, unitPrice, discount });

                if (productId && !isNaN(productId) && quantity > 0 && unitPrice >= 0) {
                    const subtotal = quantity * unitPrice;
                    const discountAmount = subtotal * (discount / 100);
                    const totalAmount = subtotal - discountAmount;

                    items.push({
                        productId: productId,
                        quantity: quantity,
                        unitPrice: unitPrice,
                        discount: discount,
                        totalAmount: totalAmount
                    });
                    hasValidItems = true;
                    console.log(`✅ عنصر ${index + 1} مضاف بنجاح:`, { productId, quantity, unitPrice, discount, totalAmount });
                } else {
                    console.warn(`⚠️ عنصر غير صحيح في الصف ${index + 1}:`, { productId, quantity, unitPrice, discount });
                }
            } else {
                console.warn(`⚠️ عناصر مفقودة في الصف ${index + 1}`);
            }
        });

        if (!hasValidItems) {
            alert('يرجى إضافة عناصر صحيحة للفاتورة');
            return false;
        }

        // حساب الإجماليات
        const subtotal = items.reduce((sum, item) => sum + item.totalAmount, 0);
        const discountRate = parseFloat(document.getElementById('discountPercentage')?.value) || 0;
        const taxRate = parseFloat(document.getElementById('taxPercentage')?.value) || 0;

        const discountAmount = subtotal * (discountRate / 100);
        const taxAmount = (subtotal - discountAmount) * (taxRate / 100);
        const totalAmount = subtotal - discountAmount + taxAmount;

        console.log('💰 الإجماليات:', { subtotal, discountAmount, taxAmount, totalAmount });

        // إنشاء رقم الفاتورة
        const invoiceNumber = generateInvoiceNumber(invoiceType);
        console.log('🔢 رقم الفاتورة:', invoiceNumber);

        // إنشاء الفاتورة
        const newInvoice = {
            id: Date.now(),
            invoiceNumber: invoiceNumber,
            invoiceType: invoiceType,
            customerId: invoiceType === 'sale' ? clientId : null,
            supplierId: invoiceType === 'purchase' ? clientId : null,
            invoiceDate: invoiceDate,
            dueDate: dueDate,
            items: items,
            subtotal: subtotal,
            discountRate: discountRate,
            discountAmount: discountAmount,
            taxRate: taxRate,
            taxAmount: taxAmount,
            totalAmount: totalAmount,
            paidAmount: 0,
            remainingAmount: totalAmount,
            status: status,
            notes: notes,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        console.log('📄 الفاتورة الجديدة:', newInvoice);

        // تهيئة البيانات إذا لزم الأمر
        if (!appData.invoices) {
            appData.invoices = [];
        }
        if (!appData.settings.nextInvoiceNumber) {
            appData.settings.nextInvoiceNumber = { sale: 1, purchase: 1 };
        }

        // حفظ الفاتورة
        appData.invoices.push(newInvoice);
        appData.settings.nextInvoiceNumber[invoiceType]++;

        // تحديث أرصدة العملاء/الموردين عند تأكيد الفاتورة
        if (status === 'confirmed') {
            updateBalancesForInvoice(newInvoice);
        }

        console.log('💾 حفظ البيانات...');
        saveData();

        // رسالة النجاح مع عرض رمز العملة بوضوح
        const invoiceCurrency = document.getElementById('invoiceCurrency')?.value || 'SYP';
        const currencySymbol = getCurrencySymbol(invoiceCurrency);
        const currencyName = getCurrencyName(invoiceCurrency);
        const successMessage = `✅ تم حفظ الفاتورة بنجاح!

📄 رقم الفاتورة: ${invoiceNumber}
💰 المبلغ الإجمالي: ${formatCurrency(totalAmount, invoiceCurrency)}
💱 العملة: ${currencyName} (${currencySymbol})
📊 عدد العناصر: ${items.length}
🏷️ الحالة: ${status === 'confirmed' ? 'مؤكدة' : 'مسودة'}

هل تريد طباعة الفاتورة؟`;

        console.log('🎉 تم حفظ الفاتورة بنجاح!');

        if (confirm(successMessage)) {
            // يمكن إضافة وظيفة الطباعة هنا
            alert('وظيفة الطباعة ستتم إضافتها لاحقاً');
        }

        // العودة لقائمة الفواتير
        showPage(invoiceType === 'sale' ? 'sales-invoices' : 'purchase-invoices');

        return true;

    } catch (error) {
        console.error('❌ خطأ في حفظ الفاتورة:', error);
        alert('حدث خطأ أثناء حفظ الفاتورة: ' + error.message);
        return false;
    }
}

/**
 * حل مشكلة حفظ الفواتير - وظيفة مباشرة
 */
function fixInvoiceSaving() {
    console.log('🔧 حل مشكلة حفظ الفواتير...');

    // التحقق من وجود البيانات الأساسية
    if (!appData.customers || appData.customers.length === 0 || !appData.products || appData.products.length === 0) {
        console.log('📝 إنشاء بيانات تجريبية...');
        createSampleData();

        // انتظار قليل ثم ملء النموذج
        setTimeout(() => {
            fillFormAutomatically();
        }, 500);
        return;
    }

    fillFormAutomatically();
}

/**
 * ملء النموذج تلقائياً للاختبار
 */
function fillFormAutomatically() {
    console.log('📝 ملء النموذج تلقائياً...');

    // التحقق من وجود العناصر في النموذج
    const invoiceType = document.getElementById('invoiceType');
    const clientSelect = document.getElementById('clientSelect');
    const invoiceDate = document.getElementById('invoiceDate');
    const itemsTable = document.getElementById('invoiceItemsTable');

    if (!invoiceType || !clientSelect || !invoiceDate || !itemsTable) {
        alert('يرجى الذهاب لصفحة إنشاء الفاتورة أولاً');
        showPage('create-invoice');
        return;
    }

    // ملء البيانات الأساسية
    if (!invoiceType.value) {
        invoiceType.value = 'sale';
        updateClientOptions();
        console.log('✅ تم تحديد نوع الفاتورة: مبيعات');
    }

    // انتظار قليل لتحديث قائمة العملاء
    setTimeout(() => {
        if (!clientSelect.value && appData.customers.length > 0) {
            clientSelect.value = appData.customers[0].id;
            console.log('✅ تم اختيار العميل:', appData.customers[0].name);
        }

        if (!invoiceDate.value) {
            invoiceDate.value = new Date().toISOString().split('T')[0];
            console.log('✅ تم تحديد التاريخ');
        }

        // إضافة عنصر تجريبي إذا لم توجد عناصر
        if (itemsTable.children.length === 0 && appData.products.length > 0) {
            addInvoiceItem();
            console.log('✅ تم إضافة عنصر جديد');

            // ملء العنصر الأول تلقائياً
            setTimeout(() => {
                const firstRow = itemsTable.querySelector('tr');
                if (firstRow) {
                    const productSelect = firstRow.querySelector('.item-product');
                    const quantityInput = firstRow.querySelector('.item-quantity');
                    const priceInput = firstRow.querySelector('.item-price');

                    console.log('🔍 عناصر الصف الأول:', {
                        productSelect: productSelect ? 'موجود' : 'مفقود',
                        quantityInput: quantityInput ? 'موجود' : 'مفقود',
                        priceInput: priceInput ? 'موجود' : 'مفقود'
                    });

                    if (productSelect && appData.products.length > 0) {
                        productSelect.value = appData.products[0].id;
                        console.log('✅ تم اختيار الصنف:', appData.products[0].name);

                        // تحديث السعر تلقائياً
                        if (priceInput) {
                            priceInput.value = appData.products[0].sellingPrice || 100;
                            console.log('✅ تم تحديد السعر:', priceInput.value);
                        }
                    }

                    if (quantityInput) {
                        quantityInput.value = 1;
                        console.log('✅ تم تحديد الكمية: 1');
                    }

                    // حساب المجموع
                    calculateInvoiceTotals();
                }
            }, 200);
        }

        console.log('✅ تم إعداد النموذج للاختبار');
        alert('تم إعداد النموذج تلقائياً!\n\n✅ نوع الفاتورة: مبيعات\n✅ العميل: ' + (appData.customers[0]?.name || 'غير محدد') + '\n✅ الصنف: ' + (appData.products[0]?.name || 'غير محدد') + '\n✅ الكمية: 1\n\nيمكنك الآن الضغط على "حفظ وتأكيد" لاختبار حفظ الفاتورة.');

    }, 300);
}

/**
 * حفظ الفاتورة كمسودة
 */
function saveInvoiceAsDraft() {
    console.log('🔄 محاولة حفظ الفاتورة كمسودة...');
    return saveInvoiceSimple('draft');
}

/**
 * حفظ الفاتورة
 */
function saveInvoice(status = 'draft') {
    console.log('🔄 بدء عملية حفظ الفاتورة...', { status });

    try {
        // التحقق من وجود العناصر
        console.log('🔍 التحقق من وجود عناصر النموذج...');

        const invoiceTypeElement = document.getElementById('invoiceType');
        const clientElement = document.getElementById('clientSelect');
        const dateElement = document.getElementById('invoiceDate');
        const dueDateElement = document.getElementById('dueDate');
        const notesElement = document.getElementById('invoiceNotes');

        console.log('📋 عناصر النموذج:', {
            invoiceType: invoiceTypeElement ? 'موجود' : 'مفقود',
            clientSelect: clientElement ? 'موجود' : 'مفقود',
            invoiceDate: dateElement ? 'موجود' : 'مفقود',
            dueDate: dueDateElement ? 'موجود' : 'مفقود',
            notes: notesElement ? 'موجود' : 'مفقود'
        });

        if (!invoiceTypeElement || !clientElement || !dateElement) {
            console.error('❌ عناصر النموذج غير موجودة');
            alert('خطأ: عناصر النموذج غير موجودة. يرجى إعادة تحميل الصفحة.');
            return false;
        }

        const invoiceType = invoiceTypeElement.value;
        const clientId = parseInt(clientElement.value);
        const invoiceDate = dateElement.value;
        const dueDate = dueDateElement ? dueDateElement.value : '';
        const notes = notesElement ? notesElement.value.trim() : '';

        console.log('📊 بيانات الفاتورة المستخرجة:', { invoiceType, clientId, invoiceDate, dueDate, notes });

        // التحقق من البيانات الأساسية
        if (!invoiceType) {
            alert('يرجى اختيار نوع الفاتورة');
            return false;
        }

        if (!clientId || isNaN(clientId)) {
            alert('يرجى اختيار ' + (invoiceType === 'sale' ? 'العميل' : 'المورد'));
            return false;
        }

        if (!invoiceDate) {
            alert('يرجى تحديد تاريخ الفاتورة');
            return false;
        }

        // جمع عناصر الفاتورة
        console.log('📦 جمع عناصر الفاتورة...');
        const items = [];
        const itemRows = document.querySelectorAll('#invoiceItemsTable tr');

        console.log('📊 عدد صفوف العناصر:', itemRows.length);
        console.log('🔍 جدول العناصر موجود:', document.getElementById('invoiceItemsTable') ? 'نعم' : 'لا');

        if (itemRows.length === 0) {
            console.warn('⚠️ لا توجد عناصر في الفاتورة');
            alert('يرجى إضافة عنصر واحد على الأقل للفاتورة\n\nاضغط على زر "إضافة صنف" لإضافة عناصر للفاتورة');
            return false;
        }

        let hasValidItems = false;
        itemRows.forEach((row, index) => {
            console.log(`🔍 فحص الصف ${index + 1}...`);

            const productSelect = row.querySelector('.item-product');
            const specificationsInput = row.querySelector('.item-specifications');
            const quantityInput = row.querySelector('.item-quantity');
            const priceInput = row.querySelector('.item-price');

            console.log(`📋 عناصر الصف ${index + 1}:`, {
                productSelect: productSelect ? `موجود (${productSelect.value})` : 'مفقود',
                specificationsInput: specificationsInput ? `موجود (${specificationsInput.value})` : 'مفقود',
                quantityInput: quantityInput ? `موجود (${quantityInput.value})` : 'مفقود',
                priceInput: priceInput ? `موجود (${priceInput.value})` : 'مفقود'
            });

            if (productSelect && quantityInput && priceInput) {
                const productId = parseInt(productSelect.value);
                const specifications = specificationsInput ? specificationsInput.value.trim() : '';
                const quantity = parseFloat(quantityInput.value);
                const unitPrice = parseFloat(priceInput.value);

                console.log(`📊 قيم الصف ${index + 1}:`, { productId, specifications, quantity, unitPrice });

                if (productId && !isNaN(productId) && quantity > 0 && unitPrice >= 0) {
                    const discountInput = row.querySelector('.item-discount');
                    const discount = discountInput ? parseFloat(discountInput.value) || 0 : 0;
                    const subtotal = quantity * unitPrice;
                    const discountAmount = subtotal * (discount / 100);
                    const totalAmount = subtotal - discountAmount;

                    items.push({
                        productId: productId,
                        specifications: specifications,
                        quantity: quantity,
                        unitPrice: unitPrice,
                        discount: discount,
                        totalAmount: totalAmount
                    });
                    hasValidItems = true;
                    console.log(`✅ عنصر صحيح مضاف:`, { productId, specifications, quantity, unitPrice, discount, totalAmount });
                } else {
                    console.warn(`⚠️ عنصر غير صحيح في الصف ${index + 1}:`, { productId, specifications, quantity, unitPrice });
                }
            } else {
                console.warn(`⚠️ عناصر مفقودة في الصف ${index + 1}`);
            }
        });

        if (!hasValidItems) {
            console.error('❌ لا توجد عناصر صحيحة في الفاتورة');
            alert('يرجى إضافة عناصر صحيحة للفاتورة:\n\n1. اختر الصنف\n2. أدخل الكمية (أكبر من 0)\n3. أدخل السعر (0 أو أكبر)');
            return false;
        }

        console.log('✅ العناصر المجمعة:', items);

        // التحقق من توفر الكمية في حالة فاتورة المبيعات
        if (invoiceType === 'sale' && status === 'confirmed') {
            for (let item of items) {
                const product = appData.products.find(p => p.id === item.productId);
                if (product && product.quantity < item.quantity) {
                    alert(`الكمية المتاحة من ${product.name}: ${product.quantity} ${product.unit}`);
                    return false;
                }
            }
        }

        // حساب الإجماليات
        console.log('💰 حساب الإجماليات...');
        const subtotal = items.reduce((sum, item) => sum + item.totalAmount, 0);
        const discountRateElement = document.getElementById('discountPercentage');
        const taxRateElement = document.getElementById('taxPercentage');

        const discountRate = discountRateElement ? parseFloat(discountRateElement.value) || 0 : 0;
        const discountAmount = subtotal * (discountRate / 100);
        const taxRate = taxRateElement ? parseFloat(taxRateElement.value) || 0 : appData.settings.taxRate || 0;
        const taxAmount = (subtotal - discountAmount) * (taxRate / 100);
        const totalAmount = subtotal - discountAmount + taxAmount;

        console.log('💰 الحسابات:', { subtotal, discountRate, discountAmount, taxRate, taxAmount, totalAmount });

        // إنشاء رقم الفاتورة
        console.log('🔢 إنشاء رقم الفاتورة...');
        const invoiceNumber = generateInvoiceNumber(invoiceType);
        console.log('✅ رقم الفاتورة المولد:', invoiceNumber);

        // التحقق من صحة الرقم
        if (!invoiceNumber) {
            console.error('❌ فشل في إنشاء رقم الفاتورة');
            alert('خطأ: فشل في إنشاء رقم الفاتورة. يرجى المحاولة مرة أخرى.');
            return false;
        }

        // إنشاء الفاتورة
        console.log('📄 إنشاء كائن الفاتورة...');
        const newInvoice = {
            id: Date.now(),
            invoiceNumber: invoiceNumber,
            invoiceType: invoiceType,
            customerId: invoiceType === 'sale' ? clientId : null,
            supplierId: invoiceType === 'purchase' ? clientId : null,
            invoiceDate: invoiceDate,
            dueDate: dueDate,
            items: items,
            subtotal: subtotal,
            discountRate: discountRate,
            discountAmount: discountAmount,
            taxRate: taxRate,
            taxAmount: taxAmount,
            totalAmount: totalAmount,
            paidAmount: 0,
            remainingAmount: totalAmount,
            status: status,
            notes: notes,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        console.log('📄 الفاتورة الجديدة:', newInvoice);

        // التحقق من صحة البيانات قبل الحفظ
        if (!newInvoice.id || !newInvoice.invoiceNumber || !newInvoice.invoiceType) {
            console.error('❌ بيانات الفاتورة غير مكتملة');
            alert('خطأ: بيانات الفاتورة غير مكتملة. يرجى المحاولة مرة أخرى.');
            return false;
        }

        // تهيئة مصفوفة الفواتير إذا لم تكن موجودة
        if (!appData.invoices) {
            appData.invoices = [];
            console.log('🔧 تم تهيئة مصفوفة الفواتير');
        }

        // حفظ الفاتورة
        console.log('💾 حفظ الفاتورة في المصفوفة...');
        appData.invoices.push(newInvoice);
        console.log('✅ تم إضافة الفاتورة للمصفوفة. العدد الحالي:', appData.invoices.length);

        // تحديث بيانات العميل/المورد
        console.log('👤 تحديث بيانات العميل/المورد...');
        const currency = newInvoice.currency || appData.settings.currency || 'SYP';

        // تحديث الأرصدة عند تأكيد الفاتورة
        if (status === 'confirmed') {
            updateBalancesForInvoice(newInvoice);
        }

        if (invoiceType === 'sale') {
            updateCustomerData(clientId, totalAmount, currency, invoiceDate);
        } else if (invoiceType === 'purchase') {
            updateSupplierData(clientId, totalAmount, currency, invoiceDate);
        }

        // تحديث أرقام الفواتير
        console.log('🔢 تحديث أرقام الفواتير...');
        if (!appData.settings.nextInvoiceNumber) {
            appData.settings.nextInvoiceNumber = { sale: 1, purchase: 1 };
            console.log('🔧 تم تهيئة أرقام الفواتير');
        }
        appData.settings.nextInvoiceNumber[invoiceType]++;
        console.log('✅ تم تحديث رقم الفاتورة التالي:', appData.settings.nextInvoiceNumber);

    // إضافة قيد محاسبي (فقط للفواتير المؤكدة)
    if (status === 'confirmed') {
        addJournalEntry({
            date: invoiceDate,
            description: `فاتورة ${invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'} رقم ${invoiceNumber}`,
            debitAccount: invoiceType === 'sale' ? 'العملاء' : 'المشتريات',
            creditAccount: invoiceType === 'sale' ? 'المبيعات' : 'الموردين',
            debitAmount: totalAmount,
            creditAmount: totalAmount,
            reference: invoiceNumber,
            invoiceId: newInvoice.id
        });

        // تحديث حركة المخزون (فقط للفواتير المؤكدة)
        items.forEach(item => {
            const product = appData.products.find(p => p.id === item.productId);
            if (product) {
                // تحديث كمية المنتج
                if (invoiceType === 'sale') {
                    product.quantity -= item.quantity;
                } else {
                    product.quantity += item.quantity;
                }

                addInventoryMovement({
                    productId: item.productId,
                    warehouseId: product.warehouseId,
                    movementType: invoiceType === 'sale' ? 'out' : 'in',
                    quantity: item.quantity,
                    unitPrice: item.unitPrice,
                    reference: invoiceNumber,
                    notes: `فاتورة ${invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'} رقم ${invoiceNumber}`
                });
            }
        });
    }

        saveData();
        console.log('تم حفظ البيانات في localStorage');

        // حفظ البيانات في التخزين المحلي
        console.log('💾 حفظ البيانات في التخزين المحلي...');
        try {
            saveData();
            console.log('✅ تم حفظ البيانات بنجاح في localStorage');
        } catch (saveError) {
            console.error('❌ خطأ في حفظ البيانات:', saveError);
            alert('خطأ في حفظ البيانات: ' + saveError.message);
            return false;
        }

        // عرض رسالة نجاح مع خيارات وعرض رمز العملة بوضوح
        const statusText = status === 'draft' ? 'كمسودة' : 'وتأكيدها';
        const invoiceCurrency = document.getElementById('invoiceCurrency')?.value || 'SYP';
        const currencySymbol = getCurrencySymbol(invoiceCurrency);
        const currencyName = getCurrencyName(invoiceCurrency);
        const successMessage = `✅ تم حفظ الفاتورة بنجاح!

📄 رقم الفاتورة: ${invoiceNumber}
💰 المبلغ الإجمالي: ${formatCurrency(totalAmount, invoiceCurrency)}
💱 العملة: ${currencyName} (${currencySymbol})
📊 عدد العناصر: ${items.length}
📅 التاريخ: ${invoiceDate}
🏷️ الحالة: ${status === 'confirmed' ? 'مؤكدة' : 'مسودة'}

هل تريد طباعة الفاتورة؟`;

        console.log('🎉 تم حفظ الفاتورة بنجاح:', newInvoice.id);

        if (confirm(successMessage)) {
            printInvoice(newInvoice.id);
        } else {
            showPage(invoiceType === 'sale' ? 'sales-invoices' : 'purchase-invoices');
        }

        return true;

    } catch (error) {
        console.error('❌ خطأ في حفظ الفاتورة:', error);
        console.error('❌ تفاصيل الخطأ:', error.stack);

        const errorMessage = `حدث خطأ أثناء حفظ الفاتورة:

${error.message}

يرجى التحقق من:
1. صحة البيانات المدخلة
2. وجود اتصال بالإنترنت
3. مساحة التخزين المتاحة

إذا استمرت المشكلة، يرجى الاتصال بالدعم الفني.`;

        alert(errorMessage);
        return false;
    }
}

/**
 * إنشاء رقم فاتورة جديد
 */
function generateInvoiceNumber(type) {
    const prefix = type === 'sale' ? 'SALE' : 'PUR';
    const nextNumber = appData.settings.nextInvoiceNumber[type] || 1;
    const year = new Date().getFullYear();
    return `${prefix}-${year}-${String(nextNumber).padStart(4, '0')}`;
}

/**
 * إضافة قيد محاسبي
 */
function addJournalEntry(entry) {
    if (!appData.journalEntries) {
        appData.journalEntries = [];
    }

    // التأكد من وجود التاريخ
    const entryDate = entry.date || entry.entryDate || new Date().toISOString().split('T')[0];

    const newEntry = {
        id: Date.now(),
        entryNumber: generateEntryNumber(),
        date: entryDate,
        entryDate: entryDate, // إضافة حقل التاريخ المحدد
        description: entry.description,
        debitAccount: entry.debitAccount,
        creditAccount: entry.creditAccount,
        debitAmount: parseFloat(entry.debitAmount) || 0,
        creditAmount: parseFloat(entry.creditAmount) || 0,
        currency: entry.currency || appData.settings?.currency || 'SYP',
        reference: entry.reference || entry.referenceNumber || '',
        referenceId: entry.referenceId || null,
        referenceType: entry.referenceType || null,
        entryType: entry.entryType || 'manual',
        invoiceId: entry.invoiceId || null,
        paymentId: entry.paymentId || null,
        createdAt: new Date().toISOString(),
        createdBy: entry.createdBy || 'system'
    };

    appData.journalEntries.push(newEntry);

    console.log('✅ تم إضافة قيد محاسبي جديد:', {
        entryNumber: newEntry.entryNumber,
        date: newEntry.entryDate,
        description: newEntry.description,
        debitAmount: newEntry.debitAmount,
        creditAmount: newEntry.creditAmount
    });
}

/**
 * إنشاء رقم قيد تلقائي
 */
function generateEntryNumber() {
    const year = new Date().getFullYear();
    const nextNumber = (appData.settings?.nextEntryNumber || 1);

    // تحديث رقم القيد التالي
    if (!appData.settings) appData.settings = {};
    appData.settings.nextEntryNumber = nextNumber + 1;

    return `JE-${year}-${String(nextNumber).padStart(4, '0')}`;
}

/**
 * إعداد حسابات تعديل الفاتورة
 */
function setupEditInvoiceCalculations() {
    const modal = document.getElementById('editInvoiceModal');

    // مستمعي الأحداث للحسابات
    modal.addEventListener('input', function(e) {
        if (e.target.classList.contains('item-quantity') ||
            e.target.classList.contains('item-price') ||
            e.target.id === 'editDiscountRate' ||
            e.target.id === 'editTaxRate') {
            calculateEditInvoiceTotals();
        }
    });

    modal.addEventListener('change', function(e) {
        if (e.target.classList.contains('item-product')) {
            const row = e.target.closest('tr');
            const productId = parseInt(e.target.value);
            const product = appData.products.find(p => p.id === productId);
            if (product) {
                const priceInput = row.querySelector('.item-price');
                priceInput.value = product.sellingPrice;
                calculateEditInvoiceTotals();
            }
        }
    });
}

/**
 * حساب إجماليات تعديل الفاتورة
 */
function calculateEditInvoiceTotals() {
    const rows = document.querySelectorAll('#editInvoiceItems tr');
    let subtotal = 0;

    rows.forEach(row => {
        const quantity = parseFloat(row.querySelector('.item-quantity').value) || 0;
        const price = parseFloat(row.querySelector('.item-price').value) || 0;
        const total = quantity * price;

        row.querySelector('.item-total').textContent = formatCurrency(total);
        subtotal += total;
    });

    const discountRate = parseFloat(document.getElementById('editDiscountRate').value) || 0;
    const taxRate = parseFloat(document.getElementById('editTaxRate').value) || 0;

    const discountAmount = subtotal * (discountRate / 100);
    const taxAmount = (subtotal - discountAmount) * (taxRate / 100);
    const totalAmount = subtotal - discountAmount + taxAmount;

    document.getElementById('editSubtotal').textContent = formatCurrency(subtotal);
    document.getElementById('editDiscountAmount').textContent = formatCurrency(discountAmount);
    document.getElementById('editTaxAmount').textContent = formatCurrency(taxAmount);
    document.getElementById('editTotalAmount').textContent = formatCurrency(totalAmount);
}

/**
 * إضافة عنصر جديد لتعديل الفاتورة
 */
function addEditInvoiceItem() {
    const tbody = document.getElementById('editInvoiceItems');
    const newRow = document.createElement('tr');
    newRow.innerHTML = `
        <td>
            <select class="form-select item-product" required>
                <option value="">اختر الصنف</option>
                ${appData.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('')}
            </select>
        </td>
        <td><input type="number" class="form-control item-quantity" value="1" min="0" step="0.01" required></td>
        <td><input type="number" class="form-control item-price" value="0" min="0" step="0.01" required></td>
        <td><span class="item-total">0.00 ل.س</span></td>
        <td>
            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeEditInvoiceItem(this)">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;
    tbody.appendChild(newRow);
}

/**
 * حذف عنصر من تعديل الفاتورة
 */
function removeEditInvoiceItem(button) {
    const row = button.closest('tr');
    row.remove();
    calculateEditInvoiceTotals();
}

/**
 * تحديث الفاتورة
 */
function updateInvoice(invoiceId) {
    const invoice = appData.invoices.find(inv => inv.id === invoiceId);
    if (!invoice) {
        alert('لم يتم العثور على الفاتورة');
        return;
    }

    const oldStatus = invoice.status;
    const clientId = parseInt(document.getElementById('editInvoiceClient').value);
    const invoiceDate = document.getElementById('editInvoiceDate').value;
    const dueDate = document.getElementById('editInvoiceDueDate').value;
    const status = document.getElementById('editInvoiceStatus').value;
    const notes = document.getElementById('editInvoiceNotes').value.trim();

    // جمع عناصر الفاتورة
    const items = [];
    const itemRows = document.querySelectorAll('#editInvoiceItems tr');

    itemRows.forEach(row => {
        const productId = parseInt(row.querySelector('.item-product').value);
        const quantity = parseFloat(row.querySelector('.item-quantity').value);
        const unitPrice = parseFloat(row.querySelector('.item-price').value);

        if (productId && quantity > 0 && unitPrice >= 0) {
            items.push({
                productId: productId,
                quantity: quantity,
                unitPrice: unitPrice,
                totalAmount: quantity * unitPrice
            });
        }
    });

    if (items.length === 0) {
        alert('يرجى إضافة عنصر واحد على الأقل للفاتورة');
        return;
    }

    // حساب الإجماليات
    const subtotal = items.reduce((sum, item) => sum + item.totalAmount, 0);
    const discountRate = parseFloat(document.getElementById('editDiscountRate').value) || 0;
    const discountAmount = subtotal * (discountRate / 100);
    const taxRate = parseFloat(document.getElementById('editTaxRate').value) || 0;
    const taxAmount = (subtotal - discountAmount) * (taxRate / 100);
    const totalAmount = subtotal - discountAmount + taxAmount;

    // إذا كانت الفاتورة مؤكدة سابقاً، نحتاج لعكس تأثيرها على المخزون
    if (oldStatus === 'confirmed') {
        invoice.items.forEach(item => {
            const product = appData.products.find(p => p.id === item.productId);
            if (product) {
                // عكس الحركة السابقة
                if (invoice.invoiceType === 'sale') {
                    product.quantity += item.quantity; // إرجاع الكمية
                } else {
                    product.quantity -= item.quantity; // إزالة الكمية
                }
            }
        });
    }

    // تحديث بيانات الفاتورة
    if (invoice.invoiceType === 'sale') {
        invoice.customerId = clientId;
        invoice.supplierId = null;
    } else {
        invoice.supplierId = clientId;
        invoice.customerId = null;
    }

    invoice.invoiceDate = invoiceDate;
    invoice.dueDate = dueDate;
    invoice.items = items;
    invoice.subtotal = subtotal;
    invoice.discountRate = discountRate;
    invoice.discountAmount = discountAmount;
    invoice.taxRate = taxRate;
    invoice.taxAmount = taxAmount;
    invoice.totalAmount = totalAmount;
    invoice.remainingAmount = totalAmount - (invoice.paidAmount || 0);
    invoice.status = status;
    invoice.notes = notes;
    invoice.updatedAt = new Date().toISOString();

    // إذا أصبحت الفاتورة مؤكدة، نطبق التأثير الجديد على المخزون
    if (status === 'confirmed') {
        items.forEach(item => {
            const product = appData.products.find(p => p.id === item.productId);
            if (product) {
                if (invoice.invoiceType === 'sale') {
                    if (product.quantity < item.quantity) {
                        alert(`الكمية المتاحة من ${product.name}: ${product.quantity} ${product.unit}`);
                        return;
                    }
                    product.quantity -= item.quantity;
                } else {
                    product.quantity += item.quantity;
                }

                // إضافة حركة مخزون جديدة
                addInventoryMovement({
                    productId: item.productId,
                    warehouseId: product.warehouseId,
                    movementType: invoice.invoiceType === 'sale' ? 'out' : 'in',
                    quantity: item.quantity,
                    unitPrice: item.unitPrice,
                    reference: invoice.invoiceNumber,
                    notes: `تعديل فاتورة ${invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'} رقم ${invoice.invoiceNumber}`
                });
            }
        });
    }

    saveData();

    // إغلاق النافذة
    const modal = bootstrap.Modal.getInstance(document.getElementById('editInvoiceModal'));
    modal.hide();

    alert('تم تحديث الفاتورة بنجاح');

    // إعادة تحميل الصفحة الحالية
    const currentPage = invoice.invoiceType === 'sale' ? 'sales-invoices' : 'purchase-invoices';
    showPage(currentPage);
}

/**
 * إنشاء رقم سند جديد
 */
function generatePaymentNumber(type) {
    const prefix = type === 'receipt' ? 'REC' : 'PAY';
    const nextNumber = appData.settings.nextPaymentNumber[type] || 1;
    const year = new Date().getFullYear();
    return `${prefix}-${year}-${String(nextNumber).padStart(4, '0')}`;
}

/**
 * تشخيص مشاكل سندات القبض
 */
function diagnoseReceiptIssues() {
    console.log('🔍 بدء تشخيص مشاكل سندات القبض...');

    const issues = [];
    const fixes = [];

    // فحص البيانات الأساسية
    if (!appData) {
        issues.push('❌ appData غير موجود');
        fixes.push('إنشاء appData');
    } else {
        console.log('✅ appData موجود');
    }

    // فحص مصفوفة السندات
    if (!appData.payments) {
        issues.push('❌ مصفوفة السندات غير موجودة');
        fixes.push('إنشاء مصفوفة السندات');
    } else {
        console.log('✅ مصفوفة السندات موجودة، العدد:', appData.payments.length);
    }

    // فحص الإعدادات
    if (!appData.settings) {
        issues.push('❌ الإعدادات غير موجودة');
        fixes.push('إنشاء الإعدادات');
    } else {
        console.log('✅ الإعدادات موجودة');
    }

    // فحص أرقام السندات
    if (!appData.settings || !appData.settings.nextPaymentNumber) {
        issues.push('❌ أرقام السندات غير موجودة');
        fixes.push('إنشاء أرقام السندات');
    } else {
        console.log('✅ أرقام السندات موجودة:', appData.settings.nextPaymentNumber);
    }

    // فحص العملاء
    if (!appData.customers || appData.customers.length === 0) {
        issues.push('❌ لا توجد عملاء');
        fixes.push('إضافة عملاء تجريبيين');
    } else {
        console.log('✅ العملاء موجودون، العدد:', appData.customers.length);
    }

    // فحص localStorage
    try {
        const savedData = localStorage.getItem('samProData');
        if (!savedData) {
            issues.push('❌ لا توجد بيانات محفوظة في localStorage');
            fixes.push('حفظ البيانات في localStorage');
        } else {
            console.log('✅ البيانات محفوظة في localStorage');
        }
    } catch (error) {
        issues.push('❌ خطأ في الوصول إلى localStorage: ' + error.message);
        fixes.push('إصلاح مشكلة localStorage');
    }

    // عرض النتائج
    let message = '🔍 نتائج التشخيص:\n\n';

    if (issues.length === 0) {
        message += '✅ لا توجد مشاكل! النظام جاهز للعمل.\n\n';
        message += `📊 إحصائيات:\n`;
        message += `- السندات: ${appData.payments ? appData.payments.length : 0}\n`;
        message += `- العملاء: ${appData.customers ? appData.customers.length : 0}\n`;
        message += `- رقم السند التالي: ${appData.settings?.nextPaymentNumber?.receipt || 1}`;
    } else {
        message += '❌ المشاكل المكتشفة:\n';
        issues.forEach((issue, index) => {
            message += `${index + 1}. ${issue}\n`;
        });

        message += '\n🔧 الإصلاحات المقترحة:\n';
        fixes.forEach((fix, index) => {
            message += `${index + 1}. ${fix}\n`;
        });

        message += '\nهل تريد تطبيق الإصلاحات تلقائياً؟';

        if (confirm(message)) {
            fixReceiptDataIssues();
        }
    }

    if (issues.length === 0) {
        alert(message);
    }

    console.log('🔍 انتهى التشخيص');
}

/**
 * إصلاح مشاكل بيانات سندات القبض
 */
function fixReceiptDataIssues() {
    console.log('🔧 بدء إصلاح مشاكل البيانات...');

    let fixesApplied = [];

    // إصلاح appData
    if (!window.appData) {
        window.appData = {};
        fixesApplied.push('إنشاء appData');
    }

    // إصلاح مصفوفة السندات
    if (!appData.payments) {
        appData.payments = [];
        fixesApplied.push('إنشاء مصفوفة السندات');
    }

    // إصلاح الإعدادات
    if (!appData.settings) {
        appData.settings = {};
        fixesApplied.push('إنشاء الإعدادات');
    }

    // إصلاح أرقام السندات
    if (!appData.settings.nextPaymentNumber) {
        appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
        fixesApplied.push('إنشاء أرقام السندات');
    }

    // إصلاح مصفوفة العملاء
    if (!appData.customers) {
        appData.customers = [];
        fixesApplied.push('إنشاء مصفوفة العملاء');
    }

    // إضافة عملاء تجريبيين إذا لم يوجدوا
    if (appData.customers.length === 0) {
        appData.customers = [
            {
                id: 1,
                name: 'عميل تجريبي 1',
                phone: '0123456789',
                email: 'customer1@example.com',
                address: 'العنوان التجريبي 1',
                currentBalance: 0,
                currency: 'SYP',
                createdAt: new Date().toISOString().split('T')[0]
            },
            {
                id: 2,
                name: 'عميل تجريبي 2',
                phone: '0987654321',
                email: 'customer2@example.com',
                address: 'العنوان التجريبي 2',
                currentBalance: 0,
                currency: 'SYP',
                createdAt: new Date().toISOString().split('T')[0]
            }
        ];
        fixesApplied.push('إضافة عملاء تجريبيين');
    }

    // إصلاح مصفوفة القيود المحاسبية
    if (!appData.journalEntries) {
        appData.journalEntries = [];
        fixesApplied.push('إنشاء مصفوفة القيود المحاسبية');
    }

    // حفظ البيانات
    try {
        saveData();
        fixesApplied.push('حفظ البيانات في localStorage');
        console.log('✅ تم حفظ البيانات المُصلحة');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات المُصلحة:', error);
    }

    if (fixesApplied.length > 0) {
        const message = `✅ تم تطبيق الإصلاحات التالية:\n\n${fixesApplied.map((fix, index) => `${index + 1}. ${fix}`).join('\n')}\n\nالنظام جاهز الآن للعمل!`;
        alert(message);
        console.log('✅ تم إصلاح جميع المشاكل');
    } else {
        console.log('ℹ️ لا توجد مشاكل تحتاج إصلاح');
    }
}

/**
 * اختبار حفظ سند القبض
 */
function testReceiptSave() {
    console.log('🧪 بدء اختبار حفظ سند القبض...');

    // التحقق من البيانات أولاً
    fixReceiptDataIssues();

    // ملء النموذج بقيم تجريبية
    const customerSelect = document.getElementById('receiptCustomer');
    const dateInput = document.getElementById('receiptDate');
    const amountInput = document.getElementById('receiptAmount');
    const currencySelect = document.getElementById('receiptCurrency');
    const methodSelect = document.getElementById('receiptMethod');
    const notesInput = document.getElementById('receiptNotes');

    if (customerSelect && appData.customers.length > 0) {
        customerSelect.value = appData.customers[0].id;
    }

    if (dateInput) {
        dateInput.value = new Date().toISOString().split('T')[0];
    }

    if (amountInput) {
        amountInput.value = '1000';
    }

    if (currencySelect) {
        currencySelect.value = 'SYP';
    }

    if (methodSelect) {
        methodSelect.value = 'cash';
    }

    if (notesInput) {
        notesInput.value = 'اختبار حفظ سند القبض';
    }

    alert('✅ تم ملء النموذج بقيم تجريبية\n\nيمكنك الآن الضغط على "حفظ السند" لاختبار العملية');

    console.log('✅ انتهى اختبار الإعداد');
}

/**
 * اختبار مباشر لحفظ سند القبض
 */
function testDirectSave() {
    console.log('🧪 بدء الاختبار المباشر لحفظ سند القبض');

    // التحقق من البيانات أولاً
    if (!appData.customers || appData.customers.length === 0) {
        alert('❌ لا توجد عملاء. سيتم إنشاء عميل تجريبي...');
        createTestData();
        return;
    }

    // إنشاء سند تجريبي مباشرة
    try {
        const testReceipt = {
            id: Date.now(),
            paymentNumber: `TEST-${Date.now()}`,
            paymentType: 'receipt',
            customerId: appData.customers[0].id,
            paymentDate: new Date().toISOString().split('T')[0],
            amount: 1000,
            currency: 'SYP',
            paymentMethod: 'cash',
            notes: 'اختبار مباشر لحفظ سند القبض',
            status: 'confirmed',
            createdAt: new Date().toISOString()
        };

        console.log('📄 السند التجريبي:', testReceipt);

        // حفظ السند
        if (!appData.payments) appData.payments = [];
        appData.payments.push(testReceipt);

        // حفظ في localStorage
        localStorage.setItem('samProData', JSON.stringify(appData));

        // التحقق من الحفظ
        const savedData = JSON.parse(localStorage.getItem('samProData'));
        const savedReceipt = savedData.payments.find(p => p.id === testReceipt.id);

        if (savedReceipt) {
            console.log('✅ تم حفظ السند التجريبي بنجاح');
            alert(`✅ نجح الاختبار المباشر!\n\nتم حفظ سند تجريبي:\nرقم السند: ${testReceipt.paymentNumber}\nالعميل: ${appData.customers[0].name}\nالمبلغ: ${testReceipt.amount} ${testReceipt.currency}\n\nيمكنك الآن إنشاء سند قبض عادي.`);

            // تحديث الصفحة
            showPage('receipts');
        } else {
            throw new Error('فشل في التحقق من حفظ السند');
        }

    } catch (error) {
        console.error('❌ فشل الاختبار المباشر:', error);
        alert('❌ فشل الاختبار المباشر: ' + error.message);
    }
}

/**
 * فحص شامل لمشكلة سند القبض
 */
function debugReceiptIssue() {
    console.log('🔍 بدء فحص شامل لمشكلة سند القبض...');

    const report = {
        timestamp: new Date().toISOString(),
        appData: {
            exists: !!appData,
            customers: appData?.customers?.length || 0,
            payments: appData?.payments?.length || 0,
            settings: !!appData?.settings
        },
        localStorage: {
            available: !!localStorage,
            dataExists: !!localStorage.getItem('samProData'),
            dataSize: localStorage.getItem('samProData')?.length || 0
        },
        dom: {
            receiptCustomer: !!document.getElementById('receiptCustomer'),
            receiptDate: !!document.getElementById('receiptDate'),
            receiptAmount: !!document.getElementById('receiptAmount'),
            receiptCurrency: !!document.getElementById('receiptCurrency'),
            receiptMethod: !!document.getElementById('receiptMethod')
        }
    };

    console.log('📊 تقرير التشخيص الشامل:', report);

    // فحص العملاء بالتفصيل
    if (appData?.customers?.length > 0) {
        console.log('👥 تفاصيل العملاء:');
        appData.customers.forEach((customer, index) => {
            console.log(`العميل ${index + 1}:`, {
                id: customer.id,
                idType: typeof customer.id,
                name: customer.name,
                hasRequiredFields: !!(customer.id && customer.name)
            });
        });
    }

    // اختبار النموذج إذا كان موجوداً
    const customerSelect = document.getElementById('receiptCustomer');
    if (customerSelect) {
        console.log('📝 حالة النموذج:');
        console.log('- عدد خيارات العملاء:', customerSelect.options.length - 1);
        console.log('- القيمة المحددة:', customerSelect.value);
        console.log('- النص المحدد:', customerSelect.options[customerSelect.selectedIndex]?.text);
    }

    // عرض التقرير للمستخدم
    const summary = `📊 تقرير التشخيص:

🔧 البيانات الأساسية:
- appData موجود: ${report.appData.exists ? '✅' : '❌'}
- عدد العملاء: ${report.appData.customers}
- عدد السندات: ${report.appData.payments}
- الإعدادات: ${report.appData.settings ? '✅' : '❌'}

💾 التخزين المحلي:
- localStorage متاح: ${report.localStorage.available ? '✅' : '❌'}
- البيانات موجودة: ${report.localStorage.dataExists ? '✅' : '❌'}
- حجم البيانات: ${report.localStorage.dataSize} حرف

📝 عناصر النموذج:
- اختيار العميل: ${report.dom.receiptCustomer ? '✅' : '❌'}
- التاريخ: ${report.dom.receiptDate ? '✅' : '❌'}
- المبلغ: ${report.dom.receiptAmount ? '✅' : '❌'}
- العملة: ${report.dom.receiptCurrency ? '✅' : '❌'}
- طريقة الدفع: ${report.dom.receiptMethod ? '✅' : '❌'}

${customerSelect ? `📋 النموذج الحالي:
- خيارات العملاء: ${customerSelect.options.length - 1}
- القيمة المحددة: ${customerSelect.value || 'لا شيء'}` : ''}`;

    alert(summary);

    return report;
}

/**
 * اختبار قراءة قيمة العميل المختار
 */
function testCustomerSelection() {
    console.log('🧪 اختبار قراءة قيمة العميل المختار...');

    const customerSelect = document.getElementById('receiptCustomer');
    if (!customerSelect) {
        alert('❌ عنصر اختيار العميل غير موجود');
        return;
    }

    const selectionInfo = {
        value: customerSelect.value,
        valueType: typeof customerSelect.value,
        selectedIndex: customerSelect.selectedIndex,
        selectedText: customerSelect.options[customerSelect.selectedIndex]?.text,
        totalOptions: customerSelect.options.length,
        allOptions: Array.from(customerSelect.options).map(opt => ({
            value: opt.value,
            text: opt.text,
            selected: opt.selected
        }))
    };

    console.log('📊 معلومات الاختيار:', selectionInfo);

    // اختبار التحويل
    const convertedValue = parseInt(customerSelect.value);
    const isValidSelection = customerSelect.value && customerSelect.value !== '' && !isNaN(convertedValue) && convertedValue > 0;

    console.log('🔄 اختبار التحويل:', {
        originalValue: customerSelect.value,
        convertedValue: convertedValue,
        isValid: isValidSelection
    });

    // البحث عن العميل
    let customer = null;
    if (isValidSelection && appData.customers) {
        customer = appData.customers.find(c => c.id === convertedValue || c.id == convertedValue);
        console.log('👤 نتيجة البحث عن العميل:', customer ? customer.name : 'غير موجود');
    }

    // عرض النتائج
    const message = `📊 نتائج اختبار اختيار العميل:

🔍 القيمة المختارة: "${customerSelect.value}"
📝 النص المختار: "${selectionInfo.selectedText}"
🔢 القيمة المحولة: ${convertedValue}
✅ صحة الاختيار: ${isValidSelection ? 'صحيح' : 'خطأ'}
👤 العميل الموجود: ${customer ? customer.name : 'غير موجود'}

📋 إجمالي الخيارات: ${selectionInfo.totalOptions - 1} عميل`;

    alert(message);

    return {
        isValid: isValidSelection,
        customer: customer,
        selectionInfo: selectionInfo
    };
}

/**
 * إجبار إعادة تحميل قائمة العملاء بشكل صحيح
 */
function forceReloadCustomers() {
    console.log('🔄 إجبار إعادة تحميل قائمة العملاء...');

    const customerSelect = document.getElementById('receiptCustomer');
    if (!customerSelect) {
        alert('❌ عنصر اختيار العميل غير موجود');
        return;
    }

    // مسح القائمة تماماً
    customerSelect.innerHTML = '';

    // إضافة الخيار الافتراضي
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'اختر العميل';
    defaultOption.selected = true;
    customerSelect.appendChild(defaultOption);

    // التحقق من وجود العملاء
    if (!appData.customers || appData.customers.length === 0) {
        console.log('⚠️ لا توجد عملاء لإضافتها');
        const noCustomersOption = document.createElement('option');
        noCustomersOption.value = '';
        noCustomersOption.textContent = 'لا توجد عملاء - يرجى إضافة عميل أولاً';
        noCustomersOption.disabled = true;
        customerSelect.appendChild(noCustomersOption);
        return;
    }

    // إضافة العملاء مع التأكد من صحة البيانات
    console.log('👥 إضافة العملاء إلى القائمة...');
    appData.customers.forEach((customer, index) => {
        try {
            if (!customer.id || !customer.name) {
                console.warn(`⚠️ العميل ${index + 1} يحتوي على بيانات ناقصة:`, customer);
                return;
            }

            const option = document.createElement('option');
            option.value = customer.id.toString(); // تأكد من أن القيمة نص
            option.textContent = customer.name;
            option.setAttribute('data-customer-id', customer.id);
            option.setAttribute('data-customer-name', customer.name);

            customerSelect.appendChild(option);
            console.log(`✅ تم إضافة العميل: ${customer.name} (ID: ${customer.id})`);

        } catch (error) {
            console.error(`❌ خطأ في إضافة العميل ${index + 1}:`, error);
        }
    });

    console.log(`✅ تم إعادة تحميل قائمة العملاء: ${customerSelect.options.length - 1} عميل`);

    // اختبار القائمة
    setTimeout(() => {
        console.log('🧪 اختبار القائمة المحدثة...');
        console.log('📊 معلومات القائمة:', {
            totalOptions: customerSelect.options.length,
            currentValue: customerSelect.value,
            selectedIndex: customerSelect.selectedIndex
        });

        alert(`✅ تم إعادة تحميل قائمة العملاء بنجاح!\n\nعدد العملاء: ${customerSelect.options.length - 1}\n\nيمكنك الآن اختيار عميل وحفظ السند.`);
    }, 100);
}

/**
 * إصلاح مشكلة قراءة قيمة العميل
 */
function fixCustomerSelectionIssue() {
    console.log('🔧 إصلاح مشكلة قراءة قيمة العميل...');

    const customerSelect = document.getElementById('receiptCustomer');
    if (!customerSelect) {
        alert('❌ عنصر اختيار العميل غير موجود');
        return;
    }

    // فحص القيمة الحالية
    console.log('🔍 القيمة الحالية:', {
        value: customerSelect.value,
        selectedIndex: customerSelect.selectedIndex,
        selectedText: customerSelect.options[customerSelect.selectedIndex]?.text
    });

    // إعادة بناء القائمة المنسدلة
    console.log('🔄 إعادة بناء القائمة المنسدلة...');

    const currentValue = customerSelect.value;
    customerSelect.innerHTML = '<option value="">اختر العميل</option>';

    if (appData.customers && appData.customers.length > 0) {
        appData.customers.forEach(customer => {
            const option = document.createElement('option');
            option.value = customer.id.toString(); // تأكد من أن القيمة نص
            option.textContent = customer.name;
            if (customer.id.toString() === currentValue) {
                option.selected = true;
            }
            customerSelect.appendChild(option);
        });

        console.log('✅ تم إعادة بناء القائمة بنجاح');
        console.log('📊 عدد الخيارات:', customerSelect.options.length - 1);

        // إعادة تعيين القيمة إذا كانت موجودة
        if (currentValue) {
            customerSelect.value = currentValue;
            console.log('🔄 تم إعادة تعيين القيمة:', currentValue);
        }

        // اختبار القراءة
        setTimeout(() => {
            const testResult = testCustomerSelection();
            if (testResult.isValid) {
                alert('✅ تم إصلاح مشكلة قراءة العميل بنجاح!');
            } else {
                alert('⚠️ لا تزال هناك مشكلة في قراءة العميل. يرجى اختيار عميل من القائمة.');
            }
        }, 100);

    } else {
        alert('❌ لا توجد عملاء في النظام');
    }
}

/**
 * إصلاح مشاكل بيانات سندات القبض
 */
function fixReceiptDataIssues() {
    console.log('🔧 فحص وإصلاح مشاكل بيانات سندات القبض...');

    // التحقق من وجود البيانات الأساسية
    if (!appData) {
        console.log('⚠️ إعادة تهيئة appData...');
        loadData();
    }

    if (!appData.customers) {
        console.log('⚠️ إعادة تهيئة مصفوفة العملاء...');
        appData.customers = [];
    }

    if (!appData.payments) {
        console.log('⚠️ إعادة تهيئة مصفوفة السندات...');
        appData.payments = [];
    }

    if (!appData.settings) {
        console.log('⚠️ إعادة تهيئة الإعدادات...');
        appData.settings = {};
    }

    if (!appData.settings.nextPaymentNumber) {
        console.log('⚠️ إعادة تهيئة أرقام السندات...');
        appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
    }

    // إضافة عميل تجريبي إذا لم يوجد عملاء
    if (appData.customers.length === 0) {
        console.log('⚠️ إضافة عميل تجريبي...');
        const testCustomer = {
            id: Date.now(),
            name: 'عميل تجريبي',
            phone: '0991234567',
            email: 'test@example.com',
            address: 'عنوان تجريبي',
            currentBalance: 0,
            currency: 'SYP',
            createdAt: new Date().toISOString()
        };
        appData.customers.push(testCustomer);
        saveData();
        console.log('✅ تم إضافة عميل تجريبي');

        // تحديث النموذج إذا كان مفتوحاً
        refreshCustomersDropdown();
    }

    // إصلاح معرفات العملاء إذا كانت نصوص
    let fixedCustomers = 0;
    appData.customers.forEach(customer => {
        if (typeof customer.id === 'string' && !isNaN(customer.id)) {
            customer.id = parseInt(customer.id);
            fixedCustomers++;
        }
        if (!customer.id) {
            customer.id = Date.now() + Math.random();
            fixedCustomers++;
        }
    });

    if (fixedCustomers > 0) {
        console.log(`🔧 تم إصلاح ${fixedCustomers} معرف عميل`);
        saveData();
    }

    console.log('📊 حالة البيانات بعد الإصلاح:', {
        customers: appData.customers.length,
        payments: appData.payments.length,
        settings: !!appData.settings,
        nextPaymentNumber: appData.settings.nextPaymentNumber
    });

    console.log('✅ تم فحص وإصلاح البيانات');

    // رسالة نجاح
    alert(`✅ تم إصلاح البيانات بنجاح!\n\n📊 الحالة الحالية:\n• العملاء: ${appData.customers.length}\n• السندات: ${appData.payments.length}\n• الإعدادات: محدثة\n\nيمكنك الآن إنشاء سند قبض جديد.`);

    // إعادة تحميل الصفحة لتطبيق التغييرات
    showPage('receipts');
}



/**
 * تشخيص مشاكل العملاء في سند القبض
 */
function diagnoseCustomerIssues() {
    console.log('🔍 بدء تشخيص مشاكل العملاء...');

    const issues = [];

    // فحص وجود البيانات الأساسية
    if (!appData) {
        issues.push('❌ appData غير موجود');
        return issues;
    }

    if (!appData.customers) {
        issues.push('❌ appData.customers غير موجود');
    } else if (!Array.isArray(appData.customers)) {
        issues.push('❌ appData.customers ليس مصفوفة');
    } else if (appData.customers.length === 0) {
        issues.push('⚠️ لا توجد عملاء في النظام');
    } else {
        console.log('✅ توجد عملاء في النظام:', appData.customers.length);

        // فحص بيانات العملاء
        appData.customers.forEach((customer, index) => {
            if (!customer.id) {
                issues.push(`❌ العميل ${index + 1} لا يحتوي على معرف`);
            }
            if (!customer.name) {
                issues.push(`❌ العميل ${index + 1} لا يحتوي على اسم`);
            }
            if (typeof customer.id !== 'number' && typeof customer.id !== 'string') {
                issues.push(`⚠️ العميل ${customer.name || index + 1} معرفه من نوع غير صحيح: ${typeof customer.id}`);
            }
        });
    }

    // فحص عناصر النموذج
    const customerSelect = document.getElementById('receiptCustomer');
    if (!customerSelect) {
        issues.push('❌ عنصر اختيار العميل غير موجود في النموذج');
    } else {
        const optionsCount = customerSelect.options.length - 1; // -1 للخيار الافتراضي
        console.log(`📊 عدد خيارات العملاء في النموذج: ${optionsCount}`);

        if (optionsCount === 0) {
            issues.push('❌ لا توجد خيارات عملاء في النموذج');
        } else if (appData.customers && optionsCount !== appData.customers.length) {
            issues.push(`⚠️ عدم تطابق: ${appData.customers.length} عملاء في البيانات، ${optionsCount} في النموذج`);
        }
    }

    // عرض النتائج
    if (issues.length === 0) {
        console.log('✅ لا توجد مشاكل في بيانات العملاء');
        alert('✅ تشخيص العملاء: لا توجد مشاكل\n\nجميع البيانات سليمة ويمكن إنشاء سند القبض بنجاح.');
    } else {
        console.log('❌ تم العثور على مشاكل:', issues);
        alert(`❌ تم العثور على المشاكل التالية:\n\n${issues.join('\n')}\n\nيرجى الضغط على "إصلاح المشاكل" لحل هذه المشاكل.`);
    }

    return issues;
}

/**
 * حفظ سند القبض - نسخة مبسطة ومباشرة
 */
function simpleAddReceipt() {
    console.log('🚀 بدء حفظ سند القبض - النسخة المبسطة والمحسنة');

    try {
        // جمع البيانات من النموذج مع فحص دقيق
        const customerSelect = document.getElementById('receiptCustomer');
        const dateInput = document.getElementById('receiptDate');
        const amountInput = document.getElementById('receiptAmount');
        const currencySelect = document.getElementById('receiptCurrency');
        const methodSelect = document.getElementById('receiptMethod');
        const notesInput = document.getElementById('receiptNotes');

        // التحقق من وجود العناصر
        if (!customerSelect || !dateInput || !amountInput || !currencySelect || !methodSelect) {
            alert('❌ خطأ: عناصر النموذج غير موجودة');
            return;
        }

        // فحص مفصل لاختيار العميل
        console.log('🔍 فحص مفصل لاختيار العميل:', {
            element: !!customerSelect,
            value: customerSelect.value,
            valueLength: customerSelect.value?.length,
            valueType: typeof customerSelect.value,
            selectedIndex: customerSelect.selectedIndex,
            selectedOption: customerSelect.options[customerSelect.selectedIndex],
            selectedText: customerSelect.options[customerSelect.selectedIndex]?.text,
            allOptions: Array.from(customerSelect.options).map(opt => ({
                value: opt.value,
                text: opt.text,
                selected: opt.selected
            }))
        });

        // استخراج القيم مع معالجة خاصة للعميل
        let customerId = customerSelect.value;

        // تنظيف قيمة العميل
        if (customerId) {
            customerId = customerId.toString().trim();
            console.log('🧹 قيمة العميل بعد التنظيف:', customerId);
        }

        const date = dateInput.value;
        const amount = amountInput.value;
        const currency = currencySelect.value;
        const method = methodSelect.value;
        const notes = notesInput ? notesInput.value : '';

        console.log('📊 البيانات المستخرجة:', {
            customerId,
            customerIdType: typeof customerId,
            customerIdLength: customerId?.length,
            date, amount, currency, method, notes
        });

        // التحقق الأساسي المحسن للعميل
        if (!customerId || customerId === '' || customerId === '0' || customerId === 'undefined' || customerId === 'null') {
            console.error('❌ فشل التحقق من العميل:', {
                value: customerId,
                isEmpty: !customerId,
                isEmptyString: customerId === '',
                isZero: customerId === '0'
            });
            alert('❌ يرجى اختيار العميل من القائمة المنسدلة\n\nتأكد من:\n- اختيار عميل من القائمة\n- عدم اختيار "اختر العميل"');
            customerSelect.focus();
            customerSelect.style.borderColor = '#dc3545';
            setTimeout(() => customerSelect.style.borderColor = '', 3000);
            return;
        }

        if (!date) {
            alert('❌ يرجى إدخال التاريخ');
            dateInput.focus();
            return;
        }

        if (!amount || parseFloat(amount) <= 0) {
            alert('❌ يرجى إدخال مبلغ صحيح');
            amountInput.focus();
            return;
        }

        if (!currency) {
            alert('❌ يرجى اختيار العملة');
            currencySelect.focus();
            return;
        }

        if (!method) {
            alert('❌ يرجى اختيار طريقة الدفع');
            methodSelect.focus();
            return;
        }

        // التحقق من وجود العملاء
        if (!appData.customers || appData.customers.length === 0) {
            alert('❌ لا توجد عملاء في النظام');
            return;
        }

        // البحث عن العميل بطرق متعددة
        console.log('🔍 البحث عن العميل...');
        console.log('📊 العملاء المتاحون:', appData.customers.map(c => ({
            id: c.id,
            idType: typeof c.id,
            name: c.name
        })));

        let customer = null;

        // الطريقة الأولى: مطابقة مباشرة
        customer = appData.customers.find(c => c.id === customerId);
        if (customer) {
            console.log('✅ تم العثور على العميل بالمطابقة المباشرة:', customer.name);
        } else {
            // الطريقة الثانية: مطابقة مرنة
            customer = appData.customers.find(c => c.id == customerId);
            if (customer) {
                console.log('✅ تم العثور على العميل بالمطابقة المرنة:', customer.name);
            } else {
                // الطريقة الثالثة: تحويل إلى رقم
                const customerIdNum = parseInt(customerId);
                if (!isNaN(customerIdNum)) {
                    customer = appData.customers.find(c => c.id === customerIdNum || c.id == customerIdNum);
                    if (customer) {
                        console.log('✅ تم العثور على العميل بالتحويل الرقمي:', customer.name);
                    }
                }
            }
        }

        if (!customer) {
            console.error('❌ لم يتم العثور على العميل:', {
                searchValue: customerId,
                searchType: typeof customerId,
                availableCustomers: appData.customers.map(c => `${c.name} (ID: ${c.id}, Type: ${typeof c.id})`)
            });
            alert(`❌ العميل المحدد غير موجود في قاعدة البيانات\n\nالقيمة المختارة: "${customerId}"\nنوع البيانات: ${typeof customerId}\n\nالعملاء المتاحون:\n${appData.customers.map(c => `- ${c.name} (ID: ${c.id})`).join('\n')}`);
            return;
        }

        console.log('✅ تم العثور على العميل:', customer.name);

        // تهيئة البيانات
        if (!appData.payments) appData.payments = [];
        if (!appData.settings) appData.settings = {};
        if (!appData.settings.nextPaymentNumber) {
            appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
        }

        // إنشاء السند
        const receiptNumber = `REC-${appData.settings.nextPaymentNumber.receipt}`;
        const newReceipt = {
            id: Date.now(),
            paymentNumber: receiptNumber,
            paymentType: 'receipt',
            customerId: parseInt(customerId),
            paymentDate: date,
            amount: parseFloat(amount),
            currency: currency,
            paymentMethod: method,
            notes: notes,
            status: 'confirmed',
            createdAt: new Date().toISOString()
        };

        console.log('📄 السند الجديد:', newReceipt);

        // حفظ السند
        appData.payments.push(newReceipt);
        appData.settings.nextPaymentNumber.receipt++;

        // حفظ في localStorage
        localStorage.setItem('samProData', JSON.stringify(appData));

        console.log('✅ تم حفظ السند بنجاح');

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addReceiptModal'));
        if (modal) modal.hide();

        // رسالة نجاح
        alert(`✅ تم حفظ سند القبض بنجاح!\n\nرقم السند: ${receiptNumber}\nالعميل: ${customer.name}\nالمبلغ: ${amount} ${currency}`);

        // تحديث الصفحة
        showPage('receipts');

    } catch (error) {
        console.error('❌ خطأ في حفظ السند:', error);
        alert('❌ حدث خطأ في حفظ السند: ' + error.message);
    }
}

/**
 * اختبار سريع لحفظ سند القبض
 */
function quickReceiptTest() {
    console.log('🧪 بدء الاختبار السريع لحفظ سند القبض...');

    // فحص البيانات الأساسية
    if (!appData) {
        alert('❌ appData غير موجود');
        return;
    }

    if (!appData.customers || appData.customers.length === 0) {
        alert('❌ لا توجد عملاء في النظام');
        return;
    }

    // محاولة فتح النموذج
    try {
        showAddReceiptModal();

        // انتظار قليل ثم ملء النموذج
        setTimeout(() => {
            const customerSelect = document.getElementById('receiptCustomer');
            const dateInput = document.getElementById('receiptDate');
            const amountInput = document.getElementById('receiptAmount');
            const currencySelect = document.getElementById('receiptCurrency');
            const methodSelect = document.getElementById('receiptMethod');

            if (!customerSelect || !dateInput || !amountInput || !currencySelect || !methodSelect) {
                alert('❌ عناصر النموذج غير موجودة');
                return;
            }

            // ملء النموذج بقيم تجريبية
            customerSelect.value = appData.customers[0].id;
            dateInput.value = new Date().toISOString().split('T')[0];
            amountInput.value = '1000';
            currencySelect.value = 'SYP';
            methodSelect.value = 'cash';

            console.log('✅ تم ملء النموذج بقيم تجريبية');
            console.log('📊 القيم:', {
                customer: customerSelect.value,
                date: dateInput.value,
                amount: amountInput.value,
                currency: currencySelect.value,
                method: methodSelect.value
            });

            alert('✅ تم ملء النموذج بقيم تجريبية\n\nيمكنك الآن الضغط على "حفظ السند" لاختبار العملية');

        }, 500);

    } catch (error) {
        console.error('❌ خطأ في الاختبار:', error);
        alert('❌ خطأ في الاختبار: ' + error.message);
    }
}

/**
 * إنشاء بيانات تجريبية للاختبار
 */
function createTestData() {
    console.log('🧪 إنشاء بيانات تجريبية...');

    // إضافة عملاء تجريبيين
    if (!appData.customers || appData.customers.length === 0) {
        appData.customers = [
            {
                id: 1,
                name: 'أحمد محمد علي',
                phone: '0991234567',
                email: 'ahmed@example.com',
                address: 'دمشق - المزة',
                currentBalance: 0,
                currency: 'SYP',
                createdAt: new Date().toISOString()
            },
            {
                id: 2,
                name: 'فاطمة أحمد',
                phone: '0992345678',
                email: 'fatima@example.com',
                address: 'حلب - الشهباء',
                currentBalance: 0,
                currency: 'SYP',
                createdAt: new Date().toISOString()
            },
            {
                id: 3,
                name: 'محمد خالد',
                phone: '0993456789',
                email: 'mohammed@example.com',
                address: 'حمص - الوعر',
                currentBalance: 0,
                currency: 'USD',
                createdAt: new Date().toISOString()
            }
        ];
        console.log('✅ تم إضافة 3 عملاء تجريبيين');
    }

    // تهيئة البيانات الأساسية
    if (!appData.payments) appData.payments = [];
    if (!appData.settings) appData.settings = {};
    if (!appData.settings.nextPaymentNumber) {
        appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
    }

    // حفظ البيانات
    saveData();

    alert(`✅ تم إنشاء بيانات تجريبية بنجاح!\n\n📊 البيانات المضافة:\n• ${appData.customers.length} عملاء\n• إعدادات النظام\n• أرقام السندات\n\nيمكنك الآن إنشاء سند قبض.`);

    // إعادة تحميل الصفحة
    showPage('receipts');
}

/**
 * الحصول على الحسابات المتاحة في دفتر اليومية
 */
function getAvailableAccounts() {
    const accounts = new Set();

    if (appData.journalEntries) {
        appData.journalEntries.forEach(entry => {
            if (entry.debitAccount) accounts.add(entry.debitAccount);
            if (entry.creditAccount) accounts.add(entry.creditAccount);
        });
    }

    // إضافة حسابات افتراضية
    const defaultAccounts = [
        'الصندوق - ل.س', 'الصندوق - $', 'الصندوق - €',
        'البنك - ل.س', 'البنك - $', 'البنك - €',
        'العملاء', 'الموردين', 'المبيعات', 'المشتريات',
        'المصروفات العمومية', 'الإيرادات الأخرى'
    ];

    defaultAccounts.forEach(account => accounts.add(account));

    return Array.from(accounts).sort();
}

/**
 * حساب ملخص دفتر اليومية
 */
function calculateJournalSummary() {
    console.log('🧮 حساب ملخص دفتر اليومية...');

    if (!appData.journalEntries || appData.journalEntries.length === 0) {
        alert('لا توجد قيود محاسبية لحساب الملخص');
        return;
    }

    // تجميع البيانات حسب العملة
    const currencyTotals = {};
    const accountBalances = {};

    appData.journalEntries.forEach(entry => {
        const currency = entry.currency || 'SYP';

        // تجميع الإجماليات حسب العملة
        if (!currencyTotals[currency]) {
            currencyTotals[currency] = { debit: 0, credit: 0, entries: 0 };
        }
        currencyTotals[currency].debit += entry.debitAmount || 0;
        currencyTotals[currency].credit += entry.creditAmount || 0;
        currencyTotals[currency].entries++;

        // تجميع أرصدة الحسابات
        const debitAccount = `${entry.debitAccount} - ${getCurrencySymbol(currency)}`;
        const creditAccount = `${entry.creditAccount} - ${getCurrencySymbol(currency)}`;

        if (!accountBalances[debitAccount]) accountBalances[debitAccount] = 0;
        if (!accountBalances[creditAccount]) accountBalances[creditAccount] = 0;

        accountBalances[debitAccount] += entry.debitAmount || 0;
        accountBalances[creditAccount] -= entry.creditAmount || 0;
    });

    // إنشاء تقرير الملخص
    let summaryHTML = `
        <div class="modal fade" id="journalSummaryModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-calculator me-2"></i>
                            ملخص دفتر اليومية المفصل
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <!-- ملخص العملات -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2">ملخص العملات</h6>
                                <div class="row">
    `;

    Object.keys(currencyTotals).forEach(currency => {
        const totals = currencyTotals[currency];
        const symbol = getCurrencySymbol(currency);
        const name = getCurrencyName(currency);
        const balance = totals.debit - totals.credit;
        const balanceClass = Math.abs(balance) < 0.01 ? 'success' : (balance > 0 ? 'warning' : 'info');

        summaryHTML += `
            <div class="col-md-4 mb-3">
                <div class="card border-${balanceClass}">
                    <div class="card-body text-center">
                        <h6 class="card-title">${name} (${symbol})</h6>
                        <div class="row">
                            <div class="col-6">
                                <small class="text-muted">إجمالي المدين</small>
                                <div class="fw-bold text-danger">${formatCurrency(totals.debit)}</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">إجمالي الدائن</small>
                                <div class="fw-bold text-success">${formatCurrency(totals.credit)}</div>
                            </div>
                        </div>
                        <hr class="my-2">
                        <div class="text-${balanceClass}">
                            <strong>الرصيد: ${formatCurrency(Math.abs(balance))}</strong>
                            <br><small>${Math.abs(balance) < 0.01 ? 'متوازن' : (balance > 0 ? 'مدين' : 'دائن')}</small>
                            <br><small class="text-muted">${totals.entries} قيد</small>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });

    summaryHTML += `
                                </div>
                            </div>
                        </div>

                        <!-- أرصدة الحسابات -->
                        <div class="row">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2">أرصدة الحسابات</h6>
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>الحساب</th>
                                                <th>الرصيد</th>
                                                <th>النوع</th>
                                            </tr>
                                        </thead>
                                        <tbody>
    `;

    Object.keys(accountBalances)
        .filter(account => Math.abs(accountBalances[account]) >= 0.01)
        .sort()
        .forEach(account => {
            const balance = accountBalances[account];
            const balanceType = balance > 0 ? 'مدين' : 'دائن';
            const balanceClass = balance > 0 ? 'text-danger' : 'text-success';

            summaryHTML += `
                <tr>
                    <td>${account}</td>
                    <td class="${balanceClass} fw-bold">${formatCurrency(Math.abs(balance))}</td>
                    <td><span class="badge ${balance > 0 ? 'bg-danger' : 'bg-success'}">${balanceType}</span></td>
                </tr>
            `;
        });

    summaryHTML += `
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-primary" onclick="exportJournalSummary()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير الملخص
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                    </div>
                </div>
            </div>
        </div>
    `;

    // إضافة النافذة وعرضها
    const existingModal = document.getElementById('journalSummaryModal');
    if (existingModal) {
        existingModal.remove();
    }

    document.body.insertAdjacentHTML('beforeend', summaryHTML);
    const modal = new bootstrap.Modal(document.getElementById('journalSummaryModal'));
    modal.show();

    console.log('✅ تم عرض ملخص دفتر اليومية');
}

/**
 * التحقق من توازن دفتر اليومية
 */
function validateJournalBalance() {
    console.log('⚖️ التحقق من توازن دفتر اليومية...');

    if (!appData.journalEntries || appData.journalEntries.length === 0) {
        alert('لا توجد قيود محاسبية للتحقق منها');
        return;
    }

    const currencyTotals = {};
    const imbalancedEntries = [];

    appData.journalEntries.forEach(entry => {
        const currency = entry.currency || 'SYP';

        if (!currencyTotals[currency]) {
            currencyTotals[currency] = { debit: 0, credit: 0 };
        }

        const debitAmount = entry.debitAmount || 0;
        const creditAmount = entry.creditAmount || 0;

        currencyTotals[currency].debit += debitAmount;
        currencyTotals[currency].credit += creditAmount;

        // فحص توازن القيد الفردي
        if (Math.abs(debitAmount - creditAmount) > 0.01) {
            imbalancedEntries.push({
                id: entry.id,
                description: entry.description,
                debit: debitAmount,
                credit: creditAmount,
                difference: Math.abs(debitAmount - creditAmount),
                currency: currency
            });
        }
    });

    let message = '⚖️ نتائج فحص التوازن:\n\n';
    let hasIssues = false;

    // فحص التوازن الإجمالي لكل عملة
    Object.keys(currencyTotals).forEach(currency => {
        const totals = currencyTotals[currency];
        const difference = Math.abs(totals.debit - totals.credit);
        const symbol = getCurrencySymbol(currency);

        if (difference > 0.01) {
            hasIssues = true;
            message += `❌ ${getCurrencyName(currency)}: غير متوازن\n`;
            message += `   المدين: ${formatCurrency(totals.debit)} ${symbol}\n`;
            message += `   الدائن: ${formatCurrency(totals.credit)} ${symbol}\n`;
            message += `   الفرق: ${formatCurrency(difference)} ${symbol}\n\n`;
        } else {
            message += `✅ ${getCurrencyName(currency)}: متوازن (${formatCurrency(totals.debit)} ${symbol})\n`;
        }
    });

    // فحص القيود غير المتوازنة
    if (imbalancedEntries.length > 0) {
        hasIssues = true;
        message += `\n⚠️ قيود غير متوازنة (${imbalancedEntries.length}):\n`;
        imbalancedEntries.slice(0, 5).forEach(entry => {
            message += `- ${entry.description}: فرق ${formatCurrency(entry.difference)} ${getCurrencySymbol(entry.currency)}\n`;
        });

        if (imbalancedEntries.length > 5) {
            message += `... و ${imbalancedEntries.length - 5} قيود أخرى\n`;
        }
    }

    if (!hasIssues) {
        message += '\n🎉 جميع القيود متوازنة!';
        alert(message);
    } else {
        message += '\nهل تريد عرض تقرير مفصل؟';
        if (confirm(message)) {
            showJournalAnalysis();
        }
    }

    console.log('✅ انتهى فحص التوازن');
}

/**
 * تشخيص مشاكل إعدادات العملات
 */
function diagnoseCurrencySettings() {
    console.log('🔍 بدء تشخيص إعدادات العملات...');

    const issues = [];
    const fixes = [];

    // فحص البيانات الأساسية
    if (!appData.settings) {
        issues.push('❌ كائن الإعدادات غير موجود');
        fixes.push('إنشاء كائن الإعدادات');
    } else {
        console.log('✅ كائن الإعدادات موجود');
    }

    // فحص العملة الافتراضية
    if (!appData.settings.currency) {
        issues.push('❌ العملة الافتراضية غير محددة');
        fixes.push('تعيين الليرة السورية كعملة افتراضية');
    } else {
        console.log('✅ العملة الافتراضية:', appData.settings.currency);
    }

    // فحص رمز العملة
    if (!appData.settings.currencySymbol) {
        issues.push('❌ رمز العملة غير محدد');
        fixes.push('تعيين رمز العملة الافتراضي');
    } else {
        console.log('✅ رمز العملة:', appData.settings.currencySymbol);
    }

    // فحص إعدادات العملات المتعددة
    if (appData.settings.enableMultiCurrency === undefined) {
        issues.push('❌ إعداد العملات المتعددة غير محدد');
        fixes.push('تعيين العملات المتعددة كمعطلة افتراضياً');
    } else {
        console.log('✅ العملات المتعددة:', appData.settings.enableMultiCurrency ? 'مفعلة' : 'معطلة');
    }

    // فحص أسعار الصرف
    if (appData.settings.enableMultiCurrency) {
        if (!appData.settings.exchangeRates) {
            issues.push('❌ أسعار الصرف غير موجودة رغم تفعيل العملات المتعددة');
            fixes.push('إنشاء كائن أسعار الصرف');
        } else {
            const ratesCount = Object.keys(appData.settings.exchangeRates).filter(key => !key.includes('_updated')).length;
            console.log('✅ أسعار الصرف موجودة، العدد:', ratesCount);

            if (ratesCount === 0) {
                issues.push('❌ لا توجد أسعار صرف محددة');
                fixes.push('إضافة أسعار صرف افتراضية');
            }
        }
    }

    // فحص localStorage
    try {
        const savedData = localStorage.getItem('samProData');
        if (!savedData) {
            issues.push('❌ لا توجد بيانات محفوظة في localStorage');
            fixes.push('حفظ البيانات في localStorage');
        } else {
            const parsedData = JSON.parse(savedData);
            if (!parsedData.settings) {
                issues.push('❌ الإعدادات غير محفوظة في localStorage');
                fixes.push('حفظ الإعدادات في localStorage');
            } else {
                console.log('✅ الإعدادات محفوظة في localStorage');
            }
        }
    } catch (error) {
        issues.push('❌ خطأ في الوصول إلى localStorage: ' + error.message);
        fixes.push('إصلاح مشكلة localStorage');
    }

    // عرض النتائج
    let message = '🔍 نتائج تشخيص إعدادات العملات:\n\n';

    if (issues.length === 0) {
        message += '✅ لا توجد مشاكل! إعدادات العملات تعمل بشكل صحيح.\n\n';
        message += `📊 إحصائيات:\n`;
        message += `- العملة الافتراضية: ${appData.settings.currency || 'غير محدد'}\n`;
        message += `- رمز العملة: ${appData.settings.currencySymbol || 'غير محدد'}\n`;
        message += `- العملات المتعددة: ${appData.settings.enableMultiCurrency ? 'مفعلة' : 'معطلة'}\n`;
        if (appData.settings.enableMultiCurrency && appData.settings.exchangeRates) {
            const ratesCount = Object.keys(appData.settings.exchangeRates).filter(key => !key.includes('_updated')).length;
            message += `- أسعار الصرف: ${ratesCount} عملة`;
        }
    } else {
        message += '❌ المشاكل المكتشفة:\n';
        issues.forEach((issue, index) => {
            message += `${index + 1}. ${issue}\n`;
        });

        message += '\n🔧 الإصلاحات المقترحة:\n';
        fixes.forEach((fix, index) => {
            message += `${index + 1}. ${fix}\n`;
        });

        message += '\nهل تريد تطبيق الإصلاحات تلقائياً؟';

        if (confirm(message)) {
            fixCurrencySettings();
        }
    }

    if (issues.length === 0) {
        alert(message);
    }

    console.log('🔍 انتهى تشخيص إعدادات العملات');
}

/**
 * إصلاح مشاكل إعدادات العملات
 */
function fixCurrencySettings() {
    console.log('🔧 بدء إصلاح إعدادات العملات...');

    let fixesApplied = [];

    // إصلاح كائن الإعدادات
    if (!appData.settings) {
        appData.settings = {};
        fixesApplied.push('إنشاء كائن الإعدادات');
    }

    // إصلاح العملة الافتراضية
    if (!appData.settings.currency) {
        appData.settings.currency = 'SYP';
        fixesApplied.push('تعيين الليرة السورية كعملة افتراضية');
    }

    // إصلاح رمز العملة
    if (!appData.settings.currencySymbol) {
        appData.settings.currencySymbol = getCurrencySymbol(appData.settings.currency);
        fixesApplied.push('تعيين رمز العملة الافتراضي');
    }

    // إصلاح إعدادات العملات المتعددة
    if (appData.settings.enableMultiCurrency === undefined) {
        appData.settings.enableMultiCurrency = false;
        fixesApplied.push('تعيين العملات المتعددة كمعطلة افتراضياً');
    }

    // إصلاح أسعار الصرف
    if (appData.settings.enableMultiCurrency && !appData.settings.exchangeRates) {
        appData.settings.exchangeRates = {
            'USD': 2500,
            'EUR': 2700,
            'SAR': 667,
            'AED': 680,
            'EGP': 83,
            'JOD': 3521,
            'LBP': 1.67,
            'TRY': 91,
            'GBP': 3125
        };
        fixesApplied.push('إضافة أسعار صرف افتراضية');
    }

    // إصلاح معدل الضريبة
    if (!appData.settings.taxRate) {
        appData.settings.taxRate = 0;
        fixesApplied.push('تعيين معدل ضريبة افتراضي');
    }

    // إصلاح معلومات الشركة الافتراضية
    if (!appData.settings.companyName) {
        appData.settings.companyName = 'SAM PRO';
        fixesApplied.push('تعيين اسم شركة افتراضي');
    }

    // حفظ البيانات
    try {
        saveData();
        fixesApplied.push('حفظ البيانات في localStorage');
        console.log('✅ تم حفظ البيانات المُصلحة');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات المُصلحة:', error);
    }

    if (fixesApplied.length > 0) {
        const message = `✅ تم تطبيق الإصلاحات التالية:\n\n${fixesApplied.map((fix, index) => `${index + 1}. ${fix}`).join('\n')}\n\nإعدادات العملات جاهزة الآن للعمل!`;
        alert(message);
        console.log('✅ تم إصلاح جميع مشاكل إعدادات العملات');

        // إعادة تحميل صفحة الإعدادات
        setTimeout(() => {
            showPage('settings');
        }, 1000);
    } else {
        console.log('ℹ️ لا توجد مشاكل تحتاج إصلاح');
    }
}

/**
 * اختبار حفظ إعدادات العملات
 */
function testCurrencySettingsSave() {
    console.log('🧪 بدء اختبار حفظ إعدادات العملات...');

    // التحقق من البيانات أولاً
    fixCurrencySettings();

    // ملء النموذج بقيم تجريبية
    const companyNameInput = document.getElementById('companyName');
    const currencySelect = document.getElementById('currency');
    const enableMultiCurrencyCheckbox = document.getElementById('enableMultiCurrency');

    if (companyNameInput) {
        companyNameInput.value = 'شركة تجريبية للاختبار';
    }

    if (currencySelect) {
        currencySelect.value = 'SYP';
    }

    if (enableMultiCurrencyCheckbox) {
        enableMultiCurrencyCheckbox.checked = true;
        // تفعيل جدول أسعار الصرف
        toggleMultiCurrency();
    }

    // ملء أسعار الصرف التجريبية
    const testRates = {
        'USD': 2500,
        'EUR': 2700,
        'SAR': 667,
        'AED': 680
    };

    Object.keys(testRates).forEach(currency => {
        const rateInput = document.getElementById(`rate_${currency}`);
        if (rateInput) {
            rateInput.value = testRates[currency];
        }
    });

    alert('✅ تم ملء النموذج بقيم تجريبية\n\nيمكنك الآن الضغط على "حفظ إعدادات الشركة" لاختبار العملية');

    console.log('✅ انتهى اختبار الإعداد');
}

function viewInvoice(id) {
    const invoice = appData.invoices.find(inv => inv.id === id);
    if (!invoice) {
        alert('لم يتم العثور على الفاتورة');
        return;
    }

    // عرض تفاصيل الفاتورة في نافذة منبثقة
    const client = invoice.customerId ?
        appData.customers.find(c => c.id === invoice.customerId) :
        appData.suppliers.find(s => s.id === invoice.supplierId);

    const itemsHtml = invoice.items.map(item => {
        const product = appData.products.find(p => p.id === item.productId);
        return `
            <tr>
                <td>
                    <strong>${product ? product.name : 'منتج محذوف'}</strong>
                    ${item.specifications ? `<br><small class="text-muted">${item.specifications}</small>` : ''}
                </td>
                <td>${item.quantity}</td>
                <td>${formatCurrency(item.unitPrice)}</td>
                <td>${formatCurrency(item.totalAmount)}</td>
            </tr>
        `;
    }).join('');

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'viewInvoiceModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">فاتورة ${invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'} رقم ${invoice.invoiceNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>${invoice.invoiceType === 'sale' ? 'العميل' : 'المورد'}:</strong> ${client ? client.name : 'غير محدد'}
                        </div>
                        <div class="col-md-6">
                            <strong>التاريخ:</strong> ${invoice.invoiceDate}
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>تاريخ الاستحقاق:</strong> ${invoice.dueDate || 'غير محدد'}
                        </div>
                        <div class="col-md-6">
                            <strong>الحالة:</strong> <span class="badge bg-${invoice.status === 'confirmed' ? 'success' : 'warning'}">${getStatusText(invoice.status)}</span>
                        </div>
                    </div>

                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>الصنف</th>
                                <th>الكمية</th>
                                <th>سعر الوحدة</th>
                                <th>المجموع</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                        </tbody>
                    </table>

                    <div class="row">
                        <div class="col-md-6 offset-md-6">
                            <table class="table">
                                <tr><td><strong>المجموع الفرعي:</strong></td><td>${formatCurrency(invoice.subtotal)}</td></tr>
                                <tr><td><strong>الخصم (${invoice.discountRate}%):</strong></td><td>${formatCurrency(invoice.discountAmount)}</td></tr>
                                <tr><td><strong>الضريبة (${invoice.taxRate}%):</strong></td><td>${formatCurrency(invoice.taxAmount)}</td></tr>
                                <tr class="table-primary"><td><strong>المجموع النهائي:</strong></td><td><strong>${formatCurrency(invoice.totalAmount)}</strong></td></tr>
                            </table>
                        </div>
                    </div>

                    ${invoice.notes ? `<div class="mt-3"><strong>ملاحظات:</strong> ${invoice.notes}</div>` : ''}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="printInvoice(${invoice.id})">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function editInvoice(id) {
    const invoice = appData.invoices.find(inv => inv.id === id);
    if (!invoice) {
        alert('لم يتم العثور على الفاتورة');
        return;
    }

    // التحقق من إمكانية التعديل
    if (invoice.status === 'confirmed') {
        if (!confirm('هذه الفاتورة مؤكدة. التعديل سيؤثر على المخزون والحسابات. هل تريد المتابعة؟')) {
            return;
        }
    }

    // إنشاء نافذة تعديل الفاتورة
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editInvoiceModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل فاتورة ${invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'} رقم ${invoice.invoiceNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editInvoiceForm">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editInvoiceType" class="form-label">نوع الفاتورة</label>
                                <select class="form-select" id="editInvoiceType" disabled>
                                    <option value="sale" ${invoice.invoiceType === 'sale' ? 'selected' : ''}>فاتورة مبيعات</option>
                                    <option value="purchase" ${invoice.invoiceType === 'purchase' ? 'selected' : ''}>فاتورة مشتريات</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editInvoiceClient" class="form-label">${invoice.invoiceType === 'sale' ? 'العميل' : 'المورد'}</label>
                                <select class="form-select" id="editInvoiceClient" required>
                                    ${invoice.invoiceType === 'sale' ?
                                        appData.customers.map(c => `<option value="${c.id}" ${c.id === invoice.customerId ? 'selected' : ''}>${c.name}</option>`).join('') :
                                        appData.suppliers.map(s => `<option value="${s.id}" ${s.id === invoice.supplierId ? 'selected' : ''}>${s.name}</option>`).join('')
                                    }
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editInvoiceDate" class="form-label">تاريخ الفاتورة</label>
                                <input type="date" class="form-control" id="editInvoiceDate" value="${invoice.invoiceDate}" required>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editInvoiceDueDate" class="form-label">تاريخ الاستحقاق</label>
                                <input type="date" class="form-control" id="editInvoiceDueDate" value="${invoice.dueDate || ''}">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editInvoiceStatus" class="form-label">حالة الفاتورة</label>
                                <select class="form-select" id="editInvoiceStatus">
                                    <option value="draft" ${invoice.status === 'draft' ? 'selected' : ''}>مسودة</option>
                                    <option value="confirmed" ${invoice.status === 'confirmed' ? 'selected' : ''}>مؤكدة</option>
                                </select>
                            </div>
                        </div>

                        <!-- عناصر الفاتورة -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <label class="form-label">عناصر الفاتورة</label>
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="addEditInvoiceItem()">
                                    <i class="fas fa-plus me-1"></i>إضافة عنصر
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>الصنف</th>
                                            <th>الكمية</th>
                                            <th>سعر الوحدة</th>
                                            <th>المجموع</th>
                                            <th>إجراءات</th>
                                        </tr>
                                    </thead>
                                    <tbody id="editInvoiceItems">
                                        ${invoice.items.map((item, index) => {
                                            const product = appData.products.find(p => p.id === item.productId);
                                            return `
                                                <tr>
                                                    <td>
                                                        <select class="form-select item-product" required>
                                                            ${appData.products.map(p => `<option value="${p.id}" ${p.id === item.productId ? 'selected' : ''}>${p.name}</option>`).join('')}
                                                        </select>
                                                    </td>
                                                    <td><input type="number" class="form-control item-quantity" value="${item.quantity}" min="0" step="0.01" required></td>
                                                    <td><input type="number" class="form-control item-price" value="${item.unitPrice}" min="0" step="0.01" required></td>
                                                    <td><span class="item-total">${formatCurrency(item.totalAmount)}</span></td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeEditInvoiceItem(this)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            `;
                                        }).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- الحسابات -->
                        <div class="row">
                            <div class="col-md-6 offset-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row mb-2">
                                            <div class="col-6"><strong>المجموع الفرعي:</strong></div>
                                            <div class="col-6 text-end" id="editSubtotal">${formatCurrency(invoice.subtotal)}</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-4">
                                                <label for="editDiscountRate" class="form-label">خصم (%):</label>
                                                <input type="number" class="form-control form-control-sm" id="editDiscountRate" value="${invoice.discountRate}" min="0" max="100" step="0.01">
                                            </div>
                                            <div class="col-8 text-end pt-4" id="editDiscountAmount">${formatCurrency(invoice.discountAmount)}</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-4">
                                                <label for="editTaxRate" class="form-label">ضريبة (%):</label>
                                                <input type="number" class="form-control form-control-sm" id="editTaxRate" value="${invoice.taxRate}" min="0" max="100" step="0.01">
                                            </div>
                                            <div class="col-8 text-end pt-4" id="editTaxAmount">${formatCurrency(invoice.taxAmount)}</div>
                                        </div>
                                        <hr>
                                        <div class="row">
                                            <div class="col-6"><strong>المجموع النهائي:</strong></div>
                                            <div class="col-6 text-end"><strong id="editTotalAmount">${formatCurrency(invoice.totalAmount)}</strong></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editInvoiceNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editInvoiceNotes" rows="3">${invoice.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="updateInvoice(${invoice.id})">حفظ التعديلات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إضافة مستمعي الأحداث لحساب الإجماليات
    setupEditInvoiceCalculations();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function printInvoice(id) {
    alert('وظيفة طباعة الفاتورة قيد التطوير');
}

// وظائف سندات القبض والدفع
function showAddReceiptModal() {
    console.log('🔍 فتح نافذة إضافة سند قبض...');
    console.log('📊 حالة البيانات:', {
        customersCount: appData.customers ? appData.customers.length : 0,
        customers: appData.customers ? appData.customers.map(c => ({ id: c.id, name: c.name })) : []
    });

    // التحقق من وجود العملاء
    if (!appData.customers || appData.customers.length === 0) {
        alert('لا توجد عملاء في النظام. يرجى إضافة عميل أولاً من قائمة العملاء.');
        showPage('customers');
        return;
    }

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">إضافة سند قبض جديد</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addReceiptForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="receiptCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                                <select class="form-select" id="receiptCustomer" required>
                                    <option value="">اختر العميل</option>
                                    ${appData.customers && appData.customers.length > 0 ?
                                        appData.customers.map(c => `<option value="${c.id}" data-customer-name="${c.name}">${c.name}</option>`).join('') :
                                        '<option value="" disabled>لا توجد عملاء - يرجى إضافة عميل أولاً</option>'
                                    }
                                </select>
                                <div class="form-text">عدد العملاء المتاحين: ${appData.customers.length}</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="receiptDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="receiptDate" value="${new Date().toISOString().split('T')[0]}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="receiptAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="receiptAmount" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="receiptCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="receiptCurrency" required>
                                    <option value="SYP" selected>ليرة سورية (ل.س)</option>
                                    <option value="USD">دولار أمريكي ($)</option>
                                    <option value="EUR">يورو (€)</option>
                                    <option value="TRY">ليرة تركية (₺)</option>
                                    <option value="SAR">ريال سعودي (ر.س)</option>
                                    <option value="AED">درهم إماراتي (د.إ)</option>
                                    <option value="EGP">جنيه مصري (ج.م)</option>
                                    <option value="JOD">دينار أردني (د.أ)</option>
                                    <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                    <option value="GBP">جنيه إسترليني (£)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="receiptMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="receiptMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash">نقدي</option>
                                    <option value="bank">تحويل بنكي</option>
                                    <option value="check">شيك</option>
                                    <option value="card">بطاقة ائتمان</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="receiptReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="receiptReference" placeholder="رقم الشيك أو الحوالة">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="receiptBank" class="form-label">البنك</label>
                                <input type="text" class="form-control" id="receiptBank" placeholder="اسم البنك">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="receiptNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="receiptNotes" rows="3" placeholder="ملاحظات إضافية (اختيارية)"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="simpleAddReceipt()">
                        <i class="fas fa-save me-1"></i>
                        حفظ السند
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="validateAndAddReceipt()">
                        <i class="fas fa-check me-1"></i>
                        الطريقة القديمة
                    </button>
                    <button type="button" class="btn btn-outline-info" onclick="testCustomerSelection()">
                        <i class="fas fa-user-check me-1"></i>
                        اختبار العميل
                    </button>
                    <button type="button" class="btn btn-outline-warning" onclick="fixCustomerSelectionIssue()">
                        <i class="fas fa-wrench me-1"></i>
                        إصلاح القراءة
                    </button>
                    <button type="button" class="btn btn-outline-success" onclick="forceReloadCustomers()">
                        <i class="fas fa-sync-alt me-1"></i>
                        إعادة تحميل
                    </button>
                    <button type="button" class="btn btn-outline-danger" onclick="rebuildReceiptModal()">
                        <i class="fas fa-redo me-1"></i>
                        إعادة بناء
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إضافة مستمع لتحديث قائمة العملاء عند فتح النافذة
    modal.addEventListener('shown.bs.modal', function() {
        refreshCustomersDropdown();
    });

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تحديث قائمة العملاء في النموذج - نسخة محسنة
 */
function refreshCustomersDropdown() {
    const customerSelect = document.getElementById('receiptCustomer');
    if (!customerSelect) {
        console.error('❌ عنصر اختيار العميل غير موجود');
        return;
    }

    console.log('🔄 تحديث قائمة العملاء...');
    console.log('📊 عدد العملاء:', appData.customers ? appData.customers.length : 0);
    console.log('👥 تفاصيل العملاء:', appData.customers ? appData.customers.map(c => ({id: c.id, name: c.name})) : []);

    // حفظ القيمة المختارة حالياً
    const currentValue = customerSelect.value;
    console.log('💾 القيمة المختارة حالياً:', currentValue);

    // مسح الخيارات الحالية تماماً
    customerSelect.innerHTML = '';

    // إضافة الخيار الافتراضي
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'اختر العميل';
    defaultOption.selected = true;
    customerSelect.appendChild(defaultOption);

    // إضافة العملاء
    if (appData.customers && appData.customers.length > 0) {
        let addedCustomers = 0;
        appData.customers.forEach((customer, index) => {
            try {
                if (!customer.id || !customer.name) {
                    console.warn(`⚠️ العميل ${index + 1} يحتوي على بيانات ناقصة:`, customer);
                    return;
                }

                const option = document.createElement('option');
                option.value = customer.id.toString(); // تأكد من أن القيمة نص
                option.textContent = customer.name;
                option.setAttribute('data-customer-id', customer.id);
                option.setAttribute('data-customer-name', customer.name);

                // إعادة تعيين الاختيار إذا كان موجوداً
                if (currentValue && customer.id.toString() === currentValue.toString()) {
                    option.selected = true;
                    console.log('🔄 تم إعادة تعيين الاختيار:', customer.name);
                }

                customerSelect.appendChild(option);
                addedCustomers++;
                console.log(`✅ تم إضافة العميل ${addedCustomers}: ${customer.name} (ID: ${customer.id})`);

            } catch (error) {
                console.error(`❌ خطأ في إضافة العميل ${index + 1}:`, error);
            }
        });

        console.log(`✅ تم تحديث قائمة العملاء بنجاح: ${addedCustomers} عميل`);

        // اختبار القائمة
        setTimeout(() => {
            console.log('🧪 اختبار القائمة المحدثة:', {
                totalOptions: customerSelect.options.length,
                currentValue: customerSelect.value,
                selectedIndex: customerSelect.selectedIndex,
                selectedText: customerSelect.options[customerSelect.selectedIndex]?.text
            });
        }, 100);

    } else {
        const noCustomersOption = document.createElement('option');
        noCustomersOption.value = '';
        noCustomersOption.textContent = 'لا توجد عملاء - يرجى إضافة عميل أولاً';
        noCustomersOption.disabled = true;
        customerSelect.appendChild(noCustomersOption);
        console.log('⚠️ لا توجد عملاء في النظام');
    }

    // إضافة مستمع للتغيير لتشخيص المشكلة
    customerSelect.addEventListener('change', function() {
        const selectedValue = this.value;
        const selectedText = this.options[this.selectedIndex]?.text;
        console.log('🔄 تم تغيير اختيار العميل:', {
            value: selectedValue,
            text: selectedText,
            selectedIndex: this.selectedIndex
        });

        // التحقق من صحة الاختيار
        if (selectedValue && selectedValue !== '') {
            const customer = appData.customers?.find(c => c.id.toString() === selectedValue.toString());
            if (customer) {
                console.log('✅ العميل المختار صحيح:', customer.name);
            } else {
                console.error('❌ العميل المختار غير موجود:', selectedValue);
            }
        }
    });
}

/**
 * إعادة بناء نموذج سند القبض بالكامل
 */
function rebuildReceiptModal() {
    console.log('🔄 إعادة بناء نموذج سند القبض...');

    // إغلاق النموذج الحالي إذا كان مفتوحاً
    const existingModal = document.getElementById('addReceiptModal');
    if (existingModal) {
        const modalInstance = bootstrap.Modal.getInstance(existingModal);
        if (modalInstance) {
            modalInstance.hide();
        }
        existingModal.remove();
        console.log('🗑️ تم إزالة النموذج القديم');
    }

    // انتظار قصير ثم إعادة فتح النموذج
    setTimeout(() => {
        console.log('🆕 فتح نموذج جديد...');
        showAddReceiptModal();

        // انتظار إضافي للتأكد من تحميل النموذج
        setTimeout(() => {
            refreshCustomersDropdown();
            console.log('✅ تم إعادة بناء النموذج بنجاح');
            alert('✅ تم إعادة بناء النموذج بنجاح!\n\nيمكنك الآن اختيار عميل وحفظ السند.');
        }, 500);
    }, 300);
}

/**
 * التحقق من صحة نموذج سند القبض قبل الحفظ
 */
function validateAndAddReceipt() {
    console.log('🔍 بدء التحقق من صحة نموذج سند القبض...');
    console.log('📊 حالة البيانات الحالية:', {
        appDataExists: !!appData,
        customersCount: appData?.customers?.length || 0,
        paymentsCount: appData?.payments?.length || 0,
        settingsExists: !!appData?.settings
    });

    // التحقق من وجود العناصر في النموذج
    const customerSelect = document.getElementById('receiptCustomer');
    const dateInput = document.getElementById('receiptDate');
    const amountInput = document.getElementById('receiptAmount');
    const currencySelect = document.getElementById('receiptCurrency');
    const methodSelect = document.getElementById('receiptMethod');

    if (!customerSelect || !dateInput || !amountInput || !currencySelect || !methodSelect) {
        console.error('❌ عناصر النموذج غير موجودة');
        alert('خطأ في النموذج. يرجى إعادة تحميل الصفحة والمحاولة مرة أخرى.');
        return;
    }

    // التحقق من القيم
    const customerId = parseInt(customerSelect.value);
    const customerName = customerSelect.options[customerSelect.selectedIndex]?.text || '';
    const amount = parseFloat(amountInput.value);

    console.log('📊 قيم النموذج:', {
        customerId: customerId,
        customerName: customerName,
        date: dateInput.value,
        amount: amount,
        currency: currencySelect.value,
        method: methodSelect.value,
        availableCustomers: appData.customers ? appData.customers.length : 0
    });

    // التحقق من وجود العملاء في النظام
    if (!appData.customers || appData.customers.length === 0) {
        alert('لا توجد عملاء في النظام. يرجى إضافة عميل أولاً من قائمة العملاء.');
        return;
    }

    // التحقق من اختيار العميل مع تشخيص مفصل
    console.log('🔍 فحص اختيار العميل:', {
        customerSelectValue: customerSelect.value,
        customerSelectValueType: typeof customerSelect.value,
        customerId: customerId,
        customerIdType: typeof customerId,
        selectedIndex: customerSelect.selectedIndex,
        selectedText: customerSelect.options[customerSelect.selectedIndex]?.text,
        totalOptions: customerSelect.options.length
    });

    if (!customerSelect.value || customerSelect.value === '' || customerSelect.value === '0') {
        console.error('❌ لم يتم اختيار عميل من القائمة');
        alert('يرجى اختيار العميل من القائمة المنسدلة');
        customerSelect.focus();
        customerSelect.style.borderColor = '#dc3545';
        setTimeout(() => customerSelect.style.borderColor = '', 3000);
        return;
    }

    // إعادة تحويل القيمة للتأكد
    const actualCustomerId = parseInt(customerSelect.value);
    if (isNaN(actualCustomerId) || actualCustomerId <= 0) {
        console.error('❌ قيمة العميل غير صحيحة:', {
            originalValue: customerSelect.value,
            convertedValue: actualCustomerId
        });
        alert('قيمة العميل المختار غير صحيحة. يرجى اختيار عميل آخر.');
        customerSelect.focus();
        return;
    }

    console.log('✅ تم اختيار عميل صحيح:', actualCustomerId);

    // استخدام القيمة الصحيحة للبحث عن العميل
    const customer = appData.customers.find(c => c.id === actualCustomerId || c.id == actualCustomerId);
    if (!customer) {
        console.error('❌ العميل غير موجود:', {
            selectedId: actualCustomerId,
            originalValue: customerSelect.value,
            availableCustomers: appData.customers.map(c => ({ id: c.id, idType: typeof c.id, name: c.name }))
        });
        alert(`العميل المحدد (ID: ${actualCustomerId}) غير موجود في قاعدة البيانات.\n\nالعملاء المتاحون:\n${appData.customers.map(c => `- ${c.name} (ID: ${c.id})`).join('\n')}\n\nيرجى اختيار عميل آخر.`);
        customerSelect.focus();
        return;
    }

    // التحقق من التاريخ
    if (!dateInput.value) {
        alert('يرجى إدخال تاريخ السند');
        dateInput.focus();
        return;
    }

    // التحقق من المبلغ
    if (isNaN(amount) || amount <= 0) {
        alert('يرجى إدخال مبلغ صحيح أكبر من الصفر');
        amountInput.focus();
        return;
    }

    // التحقق من العملة
    if (!currencySelect.value) {
        alert('يرجى اختيار العملة');
        currencySelect.focus();
        return;
    }

    // التحقق من طريقة الدفع
    if (!methodSelect.value) {
        alert('يرجى اختيار طريقة الدفع');
        methodSelect.focus();
        return;
    }

    // إذا تم التحقق بنجاح، استدعاء وظيفة الحفظ
    console.log('✅ تم التحقق من النموذج بنجاح، بدء عملية الحفظ...');
    addReceipt();
}

function addReceipt() {
    // التحقق من الصلاحيات
    if (!hasPermission('receipts')) {
        alert('ليس لديك صلاحية لإضافة سندات القبض');
        return;
    }

    console.log('💰 بدء حفظ سند القبض...');
    console.log('🔍 فحص شامل للبيانات:', {
        appData: !!appData,
        customers: appData?.customers?.length || 0,
        payments: appData?.payments?.length || 0,
        settings: !!appData?.settings,
        nextPaymentNumber: appData?.settings?.nextPaymentNumber,
        localStorage: !!localStorage,
        localStorageData: !!localStorage.getItem('samProData')
    });

    try {
        // جمع البيانات مع معالجة أفضل للحقول المفقودة
        const customerElement = document.getElementById('receiptCustomer');
        const dateElement = document.getElementById('receiptDate');
        const amountElement = document.getElementById('receiptAmount');
        const currencyElement = document.getElementById('receiptCurrency');
        const methodElement = document.getElementById('receiptMethod');
        const referenceElement = document.getElementById('receiptReference');
        const bankElement = document.getElementById('receiptBankName') || document.getElementById('receiptBank');
        const notesElement = document.getElementById('receiptNotes');

        // التحقق من وجود العناصر المطلوبة
        if (!customerElement || !dateElement || !amountElement || !currencyElement || !methodElement) {
            console.error('❌ عناصر النموذج مفقودة:', {
                customer: !!customerElement,
                date: !!dateElement,
                amount: !!amountElement,
                currency: !!currencyElement,
                method: !!methodElement
            });
            throw new Error('نموذج سند القبض غير مكتمل. يرجى إعادة تحميل الصفحة والمحاولة مرة أخرى.');
        }

        const customerId = parseInt(customerElement.value);
        const date = dateElement.value;
        const amount = parseFloat(amountElement.value);
        const currency = currencyElement.value;
        const method = methodElement.value;
        const reference = referenceElement ? referenceElement.value.trim() : '';
        const bank = bankElement ? bankElement.value.trim() : '';
        const notes = notesElement ? notesElement.value.trim() : '';

        console.log('📊 بيانات سند القبض:', { customerId, date, amount, currency, method, reference, bank, notes });

        // التحقق من البيانات المطلوبة مع تشخيص مفصل
        console.log('🔍 فحص البيانات المطلوبة:', {
            customerId: customerId,
            customerIdValid: !isNaN(customerId) && customerId > 0,
            date: date,
            dateValid: !!date,
            amount: amount,
            amountValid: !isNaN(amount) && amount > 0,
            currency: currency,
            currencyValid: !!currency && currency.trim() !== '',
            method: method,
            methodValid: !!method && method.trim() !== ''
        });

        // التحقق من وجود العملاء أولاً
        if (!appData.customers || appData.customers.length === 0) {
            console.error('❌ لا توجد عملاء في النظام');
            alert('لا توجد عملاء في النظام. يرجى إضافة عميل أولاً من قائمة العملاء.');
            return;
        }

        if (isNaN(customerId) || customerId <= 0) {
            console.error('❌ لم يتم اختيار عميل صحيح:', { customerId, type: typeof customerId });
            alert('يرجى اختيار العميل من القائمة المنسدلة');
            document.getElementById('receiptCustomer')?.focus();
            return;
        }

        if (!date || date.trim() === '') {
            alert('يرجى إدخال تاريخ السند');
            document.getElementById('receiptDate')?.focus();
            return;
        }

        if (isNaN(amount) || amount <= 0) {
            alert('يرجى إدخال مبلغ صحيح أكبر من الصفر');
            document.getElementById('receiptAmount')?.focus();
            return;
        }

        if (!currency || currency.trim() === '') {
            alert('يرجى اختيار العملة');
            document.getElementById('receiptCurrency')?.focus();
            return;
        }

        if (!method || method.trim() === '') {
            alert('يرجى اختيار طريقة الدفع');
            document.getElementById('receiptMethod')?.focus();
            return;
        }

        // التحقق من وجود العميل مع رسالة مفصلة
        let customer = appData.customers.find(c => c.id === customerId);
        if (!customer) {
            console.error('❌ العميل غير موجود:', {
                customerId,
                customerIdType: typeof customerId,
                availableCustomers: appData.customers.map(c => ({ id: c.id, idType: typeof c.id, name: c.name }))
            });

            // محاولة البحث بالنص بدلاً من الرقم
            const customerByString = appData.customers.find(c => c.id.toString() === customerId.toString());
            if (customerByString) {
                console.log('✅ تم العثور على العميل بالبحث النصي:', customerByString);
                customer = customerByString;
            } else {
                alert(`العميل المحدد (ID: ${customerId}) غير موجود في قاعدة البيانات.\n\nالعملاء المتاحون:\n${appData.customers.map(c => `- ${c.name} (ID: ${c.id})`).join('\n')}\n\nيرجى اختيار عميل آخر أو إضافة عميل جديد.`);
                document.getElementById('receiptCustomer')?.focus();
                return;
            }
        }

        console.log('✅ تم العثور على العميل:', { id: customer.id, name: customer.name });

        // تهيئة البيانات إذا لزم الأمر
        if (!appData.payments) {
            appData.payments = [];
            console.log('✅ تم تهيئة مصفوفة السندات');
        }
        if (!appData.settings) {
            appData.settings = {};
        }
        if (!appData.settings.nextPaymentNumber) {
            appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
            console.log('✅ تم تهيئة أرقام السندات');
        }

        // إنشاء رقم السند
        const receiptNumber = generatePaymentNumber('receipt');
        console.log('🔢 رقم السند المولد:', receiptNumber);

        if (!receiptNumber) {
            throw new Error('فشل في إنشاء رقم السند');
        }

        // رمز العملة
        const currencySymbols = {
            'SYP': 'ل.س',
            'USD': '$',
            'EUR': '€',
            'TRY': '₺',
            'SAR': 'ر.س',
            'AED': 'د.إ'
        };

        const newReceipt = {
            id: Date.now(),
            paymentNumber: receiptNumber,
            paymentType: 'receipt',
            customerId: customerId,
            paymentDate: date,
            amount: amount,
            currency: currency,
            currencySymbol: currencySymbols[currency] || currency,
            paymentMethod: method,
            referenceNumber: reference,
            bankName: bank,
            notes: notes,
            status: 'confirmed',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        console.log('📄 سند القبض الجديد:', newReceipt);

        // حفظ السند
        appData.payments.push(newReceipt);
        appData.settings.nextPaymentNumber.receipt++;
        console.log('✅ تم إضافة السند إلى قاعدة البيانات');

        // تحديث بيانات العميل
        try {
            updateCustomerPayment(customerId, amount, currency, date);
            console.log('✅ تم تحديث بيانات العميل');
        } catch (error) {
            console.warn('⚠️ خطأ في تحديث بيانات العميل:', error);
        }

        // إضافة قيد محاسبي
        if (!appData.journalEntries) {
            appData.journalEntries = [];
            console.log('✅ تم تهيئة مصفوفة القيود المحاسبية');
        }

        const journalEntry = {
            id: Date.now() + 1,
            entryDate: date,
            entryType: 'payment',
            description: `سند قبض رقم ${receiptNumber} - ${customer.name}`,
            debitAccount: method === 'cash' ? 'الصندوق' : 'البنك',
            creditAccount: 'العملاء',
            debitAmount: amount,
            creditAmount: amount,
            currency: currency,
            referenceType: 'payment',
            referenceId: newReceipt.id,
            paymentId: newReceipt.id,
            customerId: customerId,
            createdAt: new Date().toISOString()
        };

        appData.journalEntries.push(journalEntry);
        console.log('📊 تم إضافة قيد محاسبي:', journalEntry);

        // حفظ البيانات مع معالجة محسنة للأخطاء
        try {
            // التحقق من سلامة البيانات قبل الحفظ
            if (!appData.payments || !Array.isArray(appData.payments)) {
                appData.payments = [];
                console.log('✅ تم إعادة تهيئة مصفوفة السندات');
            }

            if (!appData.customers || !Array.isArray(appData.customers)) {
                throw new Error('مصفوفة العملاء غير صحيحة - يرجى إعادة تحميل الصفحة');
            }

            // التحقق من وجود السند في المصفوفة
            const receiptExists = appData.payments.find(p => p.id === newReceipt.id);
            if (!receiptExists) {
                throw new Error('فشل في إضافة السند إلى قاعدة البيانات');
            }

            // محاولة حفظ متعددة مع طرق مختلفة
            let saveSuccess = false;
            let saveError = null;

            // الطريقة الأولى: الحفظ العادي
            try {
                saveData();
                console.log('💾 تم حفظ البيانات بالطريقة العادية');
                saveSuccess = true;
            } catch (error) {
                console.warn('⚠️ فشل الحفظ العادي:', error);
                saveError = error;
            }

            // الطريقة الثانية: الحفظ المباشر
            if (!saveSuccess) {
                try {
                    const dataToSave = JSON.stringify(appData);
                    localStorage.setItem('samProData', dataToSave);
                    console.log('💾 تم حفظ البيانات بالطريقة المباشرة');
                    saveSuccess = true;
                } catch (error) {
                    console.warn('⚠️ فشل الحفظ المباشر:', error);
                    saveError = error;
                }
            }

            // الطريقة الثالثة: حفظ جزئي
            if (!saveSuccess) {
                try {
                    // حفظ السندات فقط
                    localStorage.setItem('samProData_payments', JSON.stringify(appData.payments));
                    localStorage.setItem('samProData_customers', JSON.stringify(appData.customers));
                    localStorage.setItem('samProData_settings', JSON.stringify(appData.settings));
                    localStorage.setItem('samProData_journalEntries', JSON.stringify(appData.journalEntries));
                    console.log('💾 تم حفظ البيانات بالطريقة الجزئية');
                    saveSuccess = true;
                } catch (error) {
                    console.warn('⚠️ فشل الحفظ الجزئي:', error);
                    saveError = error;
                }
            }

            if (!saveSuccess) {
                throw new Error('فشل في جميع طرق الحفظ: ' + (saveError ? saveError.message : 'خطأ غير معروف'));
            }

            // التحقق من الحفظ
            try {
                const savedData = JSON.parse(localStorage.getItem('samProData') || '{}');
                if (savedData.payments && savedData.payments.find(p => p.id === newReceipt.id)) {
                    console.log('✅ تم التحقق من حفظ البيانات بنجاح');
                } else {
                    // محاولة استرداد من الحفظ الجزئي
                    const savedPayments = JSON.parse(localStorage.getItem('samProData_payments') || '[]');
                    if (savedPayments.find(p => p.id === newReceipt.id)) {
                        console.log('✅ تم التحقق من الحفظ الجزئي');
                    } else {
                        throw new Error('فشل في التحقق من حفظ البيانات');
                    }
                }
            } catch (verifyError) {
                console.warn('⚠️ خطأ في التحقق من الحفظ:', verifyError);
                // لا نرمي خطأ هنا لأن البيانات قد تكون محفوظة فعلاً
            }

        } catch (error) {
            console.error('❌ خطأ في حفظ البيانات:', error);

            // محاولة إزالة السند المضاف في حالة فشل الحفظ
            try {
                const receiptIndex = appData.payments.findIndex(p => p.id === newReceipt.id);
                if (receiptIndex !== -1) {
                    appData.payments.splice(receiptIndex, 1);
                    if (appData.settings && appData.settings.nextPaymentNumber) {
                        appData.settings.nextPaymentNumber.receipt = Math.max(1, appData.settings.nextPaymentNumber.receipt - 1);
                    }
                    console.log('🔄 تم التراجع عن إضافة السند');
                }
            } catch (rollbackError) {
                console.error('❌ خطأ في التراجع:', rollbackError);
            }

            throw new Error('فشل في حفظ سند القبض: ' + error.message + '\n\nيرجى المحاولة مرة أخرى أو الاتصال بالدعم الفني.');
        }

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addReceiptModal'));
        if (modal) {
            modal.hide();
            console.log('✅ تم إغلاق النافذة');
        } else {
            console.warn('⚠️ لم يتم العثور على النافذة لإغلاقها');
        }

        // رسالة النجاح مع عرض رمز العملة بوضوح
        const currencySymbol = getCurrencySymbol(currency);
        const currencyName = getCurrencyName(currency);
        const successMessage = `✅ تم حفظ سند القبض بنجاح!

📄 رقم السند: ${receiptNumber}
👤 العميل: ${customer.name}
💰 المبلغ: ${formatCurrency(amount, currency)}
💱 العملة: ${currencyName} (${currencySymbol})
💳 طريقة الدفع: ${getPaymentMethodText(method)}
📅 التاريخ: ${date}

هل تريد طباعة السند؟`;

        console.log('🎉 عملية الحفظ مكتملة بنجاح');

        if (confirm(successMessage)) {
            printReceipt(newReceipt.id);
        }

        // تحديث الصفحة
        showPage('receipts');

    } catch (error) {
        console.error('❌ خطأ في حفظ سند القبض:', error);
        alert('حدث خطأ أثناء حفظ سند القبض: ' + error.message);
    }
}

/**
 * وظيفة حفظ سند القبض - مرادف لـ addReceipt
 */
function saveReceipt() {
    return addReceipt();
}

/**
 * تعديل سند قبض
 */
function editReceipt(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('receipts')) {
        alert('ليس لديك صلاحية لتعديل سندات القبض');
        return;
    }

    console.log('✏️ طلب تعديل سند القبض:', id);

    // البحث عن السند
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        console.error('❌ سند القبض غير موجود:', id);
        return;
    }

    // الحصول على معلومات العميل
    const customer = appData.customers.find(c => c.id === receipt.customerId);
    if (!customer) {
        alert('العميل المرتبط بالسند غير موجود');
        return;
    }

    // إنشاء نافذة التعديل
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل سند القبض رقم ${receipt.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editReceiptForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptNumber" class="form-label">رقم السند</label>
                                <input type="text" class="form-control" id="editReceiptNumber" value="${receipt.paymentNumber}" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="editReceiptDate" value="${receipt.paymentDate}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCustomer" required>
                                    <option value="">اختر العميل</option>
                                    ${appData.customers.map(c => `<option value="${c.id}" ${c.id === receipt.customerId ? 'selected' : ''}>${c.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editReceiptAmount" min="0" step="0.01" value="${receipt.amount}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash" ${receipt.paymentMethod === 'cash' ? 'selected' : ''}>نقدي</option>
                                    <option value="bank" ${receipt.paymentMethod === 'bank' ? 'selected' : ''}>تحويل بنكي</option>
                                    <option value="check" ${receipt.paymentMethod === 'check' ? 'selected' : ''}>شيك</option>
                                    <option value="card" ${receipt.paymentMethod === 'card' ? 'selected' : ''}>بطاقة ائتمان</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCurrency" required>
                                    <option value="SYP" ${receipt.currency === 'SYP' ? 'selected' : ''}>ليرة سورية (ل.س)</option>
                                    <option value="USD" ${receipt.currency === 'USD' ? 'selected' : ''}>دولار أمريكي ($)</option>
                                    <option value="EUR" ${receipt.currency === 'EUR' ? 'selected' : ''}>يورو (€)</option>
                                    <option value="TRY" ${receipt.currency === 'TRY' ? 'selected' : ''}>ليرة تركية (₺)</option>
                                    <option value="SAR" ${receipt.currency === 'SAR' ? 'selected' : ''}>ريال سعودي (ر.س)</option>
                                    <option value="AED" ${receipt.currency === 'AED' ? 'selected' : ''}>درهم إماراتي (د.إ)</option>
                                    <option value="LBP" ${receipt.currency === 'LBP' ? 'selected' : ''}>ليرة لبنانية (ل.ل)</option>
                                    <option value="GBP" ${receipt.currency === 'GBP' ? 'selected' : ''}>جنيه إسترليني (£)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="editReceiptReference" value="${receipt.referenceNumber || ''}" placeholder="رقم الشيك أو الحوالة">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptBankName" class="form-label">اسم البنك</label>
                            <input type="text" class="form-control" id="editReceiptBankName" value="${receipt.bankName || ''}">
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editReceiptNotes" rows="3">${receipt.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="updateReceipt(${id})">
                        <i class="fas fa-save me-1"></i>
                        حفظ التعديلات
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تحديث سند القبض
 */
function updateReceipt(id) {
    console.log('💾 بدء تحديث سند القبض:', id);

    try {
        // جمع البيانات من النموذج
        const customerId = parseInt(document.getElementById('editReceiptCustomer').value);
        const date = document.getElementById('editReceiptDate').value;
        const amount = parseFloat(document.getElementById('editReceiptAmount').value);
        const currency = document.getElementById('editReceiptCurrency').value;
        const method = document.getElementById('editReceiptMethod').value;
        const reference = document.getElementById('editReceiptReference').value.trim();
        const bankName = document.getElementById('editReceiptBankName').value.trim();
        const notes = document.getElementById('editReceiptNotes').value.trim();

        // التحقق من البيانات المطلوبة
        if (isNaN(customerId) || customerId <= 0) {
            alert('يرجى اختيار العميل');
            document.getElementById('editReceiptCustomer')?.focus();
            return;
        }

        if (!date || date.trim() === '') {
            alert('يرجى إدخال تاريخ السند');
            document.getElementById('editReceiptDate')?.focus();
            return;
        }

        if (isNaN(amount) || amount <= 0) {
            alert('يرجى إدخال مبلغ صحيح أكبر من الصفر');
            document.getElementById('editReceiptAmount')?.focus();
            return;
        }

        if (!currency || currency.trim() === '') {
            alert('يرجى اختيار العملة');
            document.getElementById('editReceiptCurrency')?.focus();
            return;
        }

        if (!method || method.trim() === '') {
            alert('يرجى اختيار طريقة الدفع');
            document.getElementById('editReceiptMethod')?.focus();
            return;
        }

        // البحث عن السند الأصلي
        const originalReceipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
        if (!originalReceipt) {
            alert('سند القبض غير موجود');
            return;
        }

        // التحقق من وجود العميل الجديد
        const newCustomer = appData.customers.find(c => c.id === customerId);
        if (!newCustomer) {
            alert('العميل المحدد غير موجود');
            return;
        }

        // حفظ البيانات الأصلية للتراجع في حالة الخطأ
        const originalData = { ...originalReceipt };

        // عكس تأثير السند الأصلي على العميل القديم
        if (originalReceipt.customerId) {
            const oldCustomer = appData.customers.find(c => c.id === originalReceipt.customerId);
            if (oldCustomer) {
                // طرح المبلغ الأصلي من إجمالي المدفوعات وإضافته للرصيد
                const oldCurrency = originalReceipt.currency || 'SYP';
                oldCustomer.totalPayments = Math.max(0, (oldCustomer.totalPayments || 0) - originalReceipt.amount);

                if (!oldCustomer.balances) oldCustomer.balances = {};
                if (!oldCustomer.balances[oldCurrency]) oldCustomer.balances[oldCurrency] = 0;
                oldCustomer.balances[oldCurrency] += originalReceipt.amount;

                if (oldCurrency === (appData.settings.currency || 'SYP')) {
                    oldCustomer.currentBalance = (oldCustomer.currentBalance || 0) + originalReceipt.amount;
                }
            }
        }

        // تحديث بيانات السند
        originalReceipt.customerId = customerId;
        originalReceipt.paymentDate = date;
        originalReceipt.amount = amount;
        originalReceipt.currency = currency;
        originalReceipt.paymentMethod = method;
        originalReceipt.referenceNumber = reference;
        originalReceipt.bankName = bankName;
        originalReceipt.notes = notes;
        originalReceipt.updatedAt = new Date().toISOString();

        // تطبيق تأثير السند المحدث على العميل الجديد
        updateCustomerPayment(customerId, amount, currency, date);

        // تحديث القيود المحاسبية
        updateReceiptJournalEntries(id, originalReceipt, newCustomer);

        // حفظ البيانات
        saveData();
        console.log('💾 تم حفظ التعديلات بنجاح');

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editReceiptModal'));
        if (modal) {
            modal.hide();
        }

        // رسالة النجاح
        const currencySymbol = getCurrencySymbol(currency);
        const currencyName = getCurrencyName(currency);
        const successMessage = `✅ تم تحديث سند القبض بنجاح!

📄 رقم السند: ${originalReceipt.paymentNumber}
👤 العميل: ${newCustomer.name}
💰 المبلغ: ${formatCurrency(amount, currency)}
💱 العملة: ${currencyName} (${currencySymbol})
💳 طريقة الدفع: ${getPaymentMethodText(method)}
📅 التاريخ: ${date}`;

        alert(successMessage);

        // تحديث الصفحة
        showPage('receipts');

    } catch (error) {
        console.error('❌ خطأ في تحديث سند القبض:', error);
        alert('حدث خطأ أثناء تحديث سند القبض: ' + error.message);
    }
}

/**
 * تحديث القيود المحاسبية لسند القبض
 */
function updateReceiptJournalEntries(receiptId, receipt, customer) {
    try {
        if (!appData.journalEntries) {
            appData.journalEntries = [];
        }

        // حذف القيود المحاسبية القديمة المرتبطة بالسند
        appData.journalEntries = appData.journalEntries.filter(entry =>
            entry.paymentId !== receiptId && entry.referenceId !== receiptId
        );

        // إضافة قيد محاسبي جديد
        const journalEntry = {
            id: Date.now() + Math.random(),
            entryDate: receipt.paymentDate,
            entryType: 'payment',
            description: `سند قبض رقم ${receipt.paymentNumber} - ${customer.name} (محدث)`,
            debitAccount: receipt.paymentMethod === 'cash' ? 'الصندوق' : 'البنك',
            creditAccount: 'العملاء',
            debitAmount: receipt.amount,
            creditAmount: receipt.amount,
            currency: receipt.currency,
            referenceType: 'payment',
            referenceId: receipt.id,
            paymentId: receipt.id,
            customerId: receipt.customerId,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        appData.journalEntries.push(journalEntry);
        console.log('📊 تم تحديث القيد المحاسبي:', journalEntry);

    } catch (error) {
        console.error('❌ خطأ في تحديث القيود المحاسبية:', error);
    }
}

/**
 * عرض سند قبض
 */
function viewReceipt(id) {
    console.log('👁️ عرض سند القبض:', id);

    // البحث عن السند
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        console.error('❌ سند القبض غير موجود:', id);
        return;
    }

    // الحصول على معلومات العميل
    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const customerName = customer ? customer.name : 'عميل محذوف';
    const customerPhone = customer ? customer.phone : '';
    const customerEmail = customer ? customer.email : '';

    // إنشاء نافذة العرض
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'viewReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-hand-holding-usd me-2"></i>
                        عرض سند القبض رقم ${receipt.paymentNumber}
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-file-invoice me-2"></i>
                                        معلومات السند
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-borderless">
                                        <tr>
                                            <td><strong>رقم السند:</strong></td>
                                            <td>${receipt.paymentNumber}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>التاريخ:</strong></td>
                                            <td>${formatDate(receipt.paymentDate)}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>المبلغ:</strong></td>
                                            <td class="text-success">
                                                <strong>${formatCurrency(receipt.amount, receipt.currency)}</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><strong>العملة:</strong></td>
                                            <td>${getCurrencyName(receipt.currency)} (${getCurrencySymbol(receipt.currency)})</td>
                                        </tr>
                                        <tr>
                                            <td><strong>طريقة الدفع:</strong></td>
                                            <td>${getPaymentMethodText(receipt.paymentMethod)}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>الحالة:</strong></td>
                                            <td><span class="badge bg-${getStatusColor(receipt.status)}">${getStatusText(receipt.status)}</span></td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-user me-2"></i>
                                        معلومات العميل
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-borderless">
                                        <tr>
                                            <td><strong>الاسم:</strong></td>
                                            <td>${customerName}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>الهاتف:</strong></td>
                                            <td>${customerPhone || '-'}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>البريد الإلكتروني:</strong></td>
                                            <td>${customerEmail || '-'}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>رقم المرجع:</strong></td>
                                            <td>${receipt.referenceNumber || '-'}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>البنك:</strong></td>
                                            <td>${receipt.bankName || '-'}</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    ${receipt.notes ? `
                        <div class="card mt-3">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-sticky-note me-2"></i>
                                    الملاحظات
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="mb-0">${receipt.notes}</p>
                            </div>
                        </div>
                    ` : ''}

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                معلومات إضافية
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <small class="text-muted">تاريخ الإنشاء:</small><br>
                                    <span>${formatDateTime(receipt.createdAt)}</span>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted">آخر تحديث:</small><br>
                                    <span>${formatDateTime(receipt.updatedAt || receipt.createdAt)}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                    <button type="button" class="btn btn-success" onclick="printReceipt(${id})">
                        <i class="fas fa-print me-2"></i>
                        طباعة
                    </button>
                    <button type="button" class="btn btn-primary" onclick="editReceipt(${id}); bootstrap.Modal.getInstance(document.getElementById('viewReceiptModal')).hide();">
                        <i class="fas fa-edit me-2"></i>
                        تعديل
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * طباعة سند قبض
 */
function printReceipt(id) {
    console.log('🖨️ طباعة سند القبض:', id);

    // البحث عن السند
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        console.error('❌ سند القبض غير موجود:', id);
        return;
    }

    // الحصول على معلومات العميل
    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const customerName = customer ? customer.name : 'عميل محذوف';
    const customerPhone = customer ? customer.phone : '';
    const customerAddress = customer ? customer.address : '';

    // إنشاء محتوى الطباعة
    const printContent = `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>سند قبض رقم ${receipt.paymentNumber}</title>
            <style>
                body {
                    font-family: 'Arial', sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: white;
                    color: #333;
                    direction: rtl;
                }
                .receipt-container {
                    max-width: 800px;
                    margin: 0 auto;
                    border: 2px solid #333;
                    padding: 30px;
                    background: white;
                }
                .header {
                    text-align: center;
                    border-bottom: 2px solid #333;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }
                .company-name {
                    font-size: 28px;
                    font-weight: bold;
                    color: #2c3e50;
                    margin-bottom: 10px;
                }
                .receipt-title {
                    font-size: 24px;
                    font-weight: bold;
                    color: #27ae60;
                    margin-bottom: 10px;
                }
                .receipt-number {
                    font-size: 18px;
                    color: #666;
                }
                .content {
                    margin: 30px 0;
                }
                .info-row {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 15px;
                    padding: 10px;
                    border-bottom: 1px solid #eee;
                }
                .info-label {
                    font-weight: bold;
                    color: #2c3e50;
                    min-width: 120px;
                }
                .info-value {
                    flex: 1;
                    text-align: left;
                }
                .amount-section {
                    background: #f8f9fa;
                    border: 2px solid #27ae60;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 30px 0;
                    text-align: center;
                }
                .amount-label {
                    font-size: 18px;
                    color: #666;
                    margin-bottom: 10px;
                }
                .amount-value {
                    font-size: 32px;
                    font-weight: bold;
                    color: #27ae60;
                }
                .notes-section {
                    margin: 30px 0;
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 10px;
                }
                .notes-title {
                    font-weight: bold;
                    color: #2c3e50;
                    margin-bottom: 10px;
                }
                .footer {
                    margin-top: 50px;
                    border-top: 2px solid #333;
                    padding-top: 20px;
                    display: flex;
                    justify-content: space-between;
                }
                .signature-box {
                    text-align: center;
                    min-width: 200px;
                }
                .signature-line {
                    border-top: 1px solid #333;
                    margin-top: 50px;
                    padding-top: 10px;
                }
                @media print {
                    body { margin: 0; padding: 10px; }
                    .receipt-container { border: 1px solid #333; padding: 20px; }
                }
            </style>
        </head>
        <body>
            <div class="receipt-container">
                <div class="header">
                    <div class="company-name">${appData.settings?.companyName || 'SAM PRO'}</div>
                    <div class="receipt-title">سند قبض</div>
                    <div class="receipt-number">رقم السند: ${receipt.paymentNumber}</div>
                </div>

                <div class="content">
                    <div class="info-row">
                        <span class="info-label">التاريخ:</span>
                        <span class="info-value">${formatDate(receipt.paymentDate)}</span>
                    </div>

                    <div class="info-row">
                        <span class="info-label">اسم العميل:</span>
                        <span class="info-value">${customerName}</span>
                    </div>

                    ${customerPhone ? `
                        <div class="info-row">
                            <span class="info-label">رقم الهاتف:</span>
                            <span class="info-value">${customerPhone}</span>
                        </div>
                    ` : ''}

                    ${customerAddress ? `
                        <div class="info-row">
                            <span class="info-label">العنوان:</span>
                            <span class="info-value">${customerAddress}</span>
                        </div>
                    ` : ''}

                    <div class="info-row">
                        <span class="info-label">طريقة الدفع:</span>
                        <span class="info-value">${getPaymentMethodText(receipt.paymentMethod)}</span>
                    </div>

                    <div class="info-row">
                        <span class="info-label">العملة:</span>
                        <span class="info-value">${getCurrencyName(receipt.currency)}</span>
                    </div>

                    ${receipt.referenceNumber ? `
                        <div class="info-row">
                            <span class="info-label">رقم المرجع:</span>
                            <span class="info-value">${receipt.referenceNumber}</span>
                        </div>
                    ` : ''}

                    ${receipt.bankName ? `
                        <div class="info-row">
                            <span class="info-label">البنك:</span>
                            <span class="info-value">${receipt.bankName}</span>
                        </div>
                    ` : ''}
                </div>

                <div class="amount-section">
                    <div class="amount-label">المبلغ المستلم</div>
                    <div class="amount-value">${formatCurrency(receipt.amount, receipt.currency)}</div>
                </div>

                ${receipt.notes ? `
                    <div class="notes-section">
                        <div class="notes-title">الملاحظات:</div>
                        <div>${receipt.notes}</div>
                    </div>
                ` : ''}

                <div class="footer">
                    <div class="signature-box">
                        <div>توقيع المستلم</div>
                        <div class="signature-line"></div>
                    </div>
                    <div class="signature-box">
                        <div>توقيع المحاسب</div>
                        <div class="signature-line"></div>
                    </div>
                </div>

                <div style="text-align: center; margin-top: 30px; font-size: 12px; color: #666;">
                    تم الإنشاء بواسطة SAM PRO - ${new Date().toLocaleDateString('ar-SA')} ${new Date().toLocaleTimeString('ar-SA')}
                </div>
            </div>
        </body>
        </html>
    `;

    // فتح نافذة طباعة جديدة
    const printWindow = window.open('', '_blank');
    printWindow.document.write(printContent);
    printWindow.document.close();

    // انتظار تحميل المحتوى ثم الطباعة
    printWindow.onload = function() {
        printWindow.focus();
        printWindow.print();

        // إغلاق النافذة بعد الطباعة (اختياري)
        setTimeout(() => {
            printWindow.close();
        }, 1000);
    };

    console.log('✅ تم فتح نافذة الطباعة لسند القبض');
}

function showAddPaymentModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addPaymentModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">إضافة سند دفع جديد</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addPaymentForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="paymentSupplier" class="form-label">المورد <span class="text-danger">*</span></label>
                                <select class="form-select" id="paymentSupplier" required>
                                    <option value="">اختر المورد</option>
                                    ${appData.suppliers.map(s => `<option value="${s.id}">${s.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="paymentDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="paymentDate" value="${new Date().toISOString().split('T')[0]}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="paymentAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="paymentAmount" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="paymentCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="paymentCurrency" required>
                                    <option value="SYP" selected>ليرة سورية (ل.س)</option>
                                    <option value="USD">دولار أمريكي ($)</option>
                                    <option value="EUR">يورو (€)</option>
                                    <option value="TRY">ليرة تركية (₺)</option>
                                    <option value="SAR">ريال سعودي (ر.س)</option>
                                    <option value="AED">درهم إماراتي (د.إ)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="paymentMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="paymentMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash">نقدي</option>
                                    <option value="bank">تحويل بنكي</option>
                                    <option value="check">شيك</option>
                                    <option value="card">بطاقة ائتمان</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="paymentReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="paymentReference">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="paymentBank" class="form-label">البنك</label>
                                <input type="text" class="form-control" id="paymentBank">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="paymentNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="paymentNotes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="savePayment()">حفظ السند</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function savePayment() {
    // التحقق من الصلاحيات
    if (!hasPermission('payments')) {
        alert('ليس لديك صلاحية لإضافة سندات الدفع');
        return;
    }

    console.log('💰 بدء حفظ سند الدفع...');

    try {
        const supplierId = parseInt(document.getElementById('paymentSupplier').value);
        const date = document.getElementById('paymentDate').value;
        const amount = parseFloat(document.getElementById('paymentAmount').value);
        const currency = document.getElementById('paymentCurrency').value;
        const method = document.getElementById('paymentMethod').value;
        const reference = document.getElementById('paymentReference').value.trim();
        const bank = document.getElementById('paymentBank').value.trim();
        const notes = document.getElementById('paymentNotes').value.trim();

        console.log('📊 بيانات سند الدفع:', { supplierId, date, amount, currency, method, reference, bank, notes });

        // التحقق من البيانات المطلوبة مع تشخيص مفصل
        console.log('🔍 فحص البيانات المطلوبة:', {
            supplierId: supplierId,
            supplierIdValid: !isNaN(supplierId) && supplierId > 0,
            date: date,
            dateValid: !!date,
            amount: amount,
            amountValid: !isNaN(amount) && amount > 0,
            currency: currency,
            currencyValid: !!currency && currency.trim() !== '',
            method: method,
            methodValid: !!method && method.trim() !== ''
        });

        if (isNaN(supplierId) || supplierId <= 0) {
            alert('يرجى اختيار المورد');
            document.getElementById('paymentSupplier')?.focus();
            return;
        }

        if (!date || date.trim() === '') {
            alert('يرجى إدخال تاريخ السند');
            document.getElementById('paymentDate')?.focus();
            return;
        }

        if (isNaN(amount) || amount <= 0) {
            alert('يرجى إدخال مبلغ صحيح أكبر من الصفر');
            document.getElementById('paymentAmount')?.focus();
            return;
        }

        if (!currency || currency.trim() === '') {
            alert('يرجى اختيار العملة');
            document.getElementById('paymentCurrency')?.focus();
            return;
        }

        if (!method || method.trim() === '') {
            alert('يرجى اختيار طريقة الدفع');
            document.getElementById('paymentMethod')?.focus();
            return;
        }

        // التحقق من وجود المورد
        const supplier = appData.suppliers.find(s => s.id === supplierId);
        if (!supplier) {
            alert('المورد المحدد غير موجود');
            return;
        }

        // تهيئة البيانات إذا لزم الأمر
        if (!appData.payments) {
            appData.payments = [];
        }
        if (!appData.settings.nextPaymentNumber) {
            appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
        }

        // إنشاء رقم السند
        const paymentNumber = generatePaymentNumber('payment');
        console.log('🔢 رقم السند المولد:', paymentNumber);

        // رمز العملة
        const currencySymbols = {
            'SYP': 'ل.س',
            'USD': '$',
            'EUR': '€',
            'TRY': '₺',
            'SAR': 'ر.س',
            'AED': 'د.إ'
        };

        const newPayment = {
            id: Date.now(),
            paymentNumber: paymentNumber,
            paymentType: 'payment',
            supplierId: supplierId,
            paymentDate: date,
            amount: amount,
            currency: currency,
            currencySymbol: currencySymbols[currency] || currency,
            paymentMethod: method,
            referenceNumber: reference,
            bankName: bank,
            notes: notes,
            status: 'confirmed',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        console.log('📄 سند الدفع الجديد:', newPayment);

        // التحقق من وجود مصفوفة السندات
        if (!appData.payments) {
            appData.payments = [];
        }

        // التحقق من وجود أرقام السندات
        if (!appData.settings.nextPaymentNumber) {
            appData.settings.nextPaymentNumber = { receipt: 1, payment: 1 };
        }

        // حفظ السند
        appData.payments.push(newPayment);
        appData.settings.nextPaymentNumber.payment++;

        // تحديث بيانات المورد
        updateSupplierPayment(supplierId, amount, currency, date);

        // إضافة قيد محاسبي
        if (!appData.journalEntries) {
            appData.journalEntries = [];
        }

        const journalEntry = {
            id: Date.now() + 1,
            entryDate: date,
            entryType: 'payment',
            description: `سند دفع رقم ${paymentNumber} - ${supplier.name}`,
            debitAccount: `الموردين - ${supplier.name} - ${getCurrencySymbol(currency)}`,
            creditAccount: method === 'cash' ? `الصندوق - ${getCurrencySymbol(currency)}` : `البنك - ${getCurrencySymbol(currency)}`,
            debitAmount: amount,
            creditAmount: amount,
            currency: currency,
            referenceType: 'payment',
            referenceId: newPayment.id,
            createdAt: new Date().toISOString()
        };

        appData.journalEntries.push(journalEntry);
        console.log('📝 تم إضافة القيد المحاسبي:', journalEntry);

        // حفظ البيانات
        saveData();
        console.log('💾 تم حفظ البيانات بنجاح');

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addPaymentModal'));
        modal.hide();

        const currencyText = getCurrencySymbol(currency);
        const successMessage = `✅ تم حفظ سند الدفع بنجاح!

📄 رقم السند: ${paymentNumber}
🏢 المورد: ${supplier.name}
💰 المبلغ: ${amount.toFixed(2)} ${currencyText}
💳 طريقة الدفع: ${getPaymentMethodText(method)}
📅 التاريخ: ${date}

هل تريد طباعة السند؟`;

        if (confirm(successMessage)) {
            printPayment(newPayment.id);
        } else {
            showPage('payments');
        }

    } catch (error) {
        console.error('❌ خطأ في حفظ سند الدفع:', error);
        alert('حدث خطأ أثناء حفظ سند الدفع: ' + error.message);
    }
}

// وظائف التقارير
function getJournalEntriesRows() {
    // جمع جميع القيود من مصادر مختلفة
    let allEntries = [];

    // 1. القيود اليدوية الموجودة
    if (appData.journalEntries && appData.journalEntries.length > 0) {
        allEntries = [...appData.journalEntries];
    }

    // 2. قيود من الفواتير
    if (appData.invoices && appData.invoices.length > 0) {
        appData.invoices.forEach(invoice => {
            if (invoice.status === 'confirmed' && invoice.isDeleted !== true) {
                const client = invoice.invoiceType === 'sale' ?
                    appData.customers.find(c => c.id === invoice.customerId) :
                    appData.suppliers.find(s => s.id === invoice.supplierId);

                const clientName = client ? client.name : 'غير محدد';
                const invoiceTypeText = invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات';

                if (invoice.invoiceType === 'sale') {
                    // قيد فاتورة المبيعات
                    allEntries.push({
                        entryDate: invoice.invoiceDate,
                        entryType: 'sale_invoice',
                        description: `فاتورة مبيعات رقم ${invoice.invoiceNumber} - ${clientName}`,
                        debitAccount: `العملاء - ${clientName}`,
                        creditAccount: 'المبيعات',
                        debitAmount: invoice.totalAmount,
                        creditAmount: invoice.totalAmount,
                        currency: invoice.currency || 'SYP',
                        referenceType: 'invoice',
                        referenceId: invoice.invoiceNumber,
                        source: 'invoice'
                    });
                } else {
                    // قيد فاتورة المشتريات
                    allEntries.push({
                        entryDate: invoice.invoiceDate,
                        entryType: 'purchase_invoice',
                        description: `فاتورة مشتريات رقم ${invoice.invoiceNumber} - ${clientName}`,
                        debitAccount: 'المشتريات',
                        creditAccount: `الموردين - ${clientName}`,
                        debitAmount: invoice.totalAmount,
                        creditAmount: invoice.totalAmount,
                        currency: invoice.currency || 'SYP',
                        referenceType: 'invoice',
                        referenceId: invoice.invoiceNumber,
                        source: 'invoice'
                    });
                }
            }
        });
    }

    // 3. قيود من سندات القبض والدفع
    if (appData.payments && appData.payments.length > 0) {
        appData.payments.forEach(payment => {
            if (payment.status === 'confirmed' && payment.isDeleted !== true) {
                const client = payment.paymentType === 'receipt' ?
                    appData.customers.find(c => c.id === payment.customerId) :
                    appData.suppliers.find(s => s.id === payment.supplierId);

                const clientName = client ? client.name : 'غير محدد';

                if (payment.paymentType === 'receipt') {
                    // قيد سند القبض
                    allEntries.push({
                        entryDate: payment.paymentDate,
                        entryType: 'receipt',
                        description: `سند قبض رقم ${payment.paymentNumber} - ${clientName}`,
                        debitAccount: payment.paymentMethod === 'cash' ? 'الصندوق' : 'البنك',
                        creditAccount: `العملاء - ${clientName}`,
                        debitAmount: payment.amount,
                        creditAmount: payment.amount,
                        currency: payment.currency || 'SYP',
                        referenceType: 'receipt',
                        referenceId: payment.paymentNumber,
                        source: 'payment'
                    });
                } else {
                    // قيد سند الدفع
                    allEntries.push({
                        entryDate: payment.paymentDate,
                        entryType: 'payment',
                        description: `سند دفع رقم ${payment.paymentNumber} - ${clientName}`,
                        debitAccount: `الموردين - ${clientName}`,
                        creditAccount: payment.paymentMethod === 'cash' ? 'الصندوق' : 'البنك',
                        debitAmount: payment.amount,
                        creditAmount: payment.amount,
                        currency: payment.currency || 'SYP',
                        referenceType: 'payment',
                        referenceId: payment.paymentNumber,
                        source: 'payment'
                    });
                }
            }
        });
    }

    // 4. قيود من حركات المخزون
    if (appData.inventoryMovements && appData.inventoryMovements.length > 0) {
        appData.inventoryMovements.forEach(movement => {
            if (movement.isDeleted !== true && movement.unitPrice > 0) {
                const product = appData.products.find(p => p.id === movement.productId);
                const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

                const productName = product ? product.name : 'غير محدد';
                const warehouseName = warehouse ? warehouse.name : 'غير محدد';
                const totalValue = movement.quantity * movement.unitPrice;

                const movementTypeText = {
                    'in': 'إدخال مخزون',
                    'out': 'إخراج مخزون',
                    'transfer': 'تحويل مخزون',
                    'adjustment': 'تسوية مخزون'
                };

                if (movement.movementType === 'in') {
                    allEntries.push({
                        entryDate: movement.date,
                        entryType: 'inventory_in',
                        description: `${movementTypeText[movement.movementType]} - ${productName} - ${warehouseName}`,
                        debitAccount: 'المخزون',
                        creditAccount: movement.reference || 'حساب مؤقت',
                        debitAmount: totalValue,
                        creditAmount: totalValue,
                        currency: 'SYP',
                        referenceType: 'movement',
                        referenceId: movement.reference || movement.id,
                        source: 'inventory'
                    });
                } else if (movement.movementType === 'out') {
                    allEntries.push({
                        entryDate: movement.date,
                        entryType: 'inventory_out',
                        description: `${movementTypeText[movement.movementType]} - ${productName} - ${warehouseName}`,
                        debitAccount: 'تكلفة البضاعة المباعة',
                        creditAccount: 'المخزون',
                        debitAmount: totalValue,
                        creditAmount: totalValue,
                        currency: 'SYP',
                        referenceType: 'movement',
                        referenceId: movement.reference || movement.id,
                        source: 'inventory'
                    });
                }
            }
        });
    }

    if (allEntries.length === 0) {
        return '<tr><td colspan="9" class="text-center text-muted">لا توجد قيود محاسبية</td></tr>';
    }

    // ترتيب القيود حسب التاريخ (الأحدث أولاً)
    allEntries.sort((a, b) => new Date(b.entryDate) - new Date(a.entryDate));

    let html = '';
    let totalDebit = 0;
    let totalCredit = 0;

    allEntries.forEach(entry => {
        totalDebit += entry.debitAmount || 0;
        totalCredit += entry.creditAmount || 0;

        const entryTypeText = {
            'sale_invoice': 'فاتورة مبيعات',
            'purchase_invoice': 'فاتورة مشتريات',
            'receipt': 'سند قبض',
            'payment': 'سند دفع',
            'inventory_in': 'إدخال مخزون',
            'inventory_out': 'إخراج مخزون',
            'inventory_transfer': 'تحويل مخزون',
            'inventory_adjustment': 'تسوية مخزون',
            'adjustment': 'تسوية عامة',
            'opening': 'رصيد افتتاحي',
            'closing': 'رصيد ختامي',
            'manual': 'قيد يدوي'
        };

        const typeColor = {
            'sale_invoice': 'success',
            'purchase_invoice': 'primary',
            'receipt': 'info',
            'payment': 'warning',
            'inventory_in': 'success',
            'inventory_out': 'danger',
            'inventory_transfer': 'info',
            'inventory_adjustment': 'warning',
            'adjustment': 'secondary',
            'opening': 'dark',
            'closing': 'dark',
            'manual': 'light'
        };

        html += `
            <tr>
                <td>${entry.entryDate}</td>
                <td><span class="badge bg-${typeColor[entry.entryType] || 'secondary'}">${entryTypeText[entry.entryType] || entry.entryType}</span></td>
                <td>${entry.description}</td>
                <td>${entry.debitAccount}</td>
                <td>${entry.creditAccount}</td>
                <td>${formatCurrency(entry.debitAmount || 0, entry.currency)}</td>
                <td>${formatCurrency(entry.creditAmount || 0, entry.currency)}</td>
                <td>${getCurrencySymbol(entry.currency || 'SYP')}</td>
                <td>${entry.referenceId || '-'}</td>
            </tr>
        `;
    });

    // تحديث الإجماليات
    setTimeout(() => {
        const totalDebitElement = document.getElementById('totalDebit');
        const totalCreditElement = document.getElementById('totalCredit');
        const balanceStatusElement = document.getElementById('balanceStatus');

        // التحقق من وجود عملات متعددة في النتائج
        const currencies = [...new Set(allEntries.map(entry => entry.currency || 'SYP'))];
        const currencyDisplay = currencies.length === 1 ? ` ${getCurrencySymbol(currencies[0])}` : '';

        if (totalDebitElement) totalDebitElement.textContent = formatCurrency(totalDebit) + currencyDisplay;
        if (totalCreditElement) totalCreditElement.textContent = formatCurrency(totalCredit) + currencyDisplay;

        // تحديث حالة التوازن
        if (balanceStatusElement) {
            const isBalanced = Math.abs(totalDebit - totalCredit) < 0.01;
            balanceStatusElement.innerHTML = isBalanced ?
                '<span class="badge bg-success">متوازن</span>' :
                '<span class="badge bg-danger">غير متوازن</span>';
        }

        // تحديث الإحصائيات المفصلة
        const totalEntriesElement = document.getElementById('totalEntries');
        const usedCurrenciesElement = document.getElementById('usedCurrencies');
        const balanceStatusTextElement = document.getElementById('balanceStatusText');

        if (totalEntriesElement) totalEntriesElement.textContent = allEntries.length;
        if (usedCurrenciesElement) usedCurrenciesElement.textContent = currencies.length;
        if (balanceStatusTextElement) {
            const isBalanced = Math.abs(totalDebit - totalCredit) < 0.01;
            balanceStatusTextElement.textContent = isBalanced ? 'متوازن' : 'غير متوازن';
            balanceStatusTextElement.className = isBalanced ? 'text-success' : 'text-danger';
        }
    }, 100);

    return html;
}

function getReceiptsRows(receipts) {
    if (receipts.length === 0) {
        return '<tr><td colspan="8" class="text-center text-muted">لا توجد سندات قبض</td></tr>';
    }

    let html = '';
    receipts.forEach(receipt => {
        const customer = appData.customers.find(c => c.id === receipt.customerId);
        const methodText = {
            'cash': 'نقدي',
            'bank': 'تحويل بنكي',
            'check': 'شيك',
            'card': 'بطاقة ائتمان'
        };

        html += `
            <tr>
                <td><strong>${receipt.paymentNumber}</strong></td>
                <td>${customer ? customer.name : '-'}</td>
                <td>${receipt.paymentDate}</td>
                <td>${formatCurrency(receipt.amount, receipt.currency)}</td>
                <td><span class="badge bg-info">${methodText[receipt.paymentMethod] || receipt.paymentMethod}</span></td>
                <td>${receipt.referenceNumber || '-'}</td>
                <td><span class="badge bg-${receipt.status === 'confirmed' ? 'success' : 'warning'}">${receipt.status === 'confirmed' ? 'مؤكد' : 'معلق'}</span></td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="viewReceipt(${receipt.id})" title="عرض">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="printReceipt(${receipt.id})" title="طباعة">
                            <i class="fas fa-print"></i>
                        </button>

                        <button class="btn btn-sm btn-outline-info" onclick="editReceipt(${receipt.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteReceipt(${receipt.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

function getPaymentsRows(payments) {
    if (payments.length === 0) {
        return '<tr><td colspan="8" class="text-center text-muted">لا توجد سندات دفع</td></tr>';
    }

    let html = '';
    payments.forEach(payment => {
        const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
        const methodText = {
            'cash': 'نقدي',
            'bank': 'تحويل بنكي',
            'check': 'شيك',
            'card': 'بطاقة ائتمان'
        };

        html += `
            <tr>
                <td><strong>${payment.paymentNumber}</strong></td>
                <td>${supplier ? supplier.name : '-'}</td>
                <td>${payment.paymentDate}</td>
                <td>${formatCurrency(payment.amount, payment.currency)}</td>
                <td><span class="badge bg-info">${methodText[payment.paymentMethod] || payment.paymentMethod}</span></td>
                <td>${payment.referenceNumber || '-'}</td>
                <td><span class="badge bg-${payment.status === 'confirmed' ? 'success' : 'warning'}">${payment.status === 'confirmed' ? 'مؤكد' : 'معلق'}</span></td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="viewPayment(${payment.id})" title="عرض">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="printPayment(${payment.id})" title="طباعة">
                            <i class="fas fa-print"></i>
                        </button>

                        <button class="btn btn-sm btn-outline-info" onclick="editPayment(${payment.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deletePayment(${payment.id})" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    return html;
}

function loadCustomerStatement() {
    console.log('📊 تحميل كشف حساب العميل...');

    const customerId = document.getElementById('statementCustomer').value;
    const fromDate = document.getElementById('statementFromDate').value;
    const toDate = document.getElementById('statementToDate').value;

    if (customerId) {
        document.getElementById('customerInfo').style.display = 'block';
        document.getElementById('noCustomerSelected').style.display = 'none';

        const customer = appData.customers.find(c => c.id == customerId);
        if (customer) {
            console.log('👤 العميل المحدد:', customer.name);

            // عرض معلومات العميل
            document.getElementById('customerName').textContent = customer.name;
            document.getElementById('customerAddress').textContent = customer.address || 'غير محدد';
            document.getElementById('customerPhone').textContent = customer.phone || 'غير محدد';
            document.getElementById('customerEmail').textContent = customer.email || 'غير محدد';

            // جمع جميع الحركات المالية للعميل
            const transactions = [];
            let runningBalance = 0;

            // إضافة الفواتير
            const customerInvoices = appData.invoices.filter(inv =>
                inv.customerId == customerId &&
                inv.status === 'confirmed' &&
                (!fromDate || inv.invoiceDate >= fromDate) &&
                (!toDate || inv.invoiceDate <= toDate)
            );

            customerInvoices.forEach(invoice => {
                const debitAmount = invoice.totalAmount || 0;
                runningBalance += debitAmount;

                transactions.push({
                    date: invoice.invoiceDate,
                    description: `فاتورة مبيعات رقم ${invoice.invoiceNumber}`,
                    reference: invoice.invoiceNumber,
                    debit: debitAmount,
                    credit: 0,
                    balance: runningBalance,
                    type: 'invoice',
                    id: invoice.id
                });
            });

            // إضافة سندات القبض
            const customerReceipts = appData.payments.filter(payment =>
                payment.customerId == customerId &&
                payment.paymentType === 'receipt' &&
                payment.status === 'confirmed' &&
                (!fromDate || payment.paymentDate >= fromDate) &&
                (!toDate || payment.paymentDate <= toDate)
            );

            customerReceipts.forEach(receipt => {
                const creditAmount = receipt.amount || 0;
                runningBalance -= creditAmount;

                const currencyText = receipt.currencySymbol || receipt.currency || 'ل.س';

                transactions.push({
                    date: receipt.paymentDate,
                    description: `سند قبض رقم ${receipt.paymentNumber} - ${getPaymentMethodText(receipt.paymentMethod)}`,
                    reference: receipt.paymentNumber,
                    debit: 0,
                    credit: creditAmount,
                    balance: runningBalance,
                    type: 'receipt',
                    id: receipt.id,
                    currency: currencyText
                });
            });

            // ترتيب الحركات حسب التاريخ
            transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

            // إعادة حساب الأرصدة المتراكمة
            let balance = 0;
            transactions.forEach(transaction => {
                balance += transaction.debit - transaction.credit;
                transaction.balance = balance;
            });

            // تحديث الأرصدة في الواجهة
            const previousBalance = 0; // يمكن تحسينه لاحقاً لحساب الرصيد السابق
            const currentBalance = balance;

            document.getElementById('previousBalance').textContent = formatCurrency(previousBalance);
            document.getElementById('currentBalance').textContent = formatCurrency(currentBalance);

            // تحديث جدول كشف الحساب
            const tableBody = document.getElementById('statementTable');
            if (transactions.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-muted py-4"><i class="fas fa-info-circle me-2"></i>لا توجد حركات في هذه الفترة</td></tr>';
            } else {
                tableBody.innerHTML = transactions.map(transaction => {
                    const balanceClass = transaction.balance > 0 ? 'text-danger' : transaction.balance < 0 ? 'text-success' : 'text-muted';
                    const currencySymbol = transaction.currency || appData.settings.currencySymbol || 'ل.س';

                    return `
                        <tr>
                            <td>${transaction.date}</td>
                            <td>${transaction.description}</td>
                            <td>
                                <span class="badge bg-${transaction.type === 'invoice' ? 'primary' : 'success'}">
                                    ${transaction.reference}
                                </span>
                            </td>
                            <td class="text-end">
                                ${transaction.debit > 0 ? formatCurrency(transaction.debit) : '-'}
                            </td>
                            <td class="text-end">
                                ${transaction.credit > 0 ? formatCurrency(transaction.credit) : '-'}
                            </td>
                            <td class="text-end">
                                <strong class="${balanceClass}">
                                    ${formatCurrency(Math.abs(transaction.balance))} ${transaction.balance < 0 ? '(دائن)' : '(مدين)'}
                                </strong>
                            </td>
                        </tr>
                    `;
                }).join('');

                // إضافة صف الإجماليات
                const totalDebits = transactions.reduce((sum, t) => sum + t.debit, 0);
                const totalCredits = transactions.reduce((sum, t) => sum + t.credit, 0);
                const finalBalance = totalDebits - totalCredits;
                const finalBalanceClass = finalBalance > 0 ? 'text-danger' : finalBalance < 0 ? 'text-success' : 'text-muted';

                tableBody.innerHTML += `
                    <tr class="table-info">
                        <td colspan="3"><strong>الإجماليات:</strong></td>
                        <td class="text-end"><strong>${formatCurrency(totalDebits)}</strong></td>
                        <td class="text-end"><strong>${formatCurrency(totalCredits)}</strong></td>
                        <td class="text-end">
                            <strong class="${finalBalanceClass}">
                                ${formatCurrency(Math.abs(finalBalance))} ${finalBalance < 0 ? '(دائن)' : '(مدين)'}
                            </strong>
                        </td>
                    </tr>
                `;
            }

            console.log(`✅ تم تحميل كشف الحساب: ${transactions.length} حركة، الرصيد النهائي: ${formatCurrency(currentBalance)}`);
        }
    } else {
        document.getElementById('customerInfo').style.display = 'none';
        document.getElementById('noCustomerSelected').style.display = 'block';
    }
}

/**
 * تطبيق فلاتر حركة المخزون
 */
function applyInventoryMovementsFilter() {
    const typeFilter = document.getElementById('movementTypeFilter')?.value || '';
    const productFilter = document.getElementById('productFilter')?.value || '';
    const warehouseFilter = document.getElementById('warehouseFilter')?.value || '';
    const fromDate = document.getElementById('fromDate')?.value || '';
    const toDate = document.getElementById('toDate')?.value || '';
    const searchText = document.getElementById('movementSearch')?.value.toLowerCase() || '';

    let filteredMovements = appData.inventoryMovements || [];

    // تطبيق فلتر نوع الحركة
    if (typeFilter) {
        filteredMovements = filteredMovements.filter(movement => movement.movementType === typeFilter);
    }

    // تطبيق فلتر الصنف
    if (productFilter) {
        filteredMovements = filteredMovements.filter(movement => movement.productId == productFilter);
    }

    // تطبيق فلتر المخزن
    if (warehouseFilter) {
        filteredMovements = filteredMovements.filter(movement => movement.warehouseId == warehouseFilter);
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredMovements = filteredMovements.filter(movement => movement.date >= fromDate);
    }
    if (toDate) {
        filteredMovements = filteredMovements.filter(movement => movement.date <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredMovements = filteredMovements.filter(movement => {
            const reference = (movement.reference || '').toLowerCase();
            const notes = (movement.notes || '').toLowerCase();

            return reference.includes(searchText) || notes.includes(searchText);
        });
    }

    // تحديث الجدول
    updateInventoryMovementsTable(filteredMovements);
}

/**
 * مسح فلاتر حركة المخزون
 */
function clearInventoryMovementsFilter() {
    const typeFilter = document.getElementById('movementTypeFilter');
    const productFilter = document.getElementById('productFilter');
    const warehouseFilter = document.getElementById('warehouseFilter');
    const fromDate = document.getElementById('fromDate');
    const toDate = document.getElementById('toDate');
    const searchText = document.getElementById('movementSearch');

    if (typeFilter) typeFilter.value = '';
    if (productFilter) productFilter.value = '';
    if (warehouseFilter) warehouseFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchText) searchText.value = '';

    // عرض جميع الحركات
    updateInventoryMovementsTable(appData.inventoryMovements || []);
}

/**
 * تطبيق فلاتر تفاصيل حركة المخزون
 */
function applyInventoryDetailsFilter() {
    const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
    const productFilter = document.getElementById('detailsProductFilter')?.value || '';
    const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
    const fromDate = document.getElementById('detailsFromDate')?.value || '';
    const toDate = document.getElementById('detailsToDate')?.value || '';
    const searchText = document.getElementById('detailsMovementSearch')?.value.toLowerCase() || '';

    let movements = appData.inventoryMovements || [];

    // تطبيق الفلاتر
    if (typeFilter) {
        movements = movements.filter(movement => movement.movementType === typeFilter);
    }

    if (productFilter) {
        movements = movements.filter(movement => movement.productId == productFilter);
    }

    if (warehouseFilter) {
        movements = movements.filter(movement => movement.warehouseId == warehouseFilter);
    }

    if (fromDate) {
        movements = movements.filter(movement => movement.date >= fromDate);
    }

    if (toDate) {
        movements = movements.filter(movement => movement.date <= toDate);
    }

    if (searchText) {
        movements = movements.filter(movement => {
            const reference = (movement.reference || '').toLowerCase();
            const notes = (movement.notes || '').toLowerCase();
            return reference.includes(searchText) || notes.includes(searchText);
        });
    }

    // تحديث الجدول
    updateInventoryDetailsTable(movements);

    // تحديث الإحصائيات
    updateInventoryDetailsStats(movements);
}

/**
 * مسح فلاتر تفاصيل حركة المخزون
 */
function clearInventoryDetailsFilter() {
    const typeFilter = document.getElementById('detailsMovementTypeFilter');
    const productFilter = document.getElementById('detailsProductFilter');
    const warehouseFilter = document.getElementById('detailsWarehouseFilter');
    const fromDate = document.getElementById('detailsFromDate');
    const toDate = document.getElementById('detailsToDate');
    const searchInput = document.getElementById('detailsMovementSearch');

    if (typeFilter) typeFilter.value = '';
    if (productFilter) productFilter.value = '';
    if (warehouseFilter) warehouseFilter.value = '';
    if (fromDate) fromDate.value = '';
    if (toDate) toDate.value = '';
    if (searchInput) searchInput.value = '';

    // عرض جميع الحركات
    updateInventoryDetailsTable(appData.inventoryMovements || []);
    updateInventoryDetailsStats();
}

/**
 * عرض الإخراجات فقط
 */
function showOnlyOutMovements() {
    document.getElementById('detailsMovementTypeFilter').value = 'out';
    applyInventoryDetailsFilter();
}

/**
 * عرض الإدخالات فقط
 */
function showOnlyInMovements() {
    document.getElementById('detailsMovementTypeFilter').value = 'in';
    applyInventoryDetailsFilter();
}

/**
 * تحديث جدول تفاصيل حركة المخزون
 */
function updateInventoryDetailsTable(movements) {
    const tableContainer = document.querySelector('#inventoryDetailsTable');
    if (!tableContainer) return;

    if (movements && movements.length > 0) {
        // ترتيب الحركات حسب التاريخ (الأحدث أولاً)
        const sortedMovements = movements.sort((a, b) => new Date(b.date) - new Date(a.date));

        let html = '';
        sortedMovements.forEach((movement, index) => {
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

            const typeText = {
                'in': 'إدخال',
                'out': 'إخراج',
                'transfer': 'تحويل',
                'adjustment': 'تسوية',
                'sale': 'مبيعات',
                'purchase': 'مشتريات',
                'return': 'مرتجعات'
            };

            const typeColor = {
                'in': 'success',
                'out': 'danger',
                'transfer': 'info',
                'adjustment': 'warning',
                'sale': 'primary',
                'purchase': 'secondary',
                'return': 'dark'
            };

            const typeIcon = {
                'in': 'fa-arrow-up',
                'out': 'fa-arrow-down',
                'transfer': 'fa-exchange-alt',
                'adjustment': 'fa-balance-scale',
                'sale': 'fa-shopping-cart',
                'purchase': 'fa-shopping-bag',
                'return': 'fa-undo'
            };

            let reason = movement.reference || '-';
            let reasonClass = '';

            if (movement.reference) {
                if (movement.reference.includes('فاتورة')) {
                    reasonClass = 'text-primary';
                } else if (movement.reference.includes('تحويل')) {
                    reasonClass = 'text-info';
                } else if (movement.reference.includes('تسوية')) {
                    reasonClass = 'text-warning';
                }
            }

            const user = movement.userId ? 'مستخدم ' + movement.userId : 'النظام';

            html += `
                <tr class="movement-row">
                    <td class="text-center">
                        <small>${movement.date}</small>
                    </td>
                    <td class="text-center">
                        <span class="badge bg-${typeColor[movement.movementType]} d-flex align-items-center justify-content-center" style="min-width: 80px;">
                            <i class="fas ${typeIcon[movement.movementType]} me-1"></i>
                            ${typeText[movement.movementType] || movement.movementType}
                        </span>
                    </td>
                    <td>
                        <div class="d-flex flex-column">
                            <strong class="text-dark">${product ? product.name : 'منتج محذوف'}</strong>
                            <small class="text-muted">${product ? product.code : '-'}</small>
                        </div>
                    </td>
                    <td>
                        <span class="badge bg-light text-dark">${warehouse ? warehouse.name : 'مخزن محذوف'}</span>
                    </td>
                    <td class="text-center">
                        <strong class="text-${movement.movementType === 'out' ? 'danger' : 'success'}">
                            ${movement.movementType === 'out' ? '-' : '+'}${movement.quantity}
                        </strong>
                    </td>
                    <td class="text-center">
                        <small class="text-muted">${product ? product.unit : '-'}</small>
                    </td>
                    <td class="text-end">
                        ${formatCurrency(movement.unitPrice || 0)}
                    </td>
                    <td class="text-end">
                        <strong>${formatCurrency(movement.totalAmount || (movement.quantity * (movement.unitPrice || 0)))}</strong>
                    </td>
                    <td class="${reasonClass}">
                        <small>${reason}</small>
                    </td>
                    <td class="text-center">
                        <small class="text-muted">${user}</small>
                    </td>
                    <td>
                        <small class="text-muted">${movement.notes || '-'}</small>
                    </td>
                </tr>
            `;
        });

        tableContainer.innerHTML = html;
    } else {
        tableContainer.innerHTML = '<tr><td colspan="11" class="text-center text-muted">لا توجد حركات مخزون</td></tr>';
    }

    // تحديث عداد الحركات
    const countElement = document.getElementById('movementsCount');
    if (countElement) {
        countElement.textContent = movements ? movements.length : 0;
    }
}

/**
 * تحديث إحصائيات تفاصيل حركة المخزون - محسن وشامل
 */
function updateInventoryDetailsStats(movements = null) {
    const allMovements = movements || appData.inventoryMovements || [];

    // حساب إحصائيات شاملة
    const stats = {
        totalMovements: allMovements.length,
        inMovements: 0,
        outMovements: 0,
        transferMovements: 0,
        adjustmentMovements: 0,
        saleMovements: 0,
        purchaseMovements: 0,
        returnMovements: 0,
        damageMovements: 0,
        totalQuantityIn: 0,
        totalQuantityOut: 0,
        totalValue: 0,
        uniqueProducts: new Set(),
        uniqueWarehouses: new Set(),
        dateRange: { earliest: null, latest: null }
    };

    allMovements.forEach(movement => {
        const quantity = parseFloat(movement.quantity) || 0;
        const unitPrice = parseFloat(movement.unitPrice) || 0;
        const value = Math.abs(quantity) * unitPrice;

        stats.totalValue += value;
        stats.uniqueProducts.add(movement.productId);
        stats.uniqueWarehouses.add(movement.warehouseId);

        // تحديد نطاق التواريخ
        const movementDate = new Date(movement.date);
        if (!stats.dateRange.earliest || movementDate < stats.dateRange.earliest) {
            stats.dateRange.earliest = movementDate;
        }
        if (!stats.dateRange.latest || movementDate > stats.dateRange.latest) {
            stats.dateRange.latest = movementDate;
        }

        // تصنيف الحركات
        switch (movement.movementType) {
            case 'in':
            case 'transfer_in':
                stats.inMovements++;
                stats.totalQuantityIn += Math.abs(quantity);
                break;
            case 'out':
            case 'transfer_out':
                stats.outMovements++;
                stats.totalQuantityOut += Math.abs(quantity);
                break;
            case 'transfer':
                stats.transferMovements++;
                break;
            case 'adjustment':
                stats.adjustmentMovements++;
                if (quantity >= 0) {
                    stats.totalQuantityIn += quantity;
                } else {
                    stats.totalQuantityOut += Math.abs(quantity);
                }
                break;
            case 'sale':
                stats.saleMovements++;
                stats.totalQuantityOut += Math.abs(quantity);
                break;
            case 'purchase':
                stats.purchaseMovements++;
                stats.totalQuantityIn += Math.abs(quantity);
                break;
            case 'return_sale':
                stats.returnMovements++;
                stats.totalQuantityIn += Math.abs(quantity);
                break;
            case 'return_purchase':
                stats.returnMovements++;
                stats.totalQuantityOut += Math.abs(quantity);
                break;
            case 'damage':
                stats.damageMovements++;
                stats.totalQuantityOut += Math.abs(quantity);
                break;
        }
    });

    // تحديث العناصر في الصفحة
    const elements = {
        'totalMovements': stats.totalMovements,
        'totalInMovements': stats.inMovements,
        'totalOutMovements': stats.outMovements,
        'totalTransferMovements': stats.transferMovements,
        'totalAdjustmentMovements': stats.adjustmentMovements,
        'totalSaleMovements': stats.saleMovements,
        'totalPurchaseMovements': stats.purchaseMovements,
        'totalReturnMovements': stats.returnMovements,
        'totalDamageMovements': stats.damageMovements,
        'totalQuantityIn': stats.totalQuantityIn.toFixed(2),
        'totalQuantityOut': stats.totalQuantityOut.toFixed(2),
        'netQuantity': (stats.totalQuantityIn - stats.totalQuantityOut).toFixed(2),
        'totalMovementsValue': formatCurrency(stats.totalValue),
        'uniqueProductsCount': stats.uniqueProducts.size,
        'uniqueWarehousesCount': stats.uniqueWarehouses.size
    };

    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });

    // تحديث نطاق التواريخ
    const dateRangeElement = document.getElementById('movementsDateRange');
    if (dateRangeElement && stats.dateRange.earliest && stats.dateRange.latest) {
        const earliestStr = stats.dateRange.earliest.toLocaleDateString('ar-SY');
        const latestStr = stats.dateRange.latest.toLocaleDateString('ar-SY');
        dateRangeElement.textContent = `من ${earliestStr} إلى ${latestStr}`;
    }

    // تحديث مؤشرات الأداء
    updatePerformanceIndicators(stats);

    return stats;
}

/**
 * تحديث مؤشرات الأداء
 */
function updatePerformanceIndicators(stats) {
    // حساب معدل الحركة اليومية
    if (stats.dateRange.earliest && stats.dateRange.latest) {
        const daysDiff = Math.ceil((stats.dateRange.latest - stats.dateRange.earliest) / (1000 * 60 * 60 * 24)) || 1;
        const dailyMovementRate = (stats.totalMovements / daysDiff).toFixed(1);

        const dailyRateElement = document.getElementById('dailyMovementRate');
        if (dailyRateElement) {
            dailyRateElement.textContent = `${dailyMovementRate} حركة/يوم`;
        }
    }

    // حساب متوسط قيمة الحركة
    const avgMovementValue = stats.totalMovements > 0 ? (stats.totalValue / stats.totalMovements) : 0;
    const avgValueElement = document.getElementById('avgMovementValue');
    if (avgValueElement) {
        avgValueElement.textContent = formatCurrency(avgMovementValue);
    }

    // حساب نسبة الإدخال إلى الإخراج
    const inOutRatio = stats.totalQuantityOut > 0 ? (stats.totalQuantityIn / stats.totalQuantityOut) : 0;
    const ratioElement = document.getElementById('inOutRatio');
    if (ratioElement) {
        ratioElement.textContent = `${inOutRatio.toFixed(2)}:1`;
        ratioElement.className = `badge ${inOutRatio >= 1 ? 'bg-success' : 'bg-warning'}`;
    }
}

/**
 * تحديث جدول حركة المخزون
 */
function updateInventoryMovementsTable(movements) {
    const tableContainer = document.querySelector('#inventoryMovementsTable') ||
                          document.querySelector('#main-content .table tbody');
    if (!tableContainer) return;

    if (movements.length > 0) {
        let totalIn = 0;
        let totalOut = 0;

        tableContainer.innerHTML = movements.map(movement => {
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
            const totalAmount = movement.quantity * movement.unitPrice;

            if (movement.movementType === 'in') {
                totalIn += totalAmount;
            } else if (movement.movementType === 'out') {
                totalOut += totalAmount;
            }

            return `
                <tr>
                    <td>${movement.date}</td>
                    <td>
                        <span class="badge bg-${movement.movementType === 'in' ? 'success' : movement.movementType === 'out' ? 'danger' : 'warning'}">
                            ${getMovementTypeText(movement.movementType)}
                        </span>
                    </td>
                    <td>${product ? product.name : 'غير محدد'}</td>
                    <td>${warehouse ? warehouse.name : 'غير محدد'}</td>
                    <td>
                        <span class="badge bg-${movement.movementType === 'in' ? 'success' : 'danger'}">
                            ${movement.movementType === 'in' ? '+' : '-'}${movement.quantity} ${product ? product.unit : ''}
                        </span>
                    </td>
                    <td>${formatCurrency(movement.unitPrice)}</td>
                    <td>${formatCurrency(totalAmount)}</td>
                    <td>${movement.reference || '-'}</td>
                    <td>${movement.notes || '-'}</td>
                </tr>
            `;
        }).join('');

        // إضافة صف الإجماليات
        tableContainer.innerHTML += `
            <tr class="table-info">
                <td colspan="6"><strong>الإجماليات:</strong></td>
                <td><strong>إدخال: ${formatCurrency(totalIn)}</strong></td>
                <td><strong>إخراج: ${formatCurrency(totalOut)}</strong></td>
                <td><strong>الصافي: ${formatCurrency(totalIn - totalOut)}</strong></td>
            </tr>
        `;

    } else {
        tableContainer.innerHTML = `
            <tr>
                <td colspan="9" class="text-center text-muted py-4">
                    <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                    <h5>لا توجد حركات مخزون تطابق معايير البحث</h5>
                    <p>جرب تغيير الفلاتر أو مسحها</p>
                    <button class="btn btn-primary" onclick="clearInventoryMovementsFilter()">
                        <i class="fas fa-times me-2"></i>مسح الفلاتر
                    </button>
                </td>
            </tr>
        `;
    }
}

/**
 * الحصول على نص نوع الحركة
 */
function getMovementTypeText(type) {
    const types = {
        'in': 'إدخال',
        'out': 'إخراج',
        'transfer': 'تحويل',
        'adjustment': 'تسوية'
    };
    return types[type] || type;
}

/**
 * الحصول على نص طريقة الدفع
 */
function getPaymentMethodText(method) {
    const methods = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };
    return methods[method] || method;
}

/**
 * الحصول على معلومات نوع القيد
 */
function getEntryTypeInfo(entry) {
    if (entry.invoiceId || entry.referenceType === 'invoice') {
        return {
            text: 'فاتورة',
            color: 'primary',
            icon: 'fas fa-file-invoice'
        };
    } else if (entry.paymentId || entry.referenceType === 'payment') {
        return {
            text: 'سند',
            color: 'success',
            icon: 'fas fa-money-bill'
        };
    } else {
        return {
            text: 'تسوية',
            color: 'warning',
            icon: 'fas fa-balance-scale'
        };
    }
}

/**
 * الحصول على رمز العملة
 */
function getCurrencySymbol(currency) {
    const symbols = {
        'SYP': 'ل.س',
        'USD': '$',
        'EUR': '€',
        'TRY': '₺',
        'SAR': 'ر.س',
        'AED': 'د.إ'
    };
    return symbols[currency] || currency;
}

/**
 * تنسيق التاريخ بصيغة صحيحة
 */
function formatDate(dateString) {
    if (!dateString) return '-';

    try {
        const date = new Date(dateString);

        // التحقق من صحة التاريخ
        if (isNaN(date.getTime())) {
            return dateString; // إرجاع النص الأصلي إذا لم يكن تاريخاً صحيحاً
        }

        // تنسيق التاريخ بصيغة dd/mm/yyyy
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        return `${day}/${month}/${year}`;
    } catch (error) {
        console.warn('خطأ في تنسيق التاريخ:', dateString, error);
        return dateString;
    }
}

/**
 * الحصول على التاريخ الحالي بتنسيق صحيح للإدخال
 */
function getCurrentDateForInput() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

/**
 * تحويل التاريخ إلى تنسيق قاعدة البيانات
 */
function formatDateForDB(dateString) {
    if (!dateString) return getCurrentDateForInput();

    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
            return getCurrentDateForInput();
        }

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch (error) {
        console.warn('خطأ في تحويل التاريخ:', dateString, error);
        return getCurrentDateForInput();
    }
}

/**
 * تنسيق التاريخ والوقت بصيغة صحيحة
 */
function formatDateTime(dateString) {
    if (!dateString) return '-';

    try {
        const date = new Date(dateString);

        // التحقق من صحة التاريخ
        if (isNaN(date.getTime())) {
            return dateString;
        }

        // تنسيق التاريخ والوقت بصيغة dd/mm/yyyy HH:mm:ss
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
    } catch (error) {
        console.warn('خطأ في تنسيق التاريخ والوقت:', dateString, error);
        return dateString;
    }
}

/**
 * تنسيق التاريخ للطباعة بصيغة عربية واضحة
 */
function formatDateForPrint(dateString) {
    if (!dateString) return '-';

    try {
        const date = new Date(dateString);

        // التحقق من صحة التاريخ
        if (isNaN(date.getTime())) {
            return dateString;
        }

        // تنسيق التاريخ بصيغة dd/mm/yyyy مع أسماء الأشهر العربية
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        const arabicMonths = [
            'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
            'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
        ];

        const monthName = arabicMonths[date.getMonth()];

        return `${day}/${month}/${year} (${day} ${monthName} ${year})`;
    } catch (error) {
        console.warn('خطأ في تنسيق التاريخ للطباعة:', dateString, error);
        return dateString;
    }
}

/**
 * تحديث بيانات العميل عند إضافة فاتورة مبيعات
 */
function updateCustomerData(customerId, invoiceAmount, currency = 'SYP', invoiceDate) {
    const customer = appData.customers.find(c => c.id === customerId);
    if (!customer) return;

    // تحديث آخر تاريخ معاملة
    customer.lastTransactionDate = invoiceDate || new Date().toISOString().split('T')[0];

    // تحديث إجمالي المبيعات
    customer.totalSales = (customer.totalSales || 0) + invoiceAmount;

    // تحديث عدد المعاملات
    customer.transactionCount = (customer.transactionCount || 0) + 1;

    // تحديث الأرصدة حسب العملة
    if (!customer.balances) customer.balances = {};
    customer.balances[currency] = (customer.balances[currency] || 0) + invoiceAmount;

    // تحديث الرصيد الحالي (للعملة الرئيسية)
    if (currency === (appData.settings.currency || 'SYP')) {
        customer.currentBalance = (customer.currentBalance || 0) + invoiceAmount;
    }

    console.log(`✅ تم تحديث بيانات العميل ${customer.name}:`, {
        totalSales: customer.totalSales,
        transactionCount: customer.transactionCount,
        balances: customer.balances
    });
}

/**
 * تحديث بيانات المورد عند إضافة فاتورة مشتريات
 */
function updateSupplierData(supplierId, invoiceAmount, currency = 'SYP', invoiceDate) {
    const supplier = appData.suppliers.find(s => s.id === supplierId);
    if (!supplier) return;

    // تحديث آخر تاريخ معاملة
    supplier.lastTransactionDate = invoiceDate || new Date().toISOString().split('T')[0];

    // تحديث إجمالي المشتريات
    supplier.totalPurchases = (supplier.totalPurchases || 0) + invoiceAmount;

    // تحديث عدد المعاملات
    supplier.transactionCount = (supplier.transactionCount || 0) + 1;

    // تحديث الأرصدة حسب العملة
    if (!supplier.balances) supplier.balances = {};
    supplier.balances[currency] = (supplier.balances[currency] || 0) + invoiceAmount;

    // تحديث الرصيد الحالي (للعملة الرئيسية)
    if (currency === (appData.settings.currency || 'SYP')) {
        supplier.currentBalance = (supplier.currentBalance || 0) + invoiceAmount;
    }

    console.log(`✅ تم تحديث بيانات المورد ${supplier.name}:`, {
        totalPurchases: supplier.totalPurchases,
        transactionCount: supplier.transactionCount,
        balances: supplier.balances
    });
}

/**
 * تحديث بيانات العميل عند إضافة سند قبض
 */
function updateCustomerPayment(customerId, paymentAmount, currency = 'SYP', paymentDate) {
    const customer = appData.customers.find(c => c.id === customerId);
    if (!customer) return;

    // تحديث آخر تاريخ معاملة
    customer.lastTransactionDate = paymentDate || new Date().toISOString().split('T')[0];

    // تحديث إجمالي المدفوعات
    customer.totalPayments = (customer.totalPayments || 0) + paymentAmount;

    // تحديث عدد المعاملات
    customer.transactionCount = (customer.transactionCount || 0) + 1;

    // تحديث الأرصدة حسب العملة (طرح المبلغ المدفوع)
    if (!customer.balances) customer.balances = {};
    customer.balances[currency] = (customer.balances[currency] || 0) - paymentAmount;

    // تحديث الرصيد الحالي (للعملة الرئيسية)
    if (currency === (appData.settings.currency || 'SYP')) {
        customer.currentBalance = (customer.currentBalance || 0) - paymentAmount;
    }

    // إعادة حساب الرصيد الإجمالي للعميل من جميع المعاملات
    recalculateCustomerBalance(customerId);

    console.log(`✅ تم تحديث بيانات العميل ${customer.name} بعد الدفع:`, {
        totalPayments: customer.totalPayments,
        transactionCount: customer.transactionCount,
        balances: customer.balances
    });
}

/**
 * تحديث بيانات المورد عند إضافة سند دفع
 */
function updateSupplierPayment(supplierId, paymentAmount, currency = 'SYP', paymentDate) {
    const supplier = appData.suppliers.find(s => s.id === supplierId);
    if (!supplier) return;

    // تحديث آخر تاريخ معاملة
    supplier.lastTransactionDate = paymentDate || new Date().toISOString().split('T')[0];

    // تحديث إجمالي المدفوعات
    supplier.totalPayments = (supplier.totalPayments || 0) + paymentAmount;

    // تحديث عدد المعاملات
    supplier.transactionCount = (supplier.transactionCount || 0) + 1;

    // تحديث الأرصدة حسب العملة (طرح المبلغ المدفوع)
    if (!supplier.balances) supplier.balances = {};
    supplier.balances[currency] = (supplier.balances[currency] || 0) - paymentAmount;

    // تحديث الرصيد الحالي (للعملة الرئيسية)
    if (currency === (appData.settings.currency || 'SYP')) {
        supplier.currentBalance = (supplier.currentBalance || 0) - paymentAmount;
    }

    // إعادة حساب الرصيد الإجمالي للمورد من جميع المعاملات
    recalculateSupplierBalance(supplierId);

    console.log(`✅ تم تحديث بيانات المورد ${supplier.name} بعد الدفع:`, {
        totalPayments: supplier.totalPayments,
        transactionCount: supplier.transactionCount,
        balances: supplier.balances
    });
}

/**
 * تحديث أرصدة العملات
 */
function refreshCurrencyBalances() {
    console.log('💰 تحديث أرصدة العملات...');

    // جمع جميع العملات المستخدمة
    const currencies = new Set(['SYP']); // الليرة السورية كعملة افتراضية

    // جمع العملات من الفواتير
    appData.invoices.forEach(invoice => {
        if (invoice.currency) {
            currencies.add(invoice.currency);
        }
    });

    // جمع العملات من الدفعات
    appData.payments.forEach(payment => {
        if (payment.currency) {
            currencies.add(payment.currency);
        }
    });

    // رموز العملات
    const currencySymbols = {
        'SYP': 'ل.س',
        'USD': '$',
        'EUR': '€',
        'TRY': '₺',
        'SAR': 'ر.س',
        'AED': 'د.إ'
    };

    const currencyNames = {
        'SYP': 'ليرة سورية',
        'USD': 'دولار أمريكي',
        'EUR': 'يورو',
        'TRY': 'ليرة تركية',
        'SAR': 'ريال سعودي',
        'AED': 'درهم إماراتي'
    };

    const balanceData = [];
    let totalPositive = 0;
    let totalNegative = 0;

    currencies.forEach(currency => {
        // حساب أرصدة العملاء
        let customerBalance = 0;
        appData.customers.forEach(customer => {
            // فواتير العميل
            const customerInvoices = appData.invoices.filter(inv =>
                inv.customerId === customer.id &&
                inv.status === 'confirmed' &&
                (inv.currency === currency || (!inv.currency && currency === 'SYP'))
            );

            customerInvoices.forEach(invoice => {
                customerBalance += invoice.totalAmount || 0;
            });

            // دفعات العميل
            const customerPayments = appData.payments.filter(payment =>
                payment.customerId === customer.id &&
                payment.paymentType === 'receipt' &&
                payment.status === 'confirmed' &&
                (payment.currency === currency || (!payment.currency && currency === 'SYP'))
            );

            customerPayments.forEach(payment => {
                customerBalance -= payment.amount || 0;
            });
        });

        // حساب أرصدة الموردين
        let supplierBalance = 0;
        appData.suppliers.forEach(supplier => {
            // فواتير المورد
            const supplierInvoices = appData.invoices.filter(inv =>
                inv.supplierId === supplier.id &&
                inv.status === 'confirmed' &&
                (inv.currency === currency || (!inv.currency && currency === 'SYP'))
            );

            supplierInvoices.forEach(invoice => {
                supplierBalance += invoice.totalAmount || 0;
            });

            // دفعات المورد
            const supplierPayments = appData.payments.filter(payment =>
                payment.supplierId === supplier.id &&
                payment.paymentType === 'payment' &&
                payment.status === 'confirmed' &&
                (payment.currency === currency || (!payment.currency && currency === 'SYP'))
            );

            supplierPayments.forEach(payment => {
                supplierBalance -= payment.amount || 0;
            });
        });

        // حساب رصيد الصندوق
        let cashBalance = 0;
        const cashPayments = appData.payments.filter(payment =>
            payment.paymentMethod === 'cash' &&
            payment.status === 'confirmed' &&
            (payment.currency === currency || (!payment.currency && currency === 'SYP'))
        );

        cashPayments.forEach(payment => {
            if (payment.paymentType === 'receipt') {
                cashBalance += payment.amount || 0;
            } else {
                cashBalance -= payment.amount || 0;
            }
        });

        // حساب رصيد البنك
        let bankBalance = 0;
        const bankPayments = appData.payments.filter(payment =>
            payment.paymentMethod === 'bank' &&
            payment.status === 'confirmed' &&
            (payment.currency === currency || (!payment.currency && currency === 'SYP'))
        );

        bankPayments.forEach(payment => {
            if (payment.paymentType === 'receipt') {
                bankBalance += payment.amount || 0;
            } else {
                bankBalance -= payment.amount || 0;
            }
        });

        // حساب صافي الرصيد
        const netBalance = customerBalance - supplierBalance + cashBalance + bankBalance;

        if (netBalance > 0) totalPositive++;
        if (netBalance < 0) totalNegative++;

        balanceData.push({
            currency,
            symbol: currencySymbols[currency] || currency,
            name: currencyNames[currency] || currency,
            customerBalance,
            supplierBalance,
            cashBalance,
            bankBalance,
            netBalance,
            // إضافة معلومات إضافية للعملة
            isBaseCurrency: currency === (appData.settings.currency || 'SYP'),
            exchangeRate: appData.settings.exchangeRates ? appData.settings.exchangeRates[currency] : 1.0
        });
    });

    // تحديث الجدول
    updateCurrencyBalancesTable(balanceData);

    // تحديث الإحصائيات
    document.getElementById('totalCurrencies').textContent = currencies.size;
    document.getElementById('positiveCurrencies').textContent = totalPositive;
    document.getElementById('negativeCurrencies').textContent = totalNegative;
    document.getElementById('lastUpdateTime').textContent = formatDateTime(new Date());

    console.log(`✅ تم تحديث أرصدة ${currencies.size} عملة`);
}

/**
 * تحديث جدول أرصدة العملات
 */
function updateCurrencyBalancesTable(balanceData) {
    const tableBody = document.getElementById('currencyBalancesTable');
    const summaryContainer = document.getElementById('currencyBalancesSummary');

    if (!tableBody || !summaryContainer) return;

    // تحديث الملخص
    summaryContainer.innerHTML = balanceData.map(data => `
        <div class="col-md-6 col-lg-4 mb-3">
            <div class="card border-left-${data.netBalance >= 0 ? 'success' : 'danger'} shadow h-100">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                            <div class="text-xs font-weight-bold text-uppercase mb-1">${data.name}</div>
                            <div class="h5 mb-0 font-weight-bold ${data.netBalance >= 0 ? 'text-success' : 'text-danger'}">
                                ${formatCurrency(Math.abs(data.netBalance))} ${data.symbol}
                            </div>
                            <small class="text-muted">${data.netBalance >= 0 ? 'رصيد موجب' : 'رصيد سالب'}</small>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-coins fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `).join('');

    // تحديث الجدول
    if (balanceData.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="8" class="text-center text-muted py-4"><i class="fas fa-coins fa-3x mb-3"></i><h5>لا توجد أرصدة للعرض</h5></td></tr>';
    } else {
        tableBody.innerHTML = balanceData.map(data => {
            const netBalanceClass = data.netBalance > 0 ? 'text-success' : data.netBalance < 0 ? 'text-danger' : 'text-muted';
            const statusBadge = data.netBalance > 0 ? 'success' : data.netBalance < 0 ? 'danger' : 'secondary';
            const statusText = data.netBalance > 0 ? 'موجب' : data.netBalance < 0 ? 'سالب' : 'متوازن';

            return `
                <tr>
                    <td>
                        <strong>${data.name}</strong>
                        <br><small class="text-muted">${data.currency}</small>
                        ${data.isBaseCurrency ? '<br><span class="badge bg-success">العملة الافتراضية</span>' : ''}
                    </td>
                    <td>
                        <span class="badge bg-primary">${data.symbol}</span>
                        ${data.exchangeRate && data.exchangeRate !== 1.0 ? `<br><small class="text-muted">سعر الصرف: ${data.exchangeRate}</small>` : ''}
                    </td>
                    <td class="text-end">
                        <span class="${data.customerBalance >= 0 ? 'text-success' : 'text-danger'}">
                            ${formatCurrency(Math.abs(data.customerBalance))} ${data.symbol}
                        </span>
                    </td>
                    <td class="text-end">
                        <span class="${data.supplierBalance >= 0 ? 'text-danger' : 'text-success'}">
                            ${formatCurrency(Math.abs(data.supplierBalance))} ${data.symbol}
                        </span>
                    </td>
                    <td class="text-end">
                        <span class="${data.cashBalance >= 0 ? 'text-success' : 'text-danger'}">
                            ${formatCurrency(Math.abs(data.cashBalance))} ${data.symbol}
                        </span>
                    </td>
                    <td class="text-end">
                        <span class="${data.bankBalance >= 0 ? 'text-success' : 'text-danger'}">
                            ${formatCurrency(Math.abs(data.bankBalance))} ${data.symbol}
                        </span>
                    </td>
                    <td class="text-end">
                        <strong class="${netBalanceClass}">
                            ${formatCurrency(Math.abs(data.netBalance))} ${data.symbol}
                        </strong>
                    </td>
                    <td>
                        <span class="badge bg-${statusBadge}">${statusText}</span>
                    </td>
                </tr>
            `;
        }).join('');
    }
}

/**
 * طباعة تقرير الأرصدة
 */
function printCurrencyBalances() {
    printContent('currency-balances', 'تقرير الأرصدة الإجمالية للعملات');
}

/**
 * تصدير تقرير الأرصدة
 */
function exportCurrencyBalances(format) {
    console.log(`📤 تصدير تقرير الأرصدة بصيغة: ${format}`);

    try {
        if (format === 'excel') {
            exportToExcel('currency-balances', 'تقرير الأرصدة الإجمالية للعملات');
        } else {
            printContent('currency-balances', 'تقرير الأرصدة الإجمالية للعملات');
        }
    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير الأرصدة:', error);
        alert('حدث خطأ أثناء التصدير. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * حساب الأرصدة بدقة لجميع العملات المدخلة
 */
function calculateAccurateBalances() {
    console.log('💰 حساب الأرصدة الدقيقة - بدء العملية...');

    const balances = {
        customers: {},
        suppliers: {},
        totals: {},
        currencies: new Set() // عملات مدخلة فعلياً فقط
    };

    // إعادة حساب أرصدة العملاء من الفواتير والدفعات
    if (appData.customers) {
        console.log(`👥 معالجة ${appData.customers.length} عميل...`);

        appData.customers.forEach(customer => {
            // إعادة تعيين الأرصدة لمنع التكرار
            customer.balances = {};
            customer.currentBalance = 0;
            customer.totalSales = 0;
            customer.totalPayments = 0;
            customer.transactionCount = 0;

            // حساب الفواتير العادية المؤكدة فقط
            const customerInvoices = (appData.invoices || []).filter(inv =>
                inv.customerId === customer.id &&
                inv.status === 'confirmed' &&
                inv.invoiceType === 'sale'
            );

            console.log(`📄 العميل ${customer.name}: ${customerInvoices.length} فاتورة عادية`);

            customerInvoices.forEach(invoice => {
                const currency = invoice.currency || 'SYP';
                const amount = parseFloat(invoice.totalAmount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!customer.balances[currency]) customer.balances[currency] = 0;
                    customer.balances[currency] += amount;
                    customer.totalSales += amount;
                    customer.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        customer.currentBalance += amount;
                    }
                }
            });

            // حساب الفواتير الخاصة المؤكدة فقط
            const customerCustomInvoices = (appData.customInvoices || []).filter(inv =>
                inv.customerId === customer.id &&
                inv.status === 'confirmed' &&
                inv.invoiceType === 'sale'
            );

            console.log(`📋 العميل ${customer.name}: ${customerCustomInvoices.length} فاتورة خاصة`);

            customerCustomInvoices.forEach(invoice => {
                const currency = invoice.currency || 'SYP';
                const amount = parseFloat(invoice.totalAmount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!customer.balances[currency]) customer.balances[currency] = 0;
                    customer.balances[currency] += amount;
                    customer.totalSales += amount;
                    customer.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        customer.currentBalance += amount;
                    }
                }
            });

            // حساب الدفعات (سندات القبض) المؤكدة فقط
            const customerPayments = (appData.payments || []).filter(payment =>
                payment.customerId === customer.id &&
                (payment.status === 'confirmed' || !payment.status) && // قبول السندات بدون حالة أيضاً
                payment.paymentType === 'receipt'
            );

            console.log(`💰 العميل ${customer.name}: ${customerPayments.length} سند قبض`);

            customerPayments.forEach(payment => {
                const currency = payment.currency || 'SYP';
                const amount = parseFloat(payment.amount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!customer.balances[currency]) customer.balances[currency] = 0;
                    customer.balances[currency] -= amount; // طرح المدفوعات من الرصيد
                    customer.totalPayments += amount;
                    customer.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        customer.currentBalance -= amount;
                    }
                }
            });

            // إضافة العملاء للأرصدة (فقط الذين لديهم أرصدة غير صفرية)
            Object.keys(customer.balances).forEach(currency => {
                const balance = customer.balances[currency];
                if (Math.abs(balance) > 0.01) { // تجاهل الأرصدة الصغيرة جداً
                    if (!balances.customers[currency]) {
                        balances.customers[currency] = [];
                    }

                    balances.customers[currency].push({
                        id: customer.id,
                        name: customer.name,
                        balance: balance,
                        lastTransaction: customer.lastTransactionDate,
                        transactionCount: customer.transactionCount,
                        totalSales: customer.totalSales,
                        totalPayments: customer.totalPayments
                    });
                }
            });

            // تحديث تاريخ آخر معاملة
            if (customer.transactionCount > 0) {
                customer.lastTransactionDate = new Date().toISOString().split('T')[0];
            }
        });
    }

    // إعادة حساب أرصدة الموردين من الفواتير والدفعات
    if (appData.suppliers) {
        console.log(`🏪 معالجة ${appData.suppliers.length} مورد...`);

        appData.suppliers.forEach(supplier => {
            // إعادة تعيين الأرصدة لمنع التكرار
            supplier.balances = {};
            supplier.currentBalance = 0;
            supplier.totalPurchases = 0;
            supplier.totalPayments = 0;
            supplier.transactionCount = 0;

            // حساب الفواتير العادية المؤكدة فقط
            const supplierInvoices = (appData.invoices || []).filter(inv =>
                inv.supplierId === supplier.id &&
                inv.status === 'confirmed' &&
                inv.invoiceType === 'purchase'
            );

            console.log(`📄 المورد ${supplier.name}: ${supplierInvoices.length} فاتورة عادية`);

            supplierInvoices.forEach(invoice => {
                const currency = invoice.currency || 'SYP';
                const amount = parseFloat(invoice.totalAmount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!supplier.balances[currency]) supplier.balances[currency] = 0;
                    supplier.balances[currency] += amount;
                    supplier.totalPurchases += amount;
                    supplier.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        supplier.currentBalance += amount;
                    }
                }
            });

            // حساب الفواتير الخاصة المؤكدة فقط
            const supplierCustomInvoices = (appData.customInvoices || []).filter(inv =>
                inv.supplierId === supplier.id &&
                inv.status === 'confirmed' &&
                inv.invoiceType === 'purchase'
            );

            console.log(`📋 المورد ${supplier.name}: ${supplierCustomInvoices.length} فاتورة خاصة`);

            supplierCustomInvoices.forEach(invoice => {
                const currency = invoice.currency || 'SYP';
                const amount = parseFloat(invoice.totalAmount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!supplier.balances[currency]) supplier.balances[currency] = 0;
                    supplier.balances[currency] += amount;
                    supplier.totalPurchases += amount;
                    supplier.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        supplier.currentBalance += amount;
                    }
                }
            });

            // حساب الدفعات (سندات الدفع) المؤكدة فقط
            const supplierPayments = (appData.payments || []).filter(payment =>
                payment.supplierId === supplier.id &&
                (payment.status === 'confirmed' || !payment.status) && // قبول السندات بدون حالة أيضاً
                payment.paymentType === 'payment'
            );

            console.log(`💰 المورد ${supplier.name}: ${supplierPayments.length} سند دفع`);

            supplierPayments.forEach(payment => {
                const currency = payment.currency || 'SYP';
                const amount = parseFloat(payment.amount) || 0;

                if (amount > 0) {
                    balances.currencies.add(currency);

                    if (!supplier.balances[currency]) supplier.balances[currency] = 0;
                    supplier.balances[currency] -= amount; // طرح المدفوعات من الرصيد
                    supplier.totalPayments += amount;
                    supplier.transactionCount++;

                    // تحديث الرصيد الحالي للعملة الأساسية
                    if (currency === (appData.settings.currency || 'SYP')) {
                        supplier.currentBalance -= amount;
                    }
                }
            });

            // إضافة الموردين للأرصدة (فقط الذين لديهم أرصدة غير صفرية)
            Object.keys(supplier.balances).forEach(currency => {
                const balance = supplier.balances[currency];
                if (Math.abs(balance) > 0.01) { // تجاهل الأرصدة الصغيرة جداً
                    if (!balances.suppliers[currency]) {
                        balances.suppliers[currency] = [];
                    }

                    balances.suppliers[currency].push({
                        id: supplier.id,
                        name: supplier.name,
                        balance: balance,
                        lastTransaction: supplier.lastTransactionDate,
                        transactionCount: supplier.transactionCount,
                        totalPurchases: supplier.totalPurchases,
                        totalPayments: supplier.totalPayments
                    });
                }
            });

            // تحديث تاريخ آخر معاملة
            if (supplier.transactionCount > 0) {
                supplier.lastTransactionDate = new Date().toISOString().split('T')[0];
            }
        });
    }

    // حساب الإجماليات لكل عملة مع التمييز بين الإدخالات والإخراجات
    Array.from(balances.currencies).forEach(currency => {
        const customerData = balances.customers[currency] || [];
        const supplierData = balances.suppliers[currency] || [];

        // حساب إدخالات وإخراجات العملاء
        let customerInflows = 0;  // الفواتير (مدين)
        let customerOutflows = 0; // المدفوعات (دائن)

        customerData.forEach(customer => {
            if (customer.balance > 0) {
                customerInflows += customer.balance;
            } else {
                customerOutflows += Math.abs(customer.balance);
            }
        });

        // حساب إدخالات وإخراجات الموردين
        let supplierInflows = 0;  // المدفوعات للموردين (مدين)
        let supplierOutflows = 0; // الفواتير من الموردين (دائن)

        supplierData.forEach(supplier => {
            if (supplier.balance > 0) {
                supplierOutflows += supplier.balance;
            } else {
                supplierInflows += Math.abs(supplier.balance);
            }
        });

        const customerTotal = customerInflows - customerOutflows;
        const supplierTotal = supplierOutflows - supplierInflows;

        balances.totals[currency] = {
            customers: customerTotal,
            suppliers: supplierTotal,
            customerInflows: customerInflows,
            customerOutflows: customerOutflows,
            supplierInflows: supplierInflows,
            supplierOutflows: supplierOutflows,
            net: customerTotal - supplierTotal // العملاء مدينون، الموردون دائنون
        };
    });

    console.log('✅ تم حساب الأرصدة بدقة:', balances);
    return balances;
}

/**
 * إعادة حساب رصيد العميل من جميع المعاملات
 */
function recalculateCustomerBalance(customerId) {
    const customer = appData.customers.find(c => c.id === customerId);
    if (!customer) return;

    console.log(`🔄 إعادة حساب رصيد العميل: ${customer.name}`);

    // إعادة تعيين الأرصدة
    customer.balances = {};
    customer.currentBalance = 0;
    customer.totalSales = 0;
    customer.totalPayments = 0;
    customer.transactionCount = 0;

    // حساب فواتير المبيعات
    const customerInvoices = (appData.invoices || []).filter(inv =>
        inv.customerId === customerId &&
        inv.status === 'confirmed' &&
        inv.invoiceType === 'sale'
    );

    customerInvoices.forEach(invoice => {
        const currency = invoice.currency || 'SYP';
        const amount = invoice.totalAmount || 0;

        if (!customer.balances[currency]) customer.balances[currency] = 0;
        customer.balances[currency] += amount;
        customer.totalSales += amount;
        customer.transactionCount++;

        // تحديث الرصيد الحالي للعملة الأساسية
        if (currency === (appData.settings.currency || 'SYP')) {
            customer.currentBalance += amount;
        }
    });

    // حساب سندات القبض
    const customerPayments = (appData.payments || []).filter(payment =>
        payment.customerId === customerId &&
        payment.status === 'confirmed' &&
        payment.paymentType === 'receipt'
    );

    customerPayments.forEach(payment => {
        const currency = payment.currency || 'SYP';
        const amount = payment.amount || 0;

        if (!customer.balances[currency]) customer.balances[currency] = 0;
        customer.balances[currency] -= amount;
        customer.totalPayments += amount;
        customer.transactionCount++;

        // تحديث الرصيد الحالي للعملة الأساسية
        if (currency === (appData.settings.currency || 'SYP')) {
            customer.currentBalance -= amount;
        }
    });

    console.log(`✅ تم إعادة حساب رصيد العميل ${customer.name}:`, {
        balances: customer.balances,
        currentBalance: customer.currentBalance,
        totalSales: customer.totalSales,
        totalPayments: customer.totalPayments,
        transactionCount: customer.transactionCount
    });
}

/**
 * إعادة حساب رصيد المورد من جميع المعاملات
 */
function recalculateSupplierBalance(supplierId) {
    const supplier = appData.suppliers.find(s => s.id === supplierId);
    if (!supplier) return;

    console.log(`🔄 إعادة حساب رصيد المورد: ${supplier.name}`);

    // إعادة تعيين الأرصدة
    supplier.balances = {};
    supplier.currentBalance = 0;
    supplier.totalPurchases = 0;
    supplier.totalPayments = 0;
    supplier.transactionCount = 0;

    // حساب فواتير المشتريات
    const supplierInvoices = (appData.invoices || []).filter(inv =>
        inv.supplierId === supplierId &&
        inv.status === 'confirmed' &&
        inv.invoiceType === 'purchase'
    );

    supplierInvoices.forEach(invoice => {
        const currency = invoice.currency || 'SYP';
        const amount = invoice.totalAmount || 0;

        if (!supplier.balances[currency]) supplier.balances[currency] = 0;
        supplier.balances[currency] += amount;
        supplier.totalPurchases += amount;
        supplier.transactionCount++;

        // تحديث الرصيد الحالي للعملة الأساسية
        if (currency === (appData.settings.currency || 'SYP')) {
            supplier.currentBalance += amount;
        }
    });

    // حساب سندات الدفع
    const supplierPayments = (appData.payments || []).filter(payment =>
        payment.supplierId === supplierId &&
        payment.status === 'confirmed' &&
        payment.paymentType === 'payment'
    );

    supplierPayments.forEach(payment => {
        const currency = payment.currency || 'SYP';
        const amount = payment.amount || 0;

        if (!supplier.balances[currency]) supplier.balances[currency] = 0;
        supplier.balances[currency] -= amount;
        supplier.totalPayments += amount;
        supplier.transactionCount++;

        // تحديث الرصيد الحالي للعملة الأساسية
        if (currency === (appData.settings.currency || 'SYP')) {
            supplier.currentBalance -= amount;
        }
    });

    console.log(`✅ تم إعادة حساب رصيد المورد ${supplier.name}:`, {
        balances: supplier.balances,
        currentBalance: supplier.currentBalance,
        totalPurchases: supplier.totalPurchases,
        totalPayments: supplier.totalPayments,
        transactionCount: supplier.transactionCount
    });
}

/**
 * إعادة حساب جميع الأرصدة
 */
function recalculateAllBalances() {
    console.log('🔄 إعادة حساب جميع الأرصدة...');

    // إعادة حساب أرصدة العملاء
    if (appData.customers) {
        appData.customers.forEach(customer => {
            recalculateCustomerBalance(customer.id);
        });
    }

    // إعادة حساب أرصدة الموردين
    if (appData.suppliers) {
        appData.suppliers.forEach(supplier => {
            recalculateSupplierBalance(supplier.id);
        });
    }

    // حفظ البيانات
    saveData();

    console.log('✅ تم إعادة حساب جميع الأرصدة بنجاح');
}

/**
 * تحديث الأرصدة عند إنشاء فاتورة
 */
function updateBalancesForInvoice(invoice) {
    console.log(`💰 تحديث الأرصدة للفاتورة: ${invoice.invoiceNumber}`);

    const currency = invoice.currency || 'SYP';
    const amount = invoice.totalAmount || 0;

    if (invoice.invoiceType === 'sale' && invoice.customerId) {
        // فاتورة مبيعات - زيادة رصيد العميل (مدين)
        const customer = appData.customers.find(c => c.id === invoice.customerId);
        if (customer) {
            if (!customer.balances) customer.balances = {};
            customer.balances[currency] = (customer.balances[currency] || 0) + amount;

            // تحديث الرصيد الحالي للعملة الأساسية
            if (currency === (appData.settings.currency || 'SYP')) {
                customer.currentBalance = (customer.currentBalance || 0) + amount;
            }

            customer.totalSales = (customer.totalSales || 0) + amount;
            customer.transactionCount = (customer.transactionCount || 0) + 1;
            customer.lastTransactionDate = invoice.invoiceDate;

            console.log(`✅ تم تحديث رصيد العميل ${customer.name}: +${amount} ${currency}`);
        }
    } else if (invoice.invoiceType === 'purchase' && invoice.supplierId) {
        // فاتورة مشتريات - زيادة رصيد المورد (دائن)
        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
        if (supplier) {
            if (!supplier.balances) supplier.balances = {};
            supplier.balances[currency] = (supplier.balances[currency] || 0) + amount;

            // تحديث الرصيد الحالي للعملة الأساسية
            if (currency === (appData.settings.currency || 'SYP')) {
                supplier.currentBalance = (supplier.currentBalance || 0) + amount;
            }

            supplier.totalPurchases = (supplier.totalPurchases || 0) + amount;
            supplier.transactionCount = (supplier.transactionCount || 0) + 1;
            supplier.lastTransactionDate = invoice.invoiceDate;

            console.log(`✅ تم تحديث رصيد المورد ${supplier.name}: +${amount} ${currency}`);
        }
    }
}
function filterReceipts() { alert('وظيفة تصفية سندات القبض قيد التطوير'); }
function clearReceiptFilters() { alert('وظيفة مسح فلاتر سندات القبض قيد التطوير'); }
function filterPayments() { alert('وظيفة تصفية سندات الدفع قيد التطوير'); }
function clearPaymentFilters() { alert('وظيفة مسح فلاتر سندات الدفع قيد التطوير'); }
function filterJournalEntries() { alert('وظيفة تصفية دفتر اليومية قيد التطوير'); }
function clearJournalFilters() {
    clearJournalFilter();
}

/**
 * تحديث جدول الأرصدة الإجمالية - منع التكرار وحساب دقيق
 */
function updateCurrencyBalancesTable() {
    console.log('📊 بدء تحديث جدول الأرصدة...');

    // التحقق من وجود عملية حساب جارية لمنع التكرار
    if (window.isCalculatingBalances) {
        console.log('⚠️ عملية حساب الأرصدة جارية بالفعل - تم تجاهل الطلب');
        return Promise.resolve();
    }

    // تعيين علامة الحساب الجاري
    window.isCalculatingBalances = true;

    // إظهار مؤشر التحميل
    const tableBody = document.getElementById('currencyBalancesTable');
    if (tableBody) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="8" class="text-center py-4">
                    <div class="spinner-border text-primary me-2" role="status">
                        <span class="visually-hidden">جاري التحميل...</span>
                    </div>
                    <strong>جاري حساب الأرصدة بدقة...</strong>
                </td>
            </tr>
        `;
    }

    try {
        console.log('🔄 بدء حساب الأرصدة الدقيقة...');

        // حساب الأرصدة مرة واحدة فقط مع التحقق من سلامة البيانات
        const balanceData = calculateAccurateBalances();

        if (!balanceData || typeof balanceData !== 'object') {
            throw new Error('فشل في حساب الأرصدة - بيانات غير صحيحة');
        }

        console.log(`💰 تم حساب أرصدة ${balanceData.currencies.size} عملة بنجاح`);

        // تحديث الملخص
        updateCurrencyBalancesSummary(balanceData);

        // تحديث الجدول
        const tableBody = document.getElementById('currencyBalancesTable');
        if (!tableBody) {
            console.warn('⚠️ لم يتم العثور على جدول الأرصدة');
            return;
        }

        if (balanceData.currencies.size === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center text-muted py-4">
                        <i class="fas fa-coins fa-3x mb-3"></i>
                        <h5>لا توجد عملات مدخلة</h5>
                        <p>ابدأ بإضافة فواتير أو سندات لرؤية الأرصدة</p>
                    </td>
                </tr>
            `;
            return;
        }

        const currencySymbols = {
            'SYP': 'ل.س',
            'USD': '$',
            'EUR': '€',
            'TRY': '₺',
            'SAR': 'ر.س',
            'AED': 'د.إ'
        };

        const currencyNames = {
            'SYP': 'الليرة السورية',
            'USD': 'الدولار الأمريكي',
            'EUR': 'اليورو',
            'TRY': 'الليرة التركية',
            'SAR': 'الريال السعودي',
            'AED': 'الدرهم الإماراتي'
        };

        let tableHTML = '';

        Array.from(balanceData.currencies).forEach(currency => {
            const totals = balanceData.totals[currency];
            const symbol = currencySymbols[currency] || currency;
            const name = currencyNames[currency] || currency;

            // حساب أرصدة الصندوق والبنك (يمكن تطويرها لاحقاً)
            const cashBalance = 0; // يمكن حسابها من سندات القبض والدفع النقدية
            const bankBalance = 0; // يمكن حسابها من سندات القبض والدفع البنكية

            const netBalance = totals.net;
            const balanceClass = netBalance > 0 ? 'text-success' : netBalance < 0 ? 'text-danger' : 'text-muted';
            const statusClass = netBalance > 0 ? 'bg-success' : netBalance < 0 ? 'bg-danger' : 'bg-secondary';
            const statusText = netBalance > 0 ? 'موجب' : netBalance < 0 ? 'سالب' : 'متوازن';

            tableHTML += `
                <tr>
                    <td>
                        <strong>${name}</strong>
                        <br><small class="text-muted">${currency}</small>
                    </td>
                    <td class="text-center">
                        <span class="badge bg-primary">${symbol}</span>
                    </td>
                    <td class="text-end">
                        <div class="text-success">
                            <i class="fas fa-arrow-up me-1"></i>
                            ${formatCurrency(totals.customerInflows)} ${symbol}
                        </div>
                        <small class="text-muted">فواتير</small>
                    </td>
                    <td class="text-end">
                        <div class="text-danger">
                            <i class="fas fa-arrow-down me-1"></i>
                            ${formatCurrency(totals.customerOutflows)} ${symbol}
                        </div>
                        <small class="text-muted">مدفوعات</small>
                    </td>
                    <td class="text-end">
                        <div class="text-danger">
                            <i class="fas fa-arrow-up me-1"></i>
                            ${formatCurrency(totals.supplierInflows)} ${symbol}
                        </div>
                        <small class="text-muted">مدفوعات</small>
                    </td>
                    <td class="text-end">
                        <div class="text-success">
                            <i class="fas fa-arrow-down me-1"></i>
                            ${formatCurrency(totals.supplierOutflows)} ${symbol}
                        </div>
                        <small class="text-muted">فواتير</small>
                    </td>
                    <td class="text-end">
                        <strong class="${balanceClass}">
                            ${formatCurrency(netBalance)} ${symbol}
                        </strong>
                    </td>
                    <td class="text-center">
                        <span class="badge ${statusClass}">${statusText}</span>
                    </td>
                </tr>
            `;
        });

        tableBody.innerHTML = tableHTML;

        // تحديث وقت آخر تحديث
        const lastUpdateElement = document.getElementById('lastUpdateTime');
        if (lastUpdateElement) {
            lastUpdateElement.textContent = formatDateTime(new Date());
        }

        console.log('✅ تم تحديث جدول الأرصدة بنجاح');

    } catch (error) {
        console.error('❌ خطأ في تحديث جدول الأرصدة:', error);
        alert('حدث خطأ أثناء تحديث الأرصدة: ' + error.message);
    } finally {
        // إنهاء عملية الحساب
        window.isCalculatingBalances = false;
    }
}

/**
 * تحديث ملخص الأرصدة
 */
function updateCurrencyBalancesSummary(balanceData) {
    const summaryContainer = document.getElementById('currencyBalancesSummary');
    if (!summaryContainer) return;

    const totalCurrencies = balanceData.currencies.size;
    let positiveCurrencies = 0;
    let negativeCurrencies = 0;

    Array.from(balanceData.currencies).forEach(currency => {
        const netBalance = balanceData.totals[currency].net;
        if (netBalance > 0) positiveCurrencies++;
        else if (netBalance < 0) negativeCurrencies++;
    });

    summaryContainer.innerHTML = `
        <div class="col-md-3">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">إجمالي العملات</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${totalCurrencies}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-coins fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">أرصدة موجبة</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${positiveCurrencies}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-arrow-up fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">أرصدة سالبة</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${negativeCurrencies}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-arrow-down fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">عملات متوازنة</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">${totalCurrencies - positiveCurrencies - negativeCurrencies}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-balance-scale fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // تحديث الإحصائيات السريعة
    const totalCurrenciesElement = document.getElementById('totalCurrencies');
    const positiveCurrenciesElement = document.getElementById('positiveCurrencies');
    const negativeCurrenciesElement = document.getElementById('negativeCurrencies');

    if (totalCurrenciesElement) totalCurrenciesElement.textContent = totalCurrencies;
    if (positiveCurrenciesElement) positiveCurrenciesElement.textContent = positiveCurrencies;
    if (negativeCurrenciesElement) negativeCurrenciesElement.textContent = negativeCurrencies;
}

/**
 * تحديث الأرصدة الإجمالية
 */
function refreshCurrencyBalances() {
    console.log('🔄 تحديث الأرصدة الإجمالية...');

    try {
        // إعادة حساب وتحديث الأرصدة
        updateCurrencyBalancesTable();

        console.log('✅ تم تحديث الأرصدة الإجمالية بنجاح');

        // إظهار رسالة نجاح
        showSuccessToast('تم تحديث الأرصدة الإجمالية بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تحديث الأرصدة:', error);
        alert('حدث خطأ أثناء تحديث الأرصدة. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * طباعة دفتر اليومية
 */
function printJournal() {
    printContent('journal', 'دفتر اليومية العامة');
}

/**
 * طباعة دفتر اليومية المفلتر
 */
function printFilteredJournal() {
    console.log('🖨️ طباعة دفتر اليومية المفلتر...');

    // الحصول على القيود المفلترة
    const filteredEntries = getFilteredJournalEntries();

    if (filteredEntries.length === 0) {
        alert('لا توجد قيود تطابق الفلاتر المحددة للطباعة');
        return;
    }

    // إنشاء محتوى الطباعة
    const printContent = generateJournalPrintContent(filteredEntries, 'دفتر اليومية المفلتر');

    // فتح نافذة طباعة
    const printWindow = window.open('', '_blank');
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();

    console.log(`✅ تم إعداد طباعة ${filteredEntries.length} قيد مفلتر`);
}

/**
 * تصدير دفتر اليومية المفلتر
 */
function exportFilteredJournal(format) {
    console.log(`📤 تصدير دفتر اليومية المفلتر بصيغة: ${format}`);

    // الحصول على القيود المفلترة
    const filteredEntries = getFilteredJournalEntries();

    if (filteredEntries.length === 0) {
        alert('لا توجد قيود تطابق الفلاتر المحددة للتصدير');
        return;
    }

    try {
        if (format === 'excel') {
            exportFilteredJournalToExcel(filteredEntries);
        } else {
            printFilteredJournal();
        }
    } catch (error) {
        console.error('❌ خطأ في تصدير دفتر اليومية المفلتر:', error);
        alert('حدث خطأ أثناء التصدير. يرجى المحاولة مرة أخرى.');
    }
}



/**
 * الحصول على القيود المفلترة
 */
function getFilteredJournalEntries() {
    const typeFilter = document.getElementById('journalTypeFilter')?.value || '';
    const fromDate = document.getElementById('journalFromDate')?.value || '';
    const toDate = document.getElementById('journalToDate')?.value || '';
    const searchText = document.getElementById('journalSearch')?.value.toLowerCase() || '';

    let filteredEntries = appData.journalEntries || [];

    // تطبيق فلتر نوع العملية
    if (typeFilter) {
        filteredEntries = filteredEntries.filter(entry => {
            if (typeFilter === 'invoice') {
                return entry.invoiceId;
            } else if (typeFilter === 'payment') {
                return entry.paymentId;
            } else if (typeFilter === 'adjustment') {
                return !entry.invoiceId && !entry.paymentId;
            }
            return true;
        });
    }

    // تطبيق فلتر التاريخ
    if (fromDate) {
        filteredEntries = filteredEntries.filter(entry => (entry.entryDate || entry.date) >= fromDate);
    }
    if (toDate) {
        filteredEntries = filteredEntries.filter(entry => (entry.entryDate || entry.date) <= toDate);
    }

    // تطبيق فلتر البحث النصي
    if (searchText) {
        filteredEntries = filteredEntries.filter(entry => {
            const description = (entry.description || '').toLowerCase();
            const debitAccount = (entry.debitAccount || '').toLowerCase();
            const creditAccount = (entry.creditAccount || '').toLowerCase();
            const reference = (entry.reference || '').toLowerCase();

            return description.includes(searchText) ||
                   debitAccount.includes(searchText) ||
                   creditAccount.includes(searchText) ||
                   reference.includes(searchText);
        });
    }

    return filteredEntries;
}

/**
 * إنشاء محتوى طباعة دفتر اليومية
 */
function generateJournalPrintContent(entries, title) {
    const currentDate = formatDateTime(new Date());
    let totalDebit = 0;
    let totalCredit = 0;

    const entriesHtml = entries.map(entry => {
        totalDebit += entry.debitAmount || 0;
        totalCredit += entry.creditAmount || 0;

        const entryTypeInfo = getEntryTypeInfo(entry);

        return `
            <tr>
                <td>${formatDate(entry.entryDate || entry.date)}</td>
                <td>${entryTypeInfo.text}</td>
                <td>${entry.description || ''}</td>
                <td>${entry.debitAccount || ''}</td>
                <td>${entry.creditAccount || ''}</td>
                <td class="text-end">${formatCurrency(entry.debitAmount || 0)}</td>
                <td class="text-end">${formatCurrency(entry.creditAmount || 0)}</td>
                <td>${entry.reference || ''}</td>
            </tr>
        `;
    }).join('');

    return `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>${title}</title>
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .company-name { font-size: 24px; font-weight: bold; color: #2c3e50; }
                .report-title { font-size: 20px; margin: 10px 0; color: #34495e; }
                .report-date { font-size: 14px; color: #7f8c8d; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f8f9fa; font-weight: bold; }
                .text-end { text-align: left; }
                .totals { background-color: #e9ecef; font-weight: bold; }
                .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #6c757d; }
                @media print {
                    body { margin: 0; }
                    .no-print { display: none; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="company-name">${appData.settings?.companyName || 'SAM PRO'}</div>
                <div class="report-title">${title}</div>
                <div class="report-date">تاريخ الطباعة: ${currentDate}</div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>التاريخ</th>
                        <th>نوع العملية</th>
                        <th>الوصف</th>
                        <th>الحساب المدين</th>
                        <th>الحساب الدائن</th>
                        <th>المبلغ المدين</th>
                        <th>المبلغ الدائن</th>
                        <th>المرجع</th>
                    </tr>
                </thead>
                <tbody>
                    ${entriesHtml}
                </tbody>
                <tfoot>
                    <tr class="totals">
                        <td colspan="5">الإجمالي</td>
                        <td class="text-end">${formatCurrency(totalDebit)}</td>
                        <td class="text-end">${formatCurrency(totalCredit)}</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>

            <div class="footer">
                <p>عدد القيود: ${entries.length} | الفرق: ${formatCurrency(Math.abs(totalDebit - totalCredit))}</p>
                <p>تم إنشاؤه بواسطة SAM PRO - برنامج المحاسب الذكي</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * تصدير دفتر اليومية المفلتر إلى Excel
 */
function exportFilteredJournalToExcel(entries) {
    console.log('📊 تصدير دفتر اليومية المفلتر إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const headers = ['التاريخ', 'نوع العملية', 'الوصف', 'الحساب المدين', 'الحساب الدائن', 'المبلغ المدين', 'المبلغ الدائن', 'المرجع'];

        const data = entries.map(entry => [
            formatDate(entry.entryDate || entry.date),
            getEntryTypeInfo(entry).text,
            entry.description || '',
            entry.debitAccount || '',
            entry.creditAccount || '',
            entry.debitAmount || 0,
            entry.creditAmount || 0,
            entry.reference || ''
        ]);

        // إضافة صف الإجماليات
        const totalDebit = entries.reduce((sum, entry) => sum + (entry.debitAmount || 0), 0);
        const totalCredit = entries.reduce((sum, entry) => sum + (entry.creditAmount || 0), 0);
        data.push(['', '', '', '', 'الإجمالي', totalDebit, totalCredit, '']);

        const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);

        // تحسين عرض الأعمدة
        const colWidths = [
            { wch: 12 }, // التاريخ
            { wch: 15 }, // نوع العملية
            { wch: 30 }, // الوصف
            { wch: 20 }, // الحساب المدين
            { wch: 20 }, // الحساب الدائن
            { wch: 15 }, // المبلغ المدين
            { wch: 15 }, // المبلغ الدائن
            { wch: 15 }  // المرجع
        ];
        worksheet['!cols'] = colWidths;

        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'دفتر اليومية المفلتر');

        // إضافة معلومات إضافية
        const infoSheet = XLSX.utils.aoa_to_sheet([
            ['معلومات التقرير'],
            ['العنوان', 'دفتر اليومية المفلتر'],
            ['تاريخ التصدير', formatDateTime(new Date().toISOString())],
            ['عدد القيود', entries.length],
            ['إجمالي المدين', totalDebit],
            ['إجمالي الدائن', totalCredit],
            ['الفرق', Math.abs(totalDebit - totalCredit)],
            [''],
            ['معلومات المطور'],
            ['الاسم', 'MOHANNAD AHMAD'],
            ['الهاتف', '+963-998-171-954'],
            ['البرنامج', 'SAM PRO - برنامج المحاسب الذكي'],
            ['السنة', '© 2025']
        ]);
        XLSX.utils.book_append_sheet(workbook, infoSheet, 'معلومات');

        const fileName = `دفتر_اليومية_المفلتر_${new Date().getTime()}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير Excel بنجاح:', fileName);
        showSuccessToast('تم تصدير دفتر اليومية المفلتر إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}



/**
 * تصدير دفتر اليومية المفلتر إلى Excel
 */
function exportFilteredJournalToExcel(entries) {
    console.log('📊 تصدير دفتر اليومية المفلتر إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const headers = ['التاريخ', 'نوع العملية', 'الوصف', 'الحساب المدين', 'الحساب الدائن', 'المبلغ المدين', 'المبلغ الدائن', 'المرجع'];

        const data = entries.map(entry => [
            formatDate(entry.entryDate || entry.date),
            getEntryTypeInfo(entry).text,
            entry.description || '',
            entry.debitAccount || '',
            entry.creditAccount || '',
            entry.debitAmount || 0,
            entry.creditAmount || 0,
            entry.reference || ''
        ]);

        // إضافة صف الإجماليات
        const totalDebit = entries.reduce((sum, entry) => sum + (entry.debitAmount || 0), 0);
        const totalCredit = entries.reduce((sum, entry) => sum + (entry.creditAmount || 0), 0);
        data.push(['', '', '', '', 'الإجمالي', totalDebit, totalCredit, '']);

        const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'دفتر اليومية المفلتر');

        const fileName = `دفتر_اليومية_المفلتر_${new Date().getTime()}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير Excel بنجاح:', fileName);
        showSuccessToast('تم تصدير دفتر اليومية المفلتر إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير دفتر اليومية المفلتر إلى PDF
 */
function exportFilteredJournalToPDF(entries) {
    console.log('📄 تصدير دفتر اليومية المفلتر إلى PDF...');

    try {
        const printContent = generateJournalPrintContent(entries, 'دفتر اليومية المفلتر');

        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();

        setTimeout(() => {
            alert('سيتم فتح نافذة الطباعة. اختر "حفظ كـ PDF" من خيارات الطابعة لحفظ الملف.');
            printWindow.print();
        }, 500);

        console.log('✅ تم إعداد تصدير PDF');

    } catch (error) {
        console.error('❌ خطأ في تصدير PDF:', error);
        alert('حدث خطأ أثناء تصدير PDF: ' + error.message);
    }
}

/**
 * تصدير دفتر اليومية المفلتر إلى Excel
 */
function exportFilteredJournalToExcel(entries) {
    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const headers = ['التاريخ', 'نوع العملية', 'الوصف', 'الحساب المدين', 'الحساب الدائن', 'المبلغ المدين', 'المبلغ الدائن', 'المرجع'];

        const data = entries.map(entry => [
            formatDate(entry.entryDate || entry.date),
            getEntryTypeInfo(entry).text,
            entry.description || '',
            entry.debitAccount || '',
            entry.creditAccount || '',
            entry.debitAmount || 0,
            entry.creditAmount || 0,
            entry.reference || ''
        ]);

        const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'دفتر اليومية المفلتر');

        const fileName = `دفتر_اليومية_المفلتر_${new Date().getTime()}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        showSuccessToast('تم تصدير دفتر اليومية المفلتر إلى Excel بنجاح!');
    } catch (error) {
        console.error('❌ خطأ في تصدير Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير دفتر اليومية المفلتر إلى PDF
 */
function exportFilteredJournalToPDF(entries) {
    try {
        const printContent = generateJournalPrintContent(entries, 'دفتر اليومية المفلتر');

        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();

        setTimeout(() => {
            alert('سيتم فتح نافذة الطباعة. اختر "حفظ كـ PDF" من خيارات الطابعة.');
            printWindow.print();
        }, 500);
    } catch (error) {
        console.error('❌ خطأ في تصدير PDF:', error);
        alert('حدث خطأ أثناء تصدير PDF: ' + error.message);
    }
}

/**
 * إضافة قيد يدوي
 */
function addManualJournalEntry() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addManualEntryModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">إضافة قيد يدوي</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="manualEntryForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">تاريخ القيد <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="entryDate" value="${getCurrentDateForInput()}" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">المرجع</label>
                                <input type="text" class="form-control" id="entryReference" placeholder="رقم المرجع أو الوثيقة">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">وصف القيد <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="entryDescription" rows="2" placeholder="وصف مفصل للقيد المحاسبي" required></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">الحساب المدين <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="debitAccount" placeholder="اسم الحساب المدين" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">الحساب الدائن <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="creditAccount" placeholder="اسم الحساب الدائن" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">المبلغ المدين <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="debitAmount" step="0.01" min="0" placeholder="0.00" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">المبلغ الدائن <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="creditAmount" step="0.01" min="0" placeholder="0.00" required>
                            </div>
                        </div>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            يجب أن يكون المبلغ المدين مساوياً للمبلغ الدائن لضمان توازن القيد
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveManualJournalEntry()">
                        <i class="fas fa-save me-2"></i>حفظ القيد
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ القيد اليدوي
 */
function saveManualJournalEntry() {
    const entryDate = document.getElementById('entryDate').value;
    const entryReference = document.getElementById('entryReference').value;
    const entryDescription = document.getElementById('entryDescription').value;
    const debitAccount = document.getElementById('debitAccount').value;
    const creditAccount = document.getElementById('creditAccount').value;
    const debitAmount = parseFloat(document.getElementById('debitAmount').value) || 0;
    const creditAmount = parseFloat(document.getElementById('creditAmount').value) || 0;

    // التحقق من صحة البيانات
    if (!entryDate || !entryDescription || !debitAccount || !creditAccount) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    if (debitAmount <= 0 || creditAmount <= 0) {
        alert('يجب أن تكون المبالغ أكبر من الصفر');
        return;
    }

    if (Math.abs(debitAmount - creditAmount) > 0.01) {
        alert('يجب أن يكون المبلغ المدين مساوياً للمبلغ الدائن');
        return;
    }

    try {
        // إنشاء القيد الجديد
        const newEntry = {
            id: Date.now(),
            entryDate: entryDate,
            date: entryDate, // للتوافق مع الإصدارات القديمة
            description: entryDescription,
            debitAccount: debitAccount,
            creditAccount: creditAccount,
            debitAmount: debitAmount,
            creditAmount: creditAmount,
            reference: entryReference || `قيد يدوي ${Date.now()}`,
            entryType: 'manual',
            currency: appData.settings?.currency || 'SYP',
            createdAt: new Date().toISOString(),
            createdBy: 'manual'
        };

        // إضافة القيد إلى البيانات
        if (!appData.journalEntries) {
            appData.journalEntries = [];
        }
        appData.journalEntries.push(newEntry);

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addManualEntryModal'));
        modal.hide();

        // تحديث دفتر اليومية
        updateJournalTable(appData.journalEntries || []);

        // رسالة نجاح
        showSuccessToast('تم إضافة القيد اليدوي بنجاح!');

        console.log('✅ تم إضافة قيد يدوي جديد:', newEntry);

    } catch (error) {
        console.error('❌ خطأ في حفظ القيد اليدوي:', error);
        alert('حدث خطأ أثناء حفظ القيد. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * حفظ القيد اليدوي
 */
function saveManualJournalEntry() {
    const entryDate = document.getElementById('entryDate').value;
    const entryDescription = document.getElementById('entryDescription').value;
    const debitAccount = document.getElementById('debitAccount').value;
    const creditAccount = document.getElementById('creditAccount').value;
    const debitAmount = parseFloat(document.getElementById('debitAmount').value) || 0;
    const creditAmount = parseFloat(document.getElementById('creditAmount').value) || 0;

    // التحقق من صحة البيانات
    if (!entryDate || !entryDescription || !debitAccount || !creditAccount) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    if (debitAmount <= 0 || creditAmount <= 0) {
        alert('يجب أن تكون المبالغ أكبر من الصفر');
        return;
    }

    if (Math.abs(debitAmount - creditAmount) > 0.01) {
        alert('يجب أن يكون المبلغ المدين مساوياً للمبلغ الدائن');
        return;
    }

    try {
        // إنشاء القيد الجديد
        const newEntry = {
            id: Date.now(),
            entryDate: entryDate,
            description: entryDescription,
            debitAccount: debitAccount,
            creditAccount: creditAccount,
            debitAmount: debitAmount,
            creditAmount: creditAmount,
            reference: document.getElementById('entryReference').value || `قيد يدوي ${Date.now()}`,
            entryType: 'manual',
            currency: appData.settings?.currency || 'SYP',
            createdAt: new Date().toISOString()
        };

        // إضافة القيد إلى البيانات
        if (!appData.journalEntries) {
            appData.journalEntries = [];
        }
        appData.journalEntries.push(newEntry);

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addManualEntryModal'));
        modal.hide();

        // تحديث دفتر اليومية
        updateJournalTable(appData.journalEntries || []);

        // رسالة نجاح
        showSuccessToast('تم إضافة القيد اليدوي بنجاح!');

        console.log('✅ تم إضافة قيد يدوي جديد:', newEntry);

    } catch (error) {
        console.error('❌ خطأ في حفظ القيد اليدوي:', error);
        alert('حدث خطأ أثناء حفظ القيد. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * تحديث دفتر اليومية - محسن لإعادة حساب جميع القيود
 */
function refreshJournal() {
    console.log('🔄 تحديث دفتر اليومية وإعادة حساب جميع القيود...');

    try {
        // إظهار مؤشر التحميل
        showLoadingIndicator('جاري تحديث دفتر اليومية وإعادة حساب القيود...');

        // إعادة تعيين دفتر اليومية
        appData.journalEntries = [];

        // إعادة إنشاء القيود من جميع المصادر
        regenerateAllJournalEntries();

        // تحديث الجدول مع القيود الجديدة
        updateJournalTable(appData.journalEntries || []);

        // مسح الفلاتر
        clearJournalFilter();

        // إخفاء مؤشر التحميل
        hideLoadingIndicator();

        console.log('✅ تم تحديث دفتر اليومية بنجاح - إجمالي القيود:', appData.journalEntries.length);

        // إظهار رسالة نجاح مفصلة
        const totalEntries = appData.journalEntries.length;
        const totalDebit = appData.journalEntries.reduce((sum, entry) => sum + (entry.debitAmount || 0), 0);
        const totalCredit = appData.journalEntries.reduce((sum, entry) => sum + (entry.creditAmount || 0), 0);

        showSuccessToast(`تم تحديث دفتر اليومية بنجاح!
        عدد القيود: ${totalEntries}
        إجمالي المدين: ${formatCurrency(totalDebit)}
        إجمالي الدائن: ${formatCurrency(totalCredit)}`);

    } catch (error) {
        console.error('❌ خطأ في تحديث دفتر اليومية:', error);
        hideLoadingIndicator();
        alert('حدث خطأ أثناء تحديث دفتر اليومية: ' + error.message);
    }
}

/**
 * إعادة إنشاء جميع القيود المحاسبية من المصادر المختلفة
 */
function regenerateAllJournalEntries() {
    console.log('🔄 إعادة إنشاء جميع القيود المحاسبية...');

    let entriesCount = 0;

    // 1. إنشاء قيود من الفواتير المؤكدة
    if (appData.invoices && appData.invoices.length > 0) {
        appData.invoices.forEach(invoice => {
            if (invoice.status === 'confirmed') {
                try {
                    if (invoice.invoiceType === 'sale') {
                        // قيد فاتورة مبيعات
                        const customer = appData.customers.find(c => c.id === invoice.customerId);
                        addJournalEntry({
                            entryDate: invoice.invoiceDate,
                            entryType: 'invoice',
                            description: `فاتورة مبيعات رقم ${invoice.invoiceNumber} - ${customer ? customer.name : 'عميل غير محدد'}`,
                            debitAccount: customer ? customer.name : 'عميل غير محدد',
                            creditAccount: 'المبيعات',
                            debitAmount: invoice.totalAmount || 0,
                            creditAmount: invoice.totalAmount || 0,
                            reference: invoice.invoiceNumber,
                            currency: invoice.currency || 'SYP'
                        });
                        entriesCount++;
                    } else if (invoice.invoiceType === 'purchase') {
                        // قيد فاتورة مشتريات
                        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
                        addJournalEntry({
                            entryDate: invoice.invoiceDate,
                            entryType: 'invoice',
                            description: `فاتورة مشتريات رقم ${invoice.invoiceNumber} - ${supplier ? supplier.name : 'مورد غير محدد'}`,
                            debitAccount: 'المشتريات',
                            creditAccount: supplier ? supplier.name : 'مورد غير محدد',
                            debitAmount: invoice.totalAmount || 0,
                            creditAmount: invoice.totalAmount || 0,
                            reference: invoice.invoiceNumber,
                            currency: invoice.currency || 'SYP'
                        });
                        entriesCount++;
                    }
                } catch (error) {
                    console.error('خطأ في إنشاء قيد للفاتورة:', invoice.invoiceNumber, error);
                }
            }
        });
    }

    // 2. إنشاء قيود من سندات القبض والدفع المؤكدة
    if (appData.payments && appData.payments.length > 0) {
        appData.payments.forEach(payment => {
            if (payment.status === 'confirmed') {
                try {
                    if (payment.paymentType === 'receipt') {
                        // قيد سند قبض
                        const customer = appData.customers.find(c => c.id === payment.customerId);
                        const paymentMethodAccount = getPaymentMethodAccount(payment.paymentMethod);

                        addJournalEntry({
                            entryDate: payment.paymentDate,
                            entryType: 'payment',
                            description: `سند قبض رقم ${payment.paymentNumber} - ${customer ? customer.name : 'عميل غير محدد'}`,
                            debitAccount: paymentMethodAccount,
                            creditAccount: customer ? customer.name : 'عميل غير محدد',
                            debitAmount: payment.amount || 0,
                            creditAmount: payment.amount || 0,
                            reference: payment.paymentNumber,
                            currency: payment.currency || 'SYP'
                        });
                        entriesCount++;
                    } else if (payment.paymentType === 'payment') {
                        // قيد سند دفع
                        const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
                        const paymentMethodAccount = getPaymentMethodAccount(payment.paymentMethod);

                        addJournalEntry({
                            entryDate: payment.paymentDate,
                            entryType: 'payment',
                            description: `سند دفع رقم ${payment.paymentNumber} - ${supplier ? supplier.name : 'مورد غير محدد'}`,
                            debitAccount: supplier ? supplier.name : 'مورد غير محدد',
                            creditAccount: paymentMethodAccount,
                            debitAmount: payment.amount || 0,
                            creditAmount: payment.amount || 0,
                            reference: payment.paymentNumber,
                            currency: payment.currency || 'SYP'
                        });
                        entriesCount++;
                    }
                } catch (error) {
                    console.error('خطأ في إنشاء قيد للسند:', payment.paymentNumber, error);
                }
            }
        });
    }

    // 3. إضافة القيود اليدوية المحفوظة مسبقاً (إن وجدت)
    const manualEntries = JSON.parse(localStorage.getItem('manualJournalEntries') || '[]');
    manualEntries.forEach(entry => {
        try {
            addJournalEntry(entry);
            entriesCount++;
        } catch (error) {
            console.error('خطأ في إضافة قيد يدوي:', error);
        }
    });

    console.log(`✅ تم إنشاء ${entriesCount} قيد محاسبي من جميع المصادر`);
}

/**
 * الحصول على اسم حساب طريقة الدفع
 */
function getPaymentMethodAccount(paymentMethod) {
    const accounts = {
        'cash': 'الصندوق',
        'bank': 'البنك',
        'check': 'الشيكات',
        'card': 'البطاقات الائتمانية',
        'transfer': 'التحويلات البنكية'
    };
    return accounts[paymentMethod] || 'الصندوق';
}

/**
 * إظهار مؤشر التحميل
 */
function showLoadingIndicator(message = 'جاري التحميل...') {
    // إزالة أي مؤشر تحميل موجود
    hideLoadingIndicator();

    const loadingDiv = document.createElement('div');
    loadingDiv.id = 'loadingIndicator';
    loadingDiv.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
    loadingDiv.style.backgroundColor = 'rgba(0,0,0,0.5)';
    loadingDiv.style.zIndex = '9999';
    loadingDiv.innerHTML = `
        <div class="card shadow-lg">
            <div class="card-body text-center p-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h5 class="card-title">${message}</h5>
                <p class="card-text text-muted">يرجى الانتظار...</p>
            </div>
        </div>
    `;

    document.body.appendChild(loadingDiv);
}

/**
 * إخفاء مؤشر التحميل
 */
function hideLoadingIndicator() {
    const loadingDiv = document.getElementById('loadingIndicator');
    if (loadingDiv) {
        document.body.removeChild(loadingDiv);
    }
}

// وظائف التقارير
function generateSalesReport() {
    const fromDate = document.getElementById('salesReportFromDate')?.value;
    const toDate = document.getElementById('salesReportToDate')?.value;
    const customerId = document.getElementById('salesReportCustomer')?.value;
    const productId = document.getElementById('salesReportProduct')?.value;

    if (!fromDate || !toDate) {
        alert('يرجى تحديد الفترة الزمنية');
        return;
    }

    if (fromDate > toDate) {
        alert('تاريخ البداية يجب أن يكون قبل تاريخ النهاية');
        return;
    }

    // تصفية الفواتير
    let salesInvoices = appData.invoices.filter(inv =>
        inv.invoiceType === 'sale' &&
        inv.status === 'confirmed' &&
        inv.invoiceDate >= fromDate &&
        inv.invoiceDate <= toDate
    );

    // تصفية حسب العميل
    if (customerId) {
        salesInvoices = salesInvoices.filter(inv => inv.customerId == customerId);
    }

    // تصفية حسب المنتج
    if (productId) {
        salesInvoices = salesInvoices.filter(inv =>
            inv.items && inv.items.some(item => item.productId == productId)
        );
    }

    // حساب الإحصائيات
    const totalSales = salesInvoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
    const totalInvoices = salesInvoices.length;
    const averageInvoice = totalInvoices > 0 ? totalSales / totalInvoices : 0;
    const pendingAmount = salesInvoices.reduce((sum, inv) => sum + (inv.remainingAmount || inv.totalAmount || 0), 0);

    // تحديث الإحصائيات
    const totalSalesElement = document.getElementById('totalSalesAmount');
    const totalInvoicesElement = document.getElementById('totalSalesInvoicesCount');
    const averageElement = document.getElementById('averageInvoiceAmount');
    const pendingElement = document.getElementById('pendingSalesAmount');

    if (totalSalesElement) totalSalesElement.textContent = formatCurrency(totalSales);
    if (totalInvoicesElement) totalInvoicesElement.textContent = totalInvoices;
    if (averageElement) averageElement.textContent = formatCurrency(averageInvoice);
    if (pendingElement) pendingElement.textContent = formatCurrency(pendingAmount);

    // تحديث الجدول
    const tableBody = document.getElementById('salesReportTable');
    if (tableBody) {
        if (salesInvoices.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">لا توجد مبيعات في هذه الفترة</td></tr>';
        } else {
            tableBody.innerHTML = salesInvoices.map(invoice => {
                const customer = appData.customers.find(c => c.id === invoice.customerId);
                return `
                    <tr>
                        <td><strong>${invoice.invoiceNumber || 'غير محدد'}</strong></td>
                        <td>${invoice.invoiceDate || 'غير محدد'}</td>
                        <td>${customer ? customer.name : 'غير محدد'}</td>
                        <td>${formatCurrency(invoice.totalAmount || 0)}</td>
                        <td>${formatCurrency(invoice.paidAmount || 0)}</td>
                        <td>${formatCurrency(invoice.remainingAmount || invoice.totalAmount || 0)}</td>
                        <td><span class="badge bg-${getStatusColor(invoice.status)}">${getStatusText(invoice.status)}</span></td>
                    </tr>
                `;
            }).join('');
        }
    }

    // إظهار النتائج
    const summaryElement = document.getElementById('salesReportSummary');
    const noDataElement = document.getElementById('noSalesData');

    if (summaryElement) {
        summaryElement.style.display = 'block';
    }
    if (noDataElement) {
        noDataElement.style.display = 'none';
    }

    // إضافة رسالة نجاح
    console.log(`تم إنشاء تقرير المبيعات: ${totalInvoices} فاتورة، إجمالي ${formatCurrency(totalSales)}`);
}

function clearSalesReportFilters() {
    document.getElementById('salesReportFromDate').value = '';
    document.getElementById('salesReportToDate').value = '';
    document.getElementById('salesReportCustomer').value = '';
    document.getElementById('salesReportProduct').value = '';

    document.getElementById('salesReportSummary').style.display = 'none';
    document.getElementById('noSalesData').style.display = 'block';
}

function generatePurchaseReport() {
    const fromDate = document.getElementById('purchaseReportFromDate').value;
    const toDate = document.getElementById('purchaseReportToDate').value;
    const supplierId = document.getElementById('purchaseReportSupplier').value;
    const productId = document.getElementById('purchaseReportProduct').value;

    if (!fromDate || !toDate) {
        alert('يرجى تحديد الفترة الزمنية');
        return;
    }

    // تصفية الفواتير
    let purchaseInvoices = appData.invoices.filter(inv =>
        inv.invoiceType === 'purchase' &&
        inv.status === 'confirmed' &&
        inv.invoiceDate >= fromDate &&
        inv.invoiceDate <= toDate
    );

    // تصفية حسب المورد
    if (supplierId) {
        purchaseInvoices = purchaseInvoices.filter(inv => inv.supplierId == supplierId);
    }

    // تصفية حسب المنتج
    if (productId) {
        purchaseInvoices = purchaseInvoices.filter(inv =>
            inv.items.some(item => item.productId == productId)
        );
    }

    // حساب الإحصائيات
    const totalPurchases = purchaseInvoices.reduce((sum, inv) => sum + inv.totalAmount, 0);
    const totalInvoices = purchaseInvoices.length;
    const averageInvoice = totalInvoices > 0 ? totalPurchases / totalInvoices : 0;
    const pendingAmount = purchaseInvoices.reduce((sum, inv) => sum + inv.remainingAmount, 0);

    // تحديث الإحصائيات
    document.getElementById('totalPurchaseAmount').textContent = formatCurrency(totalPurchases);
    document.getElementById('totalPurchaseInvoicesCount').textContent = totalInvoices;
    document.getElementById('averagePurchaseAmount').textContent = formatCurrency(averageInvoice);
    document.getElementById('pendingPurchaseAmount').textContent = formatCurrency(pendingAmount);

    // تحديث الجدول
    const tableBody = document.getElementById('purchaseReportTable');
    if (tableBody) {
        if (purchaseInvoices.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">لا توجد مشتريات في هذه الفترة</td></tr>';
        } else {
            tableBody.innerHTML = purchaseInvoices.map(invoice => {
                const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
                return `
                    <tr>
                        <td><strong>${invoice.invoiceNumber}</strong></td>
                        <td>${invoice.invoiceDate}</td>
                        <td>${supplier ? supplier.name : 'غير محدد'}</td>
                        <td>${formatCurrency(invoice.totalAmount)}</td>
                        <td>${formatCurrency(invoice.paidAmount || 0)}</td>
                        <td>${formatCurrency(invoice.remainingAmount || invoice.totalAmount)}</td>
                        <td><span class="badge bg-${getStatusColor(invoice.status)}">${getStatusText(invoice.status)}</span></td>
                    </tr>
                `;
            }).join('');
        }
    }

    // إظهار النتائج
    const summaryElement = document.getElementById('purchaseReportSummary');
    const noDataElement = document.getElementById('noPurchaseData');

    if (summaryElement) {
        summaryElement.style.display = 'block';
    }
    if (noDataElement) {
        noDataElement.style.display = 'none';
    }
}

function clearPurchaseReportFilters() {
    document.getElementById('purchaseReportFromDate').value = '';
    document.getElementById('purchaseReportToDate').value = '';
    document.getElementById('purchaseReportSupplier').value = '';
    document.getElementById('purchaseReportProduct').value = '';

    document.getElementById('purchaseReportSummary').style.display = 'none';
    document.getElementById('noPurchaseData').style.display = 'block';
}

// وظائف التصدير والطباعة
function exportJournal(format) {
    console.log(`📤 تصدير دفتر اليومية بصيغة: ${format}`);

    if (format === 'excel') {
        exportToExcel('journal', 'دفتر اليومية العامة');
    } else {
        printContent('journal', 'دفتر اليومية العامة');
    }
}

/**
 * تصدير دفتر اليومية إلى PDF
 */
function exportJournalToPDF() {
    console.log('📄 تصدير دفتر اليومية إلى PDF...');

    try {
        // الحصول على الفلاتر المحددة
        const currency = document.getElementById('journalCurrencyFilter')?.value || 'all';
        const entryType = document.getElementById('journalTypeFilter')?.value || 'all';
        const dateFrom = document.getElementById('journalDateFrom')?.value || '';
        const dateTo = document.getElementById('journalDateTo')?.value || '';

        // إنشاء URL للتصدير مع المعاملات
        const params = new URLSearchParams({
            currency: currency,
            type: entryType,
            date_from: dateFrom,
            date_to: dateTo
        });

        const exportUrl = `/api/export/journal-pdf?${params.toString()}`;

        // فتح رابط التحميل
        window.open(exportUrl, '_blank');

        console.log('✅ تم بدء تصدير دفتر اليومية إلى PDF');

    } catch (error) {
        console.error('❌ خطأ في تصدير دفتر اليومية إلى PDF:', error);
        alert('حدث خطأ أثناء تصدير دفتر اليومية إلى PDF. يرجى المحاولة مرة أخرى.');
    }
}

function exportStatement(format) {
    if (format === 'excel') {
        exportCustomerStatementToExcel();
    } else {
        printContent('customer-statement', 'كشف حساب العميل');
    }
}

/**
 * تصدير كشف حساب العميل إلى Excel
 */
function exportCustomerStatementToExcel() {
    console.log('📊 تصدير كشف حساب العميل إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const customerId = document.getElementById('statementCustomer').value;
        const fromDate = document.getElementById('statementFromDate').value;
        const toDate = document.getElementById('statementToDate').value;

        if (!customerId) {
            alert('يرجى اختيار العميل أولاً');
            return;
        }

        const customer = appData.customers.find(c => c.id == customerId);
        if (!customer) {
            alert('العميل المحدد غير موجود');
            return;
        }

        // جمع الحركات المالية
        const transactions = [];

        // إضافة الفواتير
        const customerInvoices = appData.invoices.filter(inv =>
            inv.customerId == customerId &&
            inv.status === 'confirmed' &&
            (!fromDate || inv.invoiceDate >= fromDate) &&
            (!toDate || inv.invoiceDate <= toDate)
        );

        customerInvoices.forEach(invoice => {
            transactions.push({
                date: invoice.invoiceDate,
                description: `فاتورة مبيعات رقم ${invoice.invoiceNumber}`,
                reference: invoice.invoiceNumber,
                debit: invoice.totalAmount || 0,
                credit: 0,
                type: 'invoice'
            });
        });

        // إضافة سندات القبض
        const customerReceipts = appData.payments.filter(payment =>
            payment.customerId == customerId &&
            payment.paymentType === 'receipt' &&
            payment.status === 'confirmed' &&
            (!fromDate || payment.paymentDate >= fromDate) &&
            (!toDate || payment.paymentDate <= toDate)
        );

        customerReceipts.forEach(receipt => {
            transactions.push({
                date: receipt.paymentDate,
                description: `سند قبض رقم ${receipt.paymentNumber} - ${getPaymentMethodText(receipt.paymentMethod)}`,
                reference: receipt.paymentNumber,
                debit: 0,
                credit: receipt.amount || 0,
                type: 'receipt'
            });
        });

        // ترتيب الحركات حسب التاريخ
        transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

        // حساب الأرصدة المتراكمة
        let balance = 0;
        transactions.forEach(transaction => {
            balance += transaction.debit - transaction.credit;
            transaction.balance = balance;
        });

        // إعداد البيانات للتصدير
        const headers = [
            'التاريخ',
            'الوصف',
            'المرجع',
            'مدين',
            'دائن',
            'الرصيد'
        ];

        const data = transactions.map(transaction => [
            transaction.date,
            transaction.description,
            transaction.reference,
            transaction.debit > 0 ? transaction.debit : '',
            transaction.credit > 0 ? transaction.credit : '',
            transaction.balance
        ]);

        // إضافة صف الإجماليات
        const totalDebits = transactions.reduce((sum, t) => sum + t.debit, 0);
        const totalCredits = transactions.reduce((sum, t) => sum + t.credit, 0);
        const finalBalance = totalDebits - totalCredits;

        data.push([
            '',
            'الإجماليات',
            '',
            totalDebits,
            totalCredits,
            finalBalance
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, `كشف حساب ${customer.name}`);

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'كشف الحساب');

        // إضافة ورقة معلومات العميل
        const customerInfoSheet = createCustomerInfoSheet(customer, fromDate, toDate, totalDebits, totalCredits, finalBalance);
        XLSX.utils.book_append_sheet(workbook, customerInfoSheet, 'معلومات العميل');

        // حفظ الملف
        const fileName = `كشف_حساب_${customer.name}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير كشف حساب العميل إلى Excel بنجاح');
        showSuccessToast('تم تصدير كشف حساب العميل إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير كشف حساب العميل إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

function exportSalesReport(format) {
    console.log(`📤 تصدير تقرير المبيعات بصيغة: ${format}`);

    const summarySection = document.getElementById('salesReportSummary');
    if (!summarySection || summarySection.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    try {
        if (format === 'excel') {
            exportToExcel('sales-report', 'تقرير المبيعات');
        } else {
            printContent('sales-report', 'تقرير المبيعات');
        }
    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير المبيعات:', error);
        alert('حدث خطأ أثناء التصدير. يرجى المحاولة مرة أخرى.');
    }
}

function exportPurchaseReport(format) {
    console.log(`📤 تصدير تقرير المشتريات بصيغة: ${format}`);

    const summarySection = document.getElementById('purchaseReportSummary');
    if (!summarySection || summarySection.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    try {
        if (format === 'excel') {
            exportToExcel('purchase-report', 'تقرير المشتريات');
        } else {
            printContent('purchase-report', 'تقرير المشتريات');
        }
    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير المشتريات:', error);
        alert('حدث خطأ أثناء التصدير. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * طباعة تقرير المبيعات
 */
function printSalesReport() {
    const fromDate = document.getElementById('salesReportFromDate')?.value;
    const toDate = document.getElementById('salesReportToDate')?.value;
    const customerId = document.getElementById('salesReportCustomer')?.value;
    const productId = document.getElementById('salesReportProduct')?.value;

    if (!fromDate || !toDate) {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    // تصفية الفواتير
    let salesInvoices = appData.invoices.filter(inv =>
        inv.invoiceType === 'sale' &&
        inv.status === 'confirmed' &&
        inv.invoiceDate >= fromDate &&
        inv.invoiceDate <= toDate
    );

    // تطبيق الفلاتر
    if (customerId) {
        salesInvoices = salesInvoices.filter(inv => inv.customerId == customerId);
    }
    if (productId) {
        salesInvoices = salesInvoices.filter(inv =>
            inv.items.some(item => item.productId == productId)
        );
    }

    // حساب الإحصائيات
    const totalSales = salesInvoices.reduce((sum, inv) => sum + inv.totalAmount, 0);
    const totalInvoices = salesInvoices.length;
    const averageInvoice = totalInvoices > 0 ? totalSales / totalInvoices : 0;
    const pendingAmount = salesInvoices.reduce((sum, inv) => sum + inv.remainingAmount, 0);

    // إنشاء HTML للطباعة
    const printContent = generateSalesReportPrintHTML(salesInvoices, {
        fromDate,
        toDate,
        totalSales,
        totalInvoices,
        averageInvoice,
        pendingAmount,
        customerId,
        productId
    });

    printDocument(printContent, 'تقرير المبيعات');
}

/**
 * طباعة تقرير المشتريات
 */
function printPurchaseReport() {
    const fromDate = document.getElementById('purchaseReportFromDate')?.value;
    const toDate = document.getElementById('purchaseReportToDate')?.value;
    const supplierId = document.getElementById('purchaseReportSupplier')?.value;
    const productId = document.getElementById('purchaseReportProduct')?.value;

    if (!fromDate || !toDate) {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    // تصفية الفواتير
    let purchaseInvoices = appData.invoices.filter(inv =>
        inv.invoiceType === 'purchase' &&
        inv.status === 'confirmed' &&
        inv.invoiceDate >= fromDate &&
        inv.invoiceDate <= toDate
    );

    // تطبيق الفلاتر
    if (supplierId) {
        purchaseInvoices = purchaseInvoices.filter(inv => inv.supplierId == supplierId);
    }
    if (productId) {
        purchaseInvoices = purchaseInvoices.filter(inv =>
            inv.items.some(item => item.productId == productId)
        );
    }

    // حساب الإحصائيات
    const totalPurchases = purchaseInvoices.reduce((sum, inv) => sum + inv.totalAmount, 0);
    const totalInvoices = purchaseInvoices.length;
    const averageInvoice = totalInvoices > 0 ? totalPurchases / totalInvoices : 0;
    const pendingAmount = purchaseInvoices.reduce((sum, inv) => sum + inv.remainingAmount, 0);

    // إنشاء HTML للطباعة
    const printContent = generatePurchaseReportPrintHTML(purchaseInvoices, {
        fromDate,
        toDate,
        totalPurchases,
        totalInvoices,
        averageInvoice,
        pendingAmount,
        supplierId,
        productId
    });

    printDocument(printContent, 'تقرير المشتريات');
}

function printStatement() {
    printContent('customer-statement', 'كشف حساب العميل');
}

function printInvoice(id) {
    const invoice = appData.invoices.find(inv => inv.id === id);
    if (!invoice) {
        alert('لم يتم العثور على الفاتورة');
        return;
    }

    const customer = appData.customers.find(c => c.id === invoice.customerId);
    const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
    const client = customer || supplier;

    const printContent = generateInvoicePrintHTML(invoice, client);
    printDocument(printContent, `فاتورة رقم ${invoice.invoiceNumber}`);
}

function printReceipt(id) {
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('لم يتم العثور على سند القبض');
        return;
    }

    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const printContent = generateReceiptPrintHTML(receipt, customer);
    printDocument(printContent, `سند قبض رقم ${receipt.paymentNumber}`);
}







function printPayment(id) {
    const payment = appData.payments.find(p => p.id === id && p.paymentType === 'payment');
    if (!payment) {
        alert('لم يتم العثور على سند الدفع');
        return;
    }

    const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
    const printContent = generatePaymentPrintHTML(payment, supplier);
    printDocument(printContent, `سند دفع رقم ${payment.paymentNumber}`);
}







/**
 * تصدير قائمة سندات القبض إلى Excel
 */
function exportReceiptsToExcel() {
    console.log('📊 تصدير سندات القبض إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // جمع بيانات سندات القبض
        const receipts = (appData.payments || []).filter(p => p.paymentType === 'receipt');

        if (receipts.length === 0) {
            alert('لا توجد سندات قبض للتصدير');
            return;
        }

        // إعداد العناوين
        const headers = [
            'رقم السند',
            'التاريخ',
            'العميل',
            'المبلغ',
            'العملة',
            'طريقة الدفع',
            'رقم المرجع',
            'البنك',
            'ملاحظات'
        ];

        // إعداد البيانات
        const data = receipts.map(receipt => {
            const customer = appData.customers?.find(c => c.id === receipt.customerId);
            return [
                receipt.paymentNumber || '',
                receipt.paymentDate || '',
                customer ? customer.name : 'عميل محذوف',
                receipt.amount || 0,
                receipt.currency || 'SYP',
                getPaymentMethodText(receipt.paymentMethod) || '',
                receipt.referenceNumber || '',
                receipt.bankName || '',
                receipt.notes || ''
            ];
        });

        // إنشاء ورقة العمل مع التنسيق المحسن
        const worksheet = createFormattedWorksheet(headers, data, 'سندات القبض');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'سندات القبض');

        // إضافة ورقة الإحصائيات
        const statsSheet = createReceiptsStatsSheet(receipts);
        XLSX.utils.book_append_sheet(workbook, statsSheet, 'الإحصائيات');

        // حفظ الملف
        const fileName = `سندات_القبض_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير سندات القبض إلى Excel بنجاح');
        showSuccessToast('تم تصدير سندات القبض إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير سندات القبض إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير قائمة سندات الدفع إلى Excel
 */
function exportPaymentsToExcel() {
    console.log('📊 تصدير سندات الدفع إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // جمع بيانات سندات الدفع
        const payments = (appData.payments || []).filter(p => p.paymentType === 'payment');

        if (payments.length === 0) {
            alert('لا توجد سندات دفع للتصدير');
            return;
        }

        // إعداد العناوين
        const headers = [
            'رقم السند',
            'التاريخ',
            'المورد',
            'المبلغ',
            'العملة',
            'طريقة الدفع',
            'رقم المرجع',
            'البنك',
            'ملاحظات'
        ];

        // إعداد البيانات
        const data = payments.map(payment => {
            const supplier = appData.suppliers?.find(s => s.id === payment.supplierId);
            return [
                payment.paymentNumber || '',
                payment.paymentDate || '',
                supplier ? supplier.name : 'مورد محذوف',
                payment.amount || 0,
                payment.currency || 'SYP',
                getPaymentMethodText(payment.paymentMethod) || '',
                payment.referenceNumber || '',
                payment.bankName || '',
                payment.notes || ''
            ];
        });

        // إنشاء ورقة العمل مع التنسيق المحسن
        const worksheet = createFormattedWorksheet(headers, data, 'سندات الدفع');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'سندات الدفع');

        // إضافة ورقة الإحصائيات
        const statsSheet = createPaymentsStatsSheet(payments);
        XLSX.utils.book_append_sheet(workbook, statsSheet, 'الإحصائيات');

        // حفظ الملف
        const fileName = `سندات_الدفع_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير سندات الدفع إلى Excel بنجاح');
        showSuccessToast('تم تصدير سندات الدفع إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير سندات الدفع إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * إنشاء ورقة عمل منسقة
 */
function createFormattedWorksheet(headers, data, title) {
    // إنشاء ورقة العمل
    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);

    // تحسين عرض الأعمدة
    const colWidths = headers.map((header, index) => {
        let maxLength = header.length;

        data.forEach(row => {
            if (row[index] && row[index].toString().length > maxLength) {
                maxLength = row[index].toString().length;
            }
        });

        return { wch: Math.min(Math.max(maxLength + 2, 12), 25) };
    });
    worksheet['!cols'] = colWidths;

    // تنسيق الخلايا
    const range = XLSX.utils.decode_range(worksheet['!ref']);

    // تنسيق رأس الجدول
    for (let col = range.s.c; col <= range.e.c; col++) {
        const headerCell = XLSX.utils.encode_cell({ r: 0, c: col });
        if (!worksheet[headerCell]) continue;

        worksheet[headerCell].s = {
            font: { bold: true, color: { rgb: "FFFFFF" }, size: 12 },
            fill: { fgColor: { rgb: "2E75B6" } },
            alignment: { horizontal: "center", vertical: "center" },
            border: {
                top: { style: "medium", color: { rgb: "000000" } },
                bottom: { style: "medium", color: { rgb: "000000" } },
                left: { style: "medium", color: { rgb: "000000" } },
                right: { style: "medium", color: { rgb: "000000" } }
            }
        };
    }

    // تنسيق خلايا البيانات
    for (let row = range.s.r + 1; row <= range.e.r; row++) {
        for (let col = range.s.c; col <= range.e.c; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
            if (!worksheet[cellAddress]) continue;

            // تنسيق أساسي
            worksheet[cellAddress].s = {
                alignment: { horizontal: "center", vertical: "center" },
                border: {
                    top: { style: "thin", color: { rgb: "CCCCCC" } },
                    bottom: { style: "thin", color: { rgb: "CCCCCC" } },
                    left: { style: "thin", color: { rgb: "CCCCCC" } },
                    right: { style: "thin", color: { rgb: "CCCCCC" } }
                }
            };

            // تنسيق خاص للأرقام (عمود المبلغ)
            if (col === 3 && typeof worksheet[cellAddress].v === 'number') {
                worksheet[cellAddress].s.numFmt = '#,##0.00';
                worksheet[cellAddress].s.font = { color: { rgb: "0066CC" }, bold: true };
            }

            // تلوين الصفوف بالتناوب
            if (row % 2 === 0) {
                worksheet[cellAddress].s.fill = { fgColor: { rgb: "F8F9FA" } };
            }
        }
    }

    return worksheet;
}

/**
 * إنشاء ورقة إحصائيات سندات القبض
 */
function createReceiptsStatsSheet(receipts) {
    const stats = calculateReceiptsStats(receipts);

    const data = [
        ['إحصائيات سندات القبض'],
        [''],
        ['إجمالي عدد السندات', receipts.length],
        ['إجمالي المبالغ حسب العملة'],
        [''],
        ...Object.entries(stats.totalsByCurrency).map(([currency, amount]) => [
            getCurrencyName(currency),
            `${formatCurrency(amount)} ${getCurrencySymbol(currency)}`
        ]),
        [''],
        ['التوزيع حسب طريقة الدفع'],
        [''],
        ...Object.entries(stats.paymentMethods).map(([method, count]) => [
            getPaymentMethodText(method),
            `${count} سند`
        ]),
        [''],
        ['معلومات التصدير'],
        ['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')],
        ['وقت التصدير', new Date().toLocaleTimeString('ar-SA')],
        ['المطور', 'MOHANNAD AHMAD - SAM PRO']
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(data);

    // تنسيق ورقة الإحصائيات
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }];

    return worksheet;
}

/**
 * إنشاء ورقة إحصائيات سندات الدفع
 */
function createPaymentsStatsSheet(payments) {
    const stats = calculatePaymentsStats(payments);

    const data = [
        ['إحصائيات سندات الدفع'],
        [''],
        ['إجمالي عدد السندات', payments.length],
        ['إجمالي المبالغ حسب العملة'],
        [''],
        ...Object.entries(stats.totalsByCurrency).map(([currency, amount]) => [
            getCurrencyName(currency),
            `${formatCurrency(amount)} ${getCurrencySymbol(currency)}`
        ]),
        [''],
        ['التوزيع حسب طريقة الدفع'],
        [''],
        ...Object.entries(stats.paymentMethods).map(([method, count]) => [
            getPaymentMethodText(method),
            `${count} سند`
        ]),
        [''],
        ['معلومات التصدير'],
        ['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')],
        ['وقت التصدير', new Date().toLocaleTimeString('ar-SA')],
        ['المطور', 'MOHANNAD AHMAD - SAM PRO']
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(data);

    // تنسيق ورقة الإحصائيات
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }];

    return worksheet;
}

/**
 * حساب إحصائيات سندات القبض
 */
function calculateReceiptsStats(receipts) {
    const stats = {
        totalsByCurrency: {},
        paymentMethods: {}
    };

    receipts.forEach(receipt => {
        const currency = receipt.currency || 'SYP';
        const amount = receipt.amount || 0;
        const method = receipt.paymentMethod || 'cash';

        // تجميع حسب العملة
        if (!stats.totalsByCurrency[currency]) {
            stats.totalsByCurrency[currency] = 0;
        }
        stats.totalsByCurrency[currency] += amount;

        // تجميع حسب طريقة الدفع
        if (!stats.paymentMethods[method]) {
            stats.paymentMethods[method] = 0;
        }
        stats.paymentMethods[method]++;
    });

    return stats;
}

/**
 * حساب إحصائيات سندات الدفع
 */
function calculatePaymentsStats(payments) {
    const stats = {
        totalsByCurrency: {},
        paymentMethods: {}
    };

    payments.forEach(payment => {
        const currency = payment.currency || 'SYP';
        const amount = payment.amount || 0;
        const method = payment.paymentMethod || 'cash';

        // تجميع حسب العملة
        if (!stats.totalsByCurrency[currency]) {
            stats.totalsByCurrency[currency] = 0;
        }
        stats.totalsByCurrency[currency] += amount;

        // تجميع حسب طريقة الدفع
        if (!stats.paymentMethods[method]) {
            stats.paymentMethods[method] = 0;
        }
        stats.paymentMethods[method]++;
    });

    return stats;
}

/**
 * الحصول على اسم العملة
 */
function getCurrencyName(currency) {
    const names = {
        'SYP': 'الليرة السورية',
        'USD': 'الدولار الأمريكي',
        'EUR': 'اليورو',
        'TRY': 'الليرة التركية',
        'SAR': 'الريال السعودي',
        'AED': 'الدرهم الإماراتي',
        'LBP': 'الليرة اللبنانية',
        'GBP': 'الجنيه الإسترليني'
    };
    return names[currency] || currency;
}

/**
 * الحصول على رمز العملة
 */
function getCurrencySymbol(currency) {
    const symbols = {
        'SYP': 'ل.س',
        'USD': '$',
        'EUR': '€',
        'TRY': '₺',
        'SAR': 'ر.س',
        'AED': 'د.إ',
        'LBP': 'ل.ل',
        'GBP': '£'
    };
    return symbols[currency] || currency;
}

/**
 * طباعة محتوى عام
 */
function printContent(pageType, title) {
    const content = document.getElementById('main-content').innerHTML;
    const printContent = generatePrintHTML(content, title);
    printDocument(printContent, title);
}

/**
 * إنشاء HTML للطباعة
 */
function generatePrintHTML(content, title) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>${title}</title>
            <style>
                body {
                    font-family: 'Arial', sans-serif;
                    margin: 20px;
                    direction: rtl;
                    font-size: 14px;
                }
                .header {
                    text-align: center;
                    border-bottom: 2px solid #333;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }
                .company-info {
                    margin-bottom: 20px;
                }
                .logo {
                    margin-bottom: 10px;
                }
                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }
                th, td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: right;
                }
                th {
                    background-color: #f5f5f5;
                    font-weight: bold;
                }
                .footer {
                    margin-top: 50px;
                    text-align: center;
                    font-size: 12px;
                    color: #666;
                }
                @media print {
                    body { margin: 0; }
                    .no-print { display: none; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <div class="company-info">
                    <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                    ${settings.companyAddress ? `<p>${settings.companyAddress}</p>` : ''}
                    ${settings.companyPhone ? `<p>هاتف: ${settings.companyPhone}</p>` : ''}
                    ${settings.companyEmail ? `<p>بريد إلكتروني: ${settings.companyEmail}</p>` : ''}
                </div>
                <h3>${title}</h3>
            </div>

            <div class="content">
                ${content}
            </div>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * إنشاء HTML لطباعة الفاتورة
 */
function generateInvoicePrintHTML(invoice, client) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    const itemsHtml = invoice.items ? invoice.items.map(item => {
        const product = appData.products.find(p => p.id === item.productId);
        return `
            <tr>
                <td>
                    <strong>${product ? product.name : 'منتج محذوف'}</strong>
                    ${item.specifications ? `<br><small style="color: #666;">${item.specifications}</small>` : ''}
                </td>
                <td>${item.quantity}</td>
                <td>${formatCurrency(item.unitPrice)}</td>
                <td>${formatCurrency(item.totalAmount)}</td>
            </tr>
        `;
    }).join('') : '';

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>فاتورة رقم ${invoice.invoiceNumber}</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; direction: rtl; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .invoice-info { display: flex; justify-content: space-between; margin-bottom: 30px; }
                .client-info { width: 48%; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .totals { margin-top: 20px; text-align: left; }
                .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                <h3>فاتورة ${invoice.invoiceType === 'sale' ? 'مبيعات' : 'مشتريات'}</h3>
            </div>

            <div class="invoice-info">
                <div class="client-info">
                    <h4>${invoice.invoiceType === 'sale' ? 'بيانات العميل' : 'بيانات المورد'}</h4>
                    <p><strong>الاسم:</strong> ${client ? client.name : 'غير محدد'}</p>
                    <p><strong>الهاتف:</strong> ${client ? client.phone || 'غير محدد' : 'غير محدد'}</p>
                    <p><strong>العنوان:</strong> ${client ? client.address || 'غير محدد' : 'غير محدد'}</p>
                </div>
                <div class="invoice-details">
                    <p><strong>رقم الفاتورة:</strong> ${invoice.invoiceNumber}</p>
                    <p><strong>التاريخ:</strong> ${invoice.invoiceDate}</p>
                    <p><strong>الحالة:</strong> ${getStatusText(invoice.status)}</p>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>الصنف</th>
                        <th>الكمية</th>
                        <th>سعر الوحدة</th>
                        <th>المجموع</th>
                    </tr>
                </thead>
                <tbody>
                    ${itemsHtml}
                </tbody>
            </table>

            <div class="totals">
                <p><strong>المجموع الفرعي:</strong> ${formatCurrency(invoice.subtotal)}</p>
                <p><strong>الخصم:</strong> ${formatCurrency(invoice.discountAmount)}</p>
                <p><strong>الضريبة:</strong> ${formatCurrency(invoice.taxAmount)}</p>
                <h3><strong>المجموع النهائي:</strong> ${formatCurrency(invoice.totalAmount)}</h3>
                <p><strong>المدفوع:</strong> ${formatCurrency(invoice.paidAmount)}</p>
                <p><strong>المتبقي:</strong> ${formatCurrency(invoice.remainingAmount)}</p>
            </div>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * إنشاء HTML لطباعة سند القبض
 */
function generateReceiptPrintHTML(receipt, customer) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    const methodText = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>سند قبض رقم ${receipt.paymentNumber}</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; direction: rtl; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .receipt-info { margin-bottom: 30px; }
                .amount-box { border: 2px solid #333; padding: 20px; text-align: center; margin: 20px 0; }
                .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
                .signature-area { margin-top: 50px; display: flex; justify-content: space-between; }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                <h3>سند قبض</h3>
            </div>

            <div class="receipt-info">
                <p><strong>رقم السند:</strong> ${receipt.paymentNumber}</p>
                <p><strong>التاريخ:</strong> ${receipt.paymentDate}</p>
                <p><strong>العميل:</strong> ${customer ? customer.name : 'غير محدد'}</p>
                <p><strong>طريقة الدفع:</strong> ${methodText[receipt.paymentMethod] || receipt.paymentMethod}</p>
                ${receipt.referenceNumber ? `<p><strong>رقم المرجع:</strong> ${receipt.referenceNumber}</p>` : ''}
                ${receipt.bankName ? `<p><strong>البنك:</strong> ${receipt.bankName}</p>` : ''}
            </div>

            <div class="amount-box">
                <h2>المبلغ المقبوض: ${formatCurrency(receipt.amount)}</h2>
            </div>

            ${receipt.notes ? `<p><strong>ملاحظات:</strong> ${receipt.notes}</p>` : ''}

            <div class="signature-area">
                <div>
                    <p>توقيع المحاسب</p>
                    <p>_________________</p>
                </div>
                <div>
                    <p>توقيع العميل</p>
                    <p>_________________</p>
                </div>
            </div>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * إنشاء HTML لطباعة سند الدفع
 */
function generatePaymentPrintHTML(payment, supplier) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    const methodText = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>سند دفع رقم ${payment.paymentNumber}</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; direction: rtl; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .payment-info { margin-bottom: 30px; }
                .amount-box { border: 2px solid #333; padding: 20px; text-align: center; margin: 20px 0; }
                .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
                .signature-area { margin-top: 50px; display: flex; justify-content: space-between; }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                <h3>سند دفع</h3>
            </div>

            <div class="payment-info">
                <p><strong>رقم السند:</strong> ${payment.paymentNumber}</p>
                <p><strong>التاريخ:</strong> ${payment.paymentDate}</p>
                <p><strong>المورد:</strong> ${supplier ? supplier.name : 'غير محدد'}</p>
                <p><strong>طريقة الدفع:</strong> ${methodText[payment.paymentMethod] || payment.paymentMethod}</p>
                ${payment.referenceNumber ? `<p><strong>رقم المرجع:</strong> ${payment.referenceNumber}</p>` : ''}
                ${payment.bankName ? `<p><strong>البنك:</strong> ${payment.bankName}</p>` : ''}
            </div>

            <div class="amount-box">
                <h2>المبلغ المدفوع: ${formatCurrency(payment.amount)}</h2>
            </div>

            ${payment.notes ? `<p><strong>ملاحظات:</strong> ${payment.notes}</p>` : ''}

            <div class="signature-area">
                <div>
                    <p>توقيع المحاسب</p>
                    <p>_________________</p>
                </div>
                <div>
                    <p>توقيع المورد</p>
                    <p>_________________</p>
                </div>
            </div>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * إنشاء HTML لطباعة تقرير المبيعات
 */
function generateSalesReportPrintHTML(invoices, stats) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    const customerFilter = stats.customerId ? appData.customers.find(c => c.id == stats.customerId) : null;
    const productFilter = stats.productId ? appData.products.find(p => p.id == stats.productId) : null;

    const invoicesHtml = invoices.map(invoice => {
        const customer = appData.customers.find(c => c.id === invoice.customerId);
        return `
            <tr>
                <td>${invoice.invoiceNumber}</td>
                <td>${invoice.invoiceDate}</td>
                <td>${customer ? customer.name : 'غير محدد'}</td>
                <td>${formatCurrency(invoice.totalAmount)}</td>
                <td>${formatCurrency(invoice.paidAmount)}</td>
                <td>${formatCurrency(invoice.remainingAmount)}</td>
                <td>${getStatusText(invoice.status)}</td>
            </tr>
        `;
    }).join('');

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>تقرير المبيعات</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; direction: rtl; font-size: 14px; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .logo { margin-bottom: 10px; }
                .company-info { margin-bottom: 20px; }
                .report-info { margin-bottom: 30px; background: #f8f9fa; padding: 15px; border-radius: 5px; }
                .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                .stat-box { text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
                @media print { body { margin: 0; } .no-print { display: none; } }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <div class="company-info">
                    <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                    ${settings.companyAddress ? `<p>${settings.companyAddress}</p>` : ''}
                    ${settings.companyPhone ? `<p>هاتف: ${settings.companyPhone}</p>` : ''}
                </div>
                <h3>تقرير المبيعات</h3>
            </div>

            <div class="report-info">
                <h4>معلومات التقرير</h4>
                <p><strong>الفترة:</strong> من ${stats.fromDate} إلى ${stats.toDate}</p>
                ${customerFilter ? `<p><strong>العميل:</strong> ${customerFilter.name}</p>` : ''}
                ${productFilter ? `<p><strong>المنتج:</strong> ${productFilter.name}</p>` : ''}
                <p><strong>تاريخ الإنشاء:</strong> ${formatDateTime(new Date())}</p>
            </div>

            <div class="stats">
                <div class="stat-box">
                    <h4>${formatCurrency(stats.totalSales)}</h4>
                    <p>إجمالي المبيعات</p>
                </div>
                <div class="stat-box">
                    <h4>${stats.totalInvoices}</h4>
                    <p>عدد الفواتير</p>
                </div>
                <div class="stat-box">
                    <h4>${formatCurrency(stats.averageInvoice)}</h4>
                    <p>متوسط الفاتورة</p>
                </div>
                <div class="stat-box">
                    <h4>${formatCurrency(stats.pendingAmount)}</h4>
                    <p>المبالغ المعلقة</p>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>رقم الفاتورة</th>
                        <th>التاريخ</th>
                        <th>العميل</th>
                        <th>المجموع</th>
                        <th>المدفوع</th>
                        <th>المتبقي</th>
                        <th>الحالة</th>
                    </tr>
                </thead>
                <tbody>
                    ${invoicesHtml}
                </tbody>
            </table>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * إنشاء HTML لطباعة تقرير المشتريات
 */
function generatePurchaseReportPrintHTML(invoices, stats) {
    const settings = appData.settings;
    const logoHtml = settings.logoUrl ? `<img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 80px;">` : '';

    const supplierFilter = stats.supplierId ? appData.suppliers.find(s => s.id == stats.supplierId) : null;
    const productFilter = stats.productId ? appData.products.find(p => p.id == stats.productId) : null;

    const invoicesHtml = invoices.map(invoice => {
        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
        return `
            <tr>
                <td>${invoice.invoiceNumber}</td>
                <td>${invoice.invoiceDate}</td>
                <td>${supplier ? supplier.name : 'غير محدد'}</td>
                <td>${formatCurrency(invoice.totalAmount)}</td>
                <td>${formatCurrency(invoice.paidAmount)}</td>
                <td>${formatCurrency(invoice.remainingAmount)}</td>
                <td>${getStatusText(invoice.status)}</td>
            </tr>
        `;
    }).join('');

    return `
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <title>تقرير المشتريات</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; direction: rtl; font-size: 14px; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .logo { margin-bottom: 10px; }
                .company-info { margin-bottom: 20px; }
                .report-info { margin-bottom: 30px; background: #f8f9fa; padding: 15px; border-radius: 5px; }
                .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                .stat-box { text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
                @media print { body { margin: 0; } .no-print { display: none; } }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">${logoHtml}</div>
                <div class="company-info">
                    <h2>${settings.companyName || 'شركة SAM PRO'}</h2>
                    ${settings.companyAddress ? `<p>${settings.companyAddress}</p>` : ''}
                    ${settings.companyPhone ? `<p>هاتف: ${settings.companyPhone}</p>` : ''}
                </div>
                <h3>تقرير المشتريات</h3>
            </div>

            <div class="report-info">
                <h4>معلومات التقرير</h4>
                <p><strong>الفترة:</strong> من ${stats.fromDate} إلى ${stats.toDate}</p>
                ${supplierFilter ? `<p><strong>المورد:</strong> ${supplierFilter.name}</p>` : ''}
                ${productFilter ? `<p><strong>المنتج:</strong> ${productFilter.name}</p>` : ''}
                <p><strong>تاريخ الإنشاء:</strong> ${formatDateTime(new Date())}</p>
            </div>

            <div class="stats">
                <div class="stat-box">
                    <h4>${formatCurrency(stats.totalPurchases)}</h4>
                    <p>إجمالي المشتريات</p>
                </div>
                <div class="stat-box">
                    <h4>${stats.totalInvoices}</h4>
                    <p>عدد الفواتير</p>
                </div>
                <div class="stat-box">
                    <h4>${formatCurrency(stats.averageInvoice)}</h4>
                    <p>متوسط الفاتورة</p>
                </div>
                <div class="stat-box">
                    <h4>${formatCurrency(stats.pendingAmount)}</h4>
                    <p>المبالغ المعلقة</p>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>رقم الفاتورة</th>
                        <th>التاريخ</th>
                        <th>المورد</th>
                        <th>المجموع</th>
                        <th>المدفوع</th>
                        <th>المتبقي</th>
                        <th>الحالة</th>
                    </tr>
                </thead>
                <tbody>
                    ${invoicesHtml}
                </tbody>
            </table>

            <div class="footer">
                <p>تاريخ الطباعة: ${formatDateTime(new Date())}</p>
                <p>تطوير: MOHANNAD AHMAD - هاتف: +963-998-171-954</p>
            </div>
        </body>
        </html>
    `;
}

/**
 * طباعة المستند
 */
function printDocument(htmlContent, title) {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();
}

// وظائف السندات الإضافية
function viewReceipt(id) {
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('لم يتم العثور على سند القبض');
        return;
    }

    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const methodText = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'viewReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">سند قبض رقم ${receipt.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6"><strong>العميل:</strong> ${customer ? customer.name : 'غير محدد'}</div>
                        <div class="col-md-6"><strong>التاريخ:</strong> ${receipt.paymentDate}</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6"><strong>المبلغ:</strong> ${formatCurrency(receipt.amount)}</div>
                        <div class="col-md-6"><strong>طريقة الدفع:</strong> ${methodText[receipt.paymentMethod] || receipt.paymentMethod}</div>
                    </div>
                    ${receipt.referenceNumber ? `<div class="row mb-3"><div class="col-12"><strong>رقم المرجع:</strong> ${receipt.referenceNumber}</div></div>` : ''}
                    ${receipt.bankName ? `<div class="row mb-3"><div class="col-12"><strong>البنك:</strong> ${receipt.bankName}</div></div>` : ''}
                    ${receipt.notes ? `<div class="row mb-3"><div class="col-12"><strong>ملاحظات:</strong> ${receipt.notes}</div></div>` : ''}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="printReceipt(${receipt.id})">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>

                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function editReceipt(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('receipts')) {
        alert('ليس لديك صلاحية لتعديل سندات القبض');
        return;
    }

    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('لم يتم العثور على سند القبض');
        return;
    }

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editReceiptModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل سند القبض - ${receipt.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editReceiptForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCustomer" required>
                                    <option value="">اختر العميل</option>
                                    ${appData.customers.map(c => `<option value="${c.id}" ${c.id === receipt.customerId ? 'selected' : ''}>${c.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="editReceiptDate" value="${receipt.paymentDate}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editReceiptAmount" value="${receipt.amount}" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptCurrency" required>
                                    <option value="SYP" ${receipt.currency === 'SYP' ? 'selected' : ''}>ليرة سورية (ل.س)</option>
                                    <option value="USD" ${receipt.currency === 'USD' ? 'selected' : ''}>دولار أمريكي ($)</option>
                                    <option value="EUR" ${receipt.currency === 'EUR' ? 'selected' : ''}>يورو (€)</option>
                                    <option value="TRY" ${receipt.currency === 'TRY' ? 'selected' : ''}>ليرة تركية (₺)</option>
                                    <option value="SAR" ${receipt.currency === 'SAR' ? 'selected' : ''}>ريال سعودي (ر.س)</option>
                                    <option value="AED" ${receipt.currency === 'AED' ? 'selected' : ''}>درهم إماراتي (د.إ)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editReceiptMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="editReceiptMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash" ${receipt.paymentMethod === 'cash' ? 'selected' : ''}>نقدي</option>
                                    <option value="bank" ${receipt.paymentMethod === 'bank' ? 'selected' : ''}>تحويل بنكي</option>
                                    <option value="check" ${receipt.paymentMethod === 'check' ? 'selected' : ''}>شيك</option>
                                    <option value="card" ${receipt.paymentMethod === 'card' ? 'selected' : ''}>بطاقة ائتمان</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="editReceiptReference" value="${receipt.referenceNumber || ''}" placeholder="رقم الشيك أو الحوالة">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editReceiptBank" class="form-label">اسم البنك</label>
                                <input type="text" class="form-control" id="editReceiptBank" value="${receipt.bankName || ''}">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editReceiptNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editReceiptNotes" rows="3">${receipt.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveReceiptEdit(${id})">
                        <i class="fas fa-save me-1"></i>
                        حفظ التعديلات
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ تعديلات سند القبض
 */
function saveReceiptEdit(id) {
    try {
        const customerId = parseInt(document.getElementById('editReceiptCustomer').value);
        const date = document.getElementById('editReceiptDate').value;
        const amount = parseFloat(document.getElementById('editReceiptAmount').value);
        const currency = document.getElementById('editReceiptCurrency').value;
        const method = document.getElementById('editReceiptMethod').value;
        const reference = document.getElementById('editReceiptReference').value.trim();
        const bank = document.getElementById('editReceiptBank').value.trim();
        const notes = document.getElementById('editReceiptNotes').value.trim();

        // التحقق من البيانات المطلوبة
        if (!customerId || !date || !amount || !currency || !method || amount <= 0) {
            alert('يرجى ملء جميع الحقول المطلوبة');
            return;
        }

        // العثور على السند
        const receiptIndex = appData.payments.findIndex(p => p.id === id && p.paymentType === 'receipt');
        if (receiptIndex === -1) {
            alert('سند القبض غير موجود');
            return;
        }

        const oldReceipt = appData.payments[receiptIndex];
        const customer = appData.customers.find(c => c.id === customerId);
        if (!customer) {
            alert('العميل المحدد غير موجود');
            return;
        }

        // عكس تأثير السند القديم على العميل
        if (oldReceipt.customerId) {
            const oldCustomer = appData.customers.find(c => c.id === oldReceipt.customerId);
            if (oldCustomer) {
                oldCustomer.totalPayments = (oldCustomer.totalPayments || 0) - oldReceipt.amount;
                if (oldCustomer.balances && oldCustomer.balances[oldReceipt.currency]) {
                    oldCustomer.balances[oldReceipt.currency] += oldReceipt.amount;
                }
                if (oldReceipt.currency === (appData.settings.currency || 'SYP')) {
                    oldCustomer.currentBalance = (oldCustomer.currentBalance || 0) + oldReceipt.amount;
                }
            }
        }

        // تحديث السند
        appData.payments[receiptIndex] = {
            ...oldReceipt,
            customerId: customerId,
            paymentDate: date,
            amount: amount,
            currency: currency,
            paymentMethod: method,
            referenceNumber: reference,
            bankName: bank,
            notes: notes,
            updatedAt: new Date().toISOString()
        };

        // تطبيق تأثير السند الجديد على العميل
        updateCustomerPayment(customerId, amount, currency, date);

        // تحديث القيد المحاسبي
        const journalEntryIndex = appData.journalEntries.findIndex(entry => entry.paymentId === id);
        if (journalEntryIndex !== -1) {
            appData.journalEntries[journalEntryIndex] = {
                ...appData.journalEntries[journalEntryIndex],
                entryDate: date,
                description: `سند قبض رقم ${oldReceipt.paymentNumber} - ${customer.name} (معدل)`,
                debitAccount: method === 'cash' ? 'الصندوق' : 'البنك',
                creditAccount: 'العملاء',
                debitAmount: amount,
                creditAmount: amount,
                currency: currency,
                customerId: customerId,
                updatedAt: new Date().toISOString()
            };
        }

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editReceiptModal'));
        if (modal) {
            modal.hide();
        }

        alert('تم تحديث سند القبض بنجاح');
        showPage('receipts');

    } catch (error) {
        console.error('❌ خطأ في تعديل سند القبض:', error);
        alert('حدث خطأ أثناء تعديل سند القبض: ' + error.message);
    }
}

/**
 * حذف سند قبض
 */
function deleteReceipt(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('receipts')) {
        alert('ليس لديك صلاحية لحذف سندات القبض');
        return;
    }

    console.log('🗑️ طلب حذف سند القبض:', id);

    // التحقق من وجود السند
    const receipt = appData.payments.find(p => p.id === id && p.paymentType === 'receipt');
    if (!receipt) {
        alert('سند القبض غير موجود');
        console.error('❌ سند القبض غير موجود:', id);
        return;
    }

    // الحصول على معلومات العميل
    const customer = appData.customers.find(c => c.id === receipt.customerId);
    const clientName = customer?.name || 'عميل محذوف';
    const currencySymbol = getCurrencySymbol(receipt.currency || 'SYP');
    const currencyName = getCurrencyName(receipt.currency || 'SYP');

    // رسالة تأكيد مفصلة
    const confirmMessage = `⚠️ تأكيد حذف سند القبض

📄 رقم السند: ${receipt.paymentNumber}
👤 العميل: ${clientName}
💰 المبلغ: ${formatCurrency(receipt.amount, receipt.currency)}
💱 العملة: ${currencyName} (${currencySymbol})
📅 التاريخ: ${receipt.paymentDate}

⚠️ تحذير: هذا الإجراء لا يمكن التراجع عنه وسيؤثر على:
• أرصدة العملاء
• القيود المحاسبية
• تقارير الحسابات

هل أنت متأكد من المتابعة؟`;

    if (confirm(confirmMessage)) {

        try {
            console.log('🗑️ بدء حذف سند القبض:', receipt.paymentNumber);

            // عكس تأثير السند على أرصدة العملاء
            const currency = receipt.currency || appData.settings.currency || 'SYP';

            if (receipt.customerId && customer) {
                console.log('👤 عكس تأثير السند على العميل:', customer.name);

                // طرح المبلغ من إجمالي المدفوعات وإضافته للرصيد
                const oldTotalPayments = customer.totalPayments || 0;
                customer.totalPayments = Math.max(0, oldTotalPayments - receipt.amount);
                customer.transactionCount = Math.max(0, (customer.transactionCount || 1) - 1);

                // تحديث الأرصدة حسب العملة
                if (!customer.balances) customer.balances = {};
                if (!customer.balances[currency]) customer.balances[currency] = 0;
                customer.balances[currency] += receipt.amount; // إرجاع المبلغ للرصيد

                // تحديث الرصيد الحالي للعملة الأساسية
                if (currency === (appData.settings.currency || 'SYP')) {
                    customer.currentBalance = (customer.currentBalance || 0) + receipt.amount;
                }

                console.log(`✅ تم تعديل رصيد العميل ${customer.name} - المبلغ المسترد: ${receipt.amount} ${getCurrencySymbol(currency)}`);
            } else if (receipt.customerId) {
                console.warn('⚠️ لم يتم العثور على العميل لعكس تأثير السند');
            }

            // حذف القيود المحاسبية المرتبطة
            if (appData.journalEntries) {
                const entriesCountBefore = appData.journalEntries.length;
                appData.journalEntries = appData.journalEntries.filter(entry =>
                    entry.paymentId !== id && entry.referenceId !== id
                );
                const entriesCountAfter = appData.journalEntries.length;
                const deletedEntries = entriesCountBefore - entriesCountAfter;
                if (deletedEntries > 0) {
                    console.log(`📊 تم حذف ${deletedEntries} قيد محاسبي`);
                } else {
                    console.warn('⚠️ لم يتم العثور على قيود محاسبية مرتبطة بالسند');
                }
            }

            // حذف السند من قاعدة البيانات
            const paymentsCountBefore = appData.payments.length;
            appData.payments = appData.payments.filter(p => p.id !== id);
            const paymentsCountAfter = appData.payments.length;

            if (paymentsCountBefore === paymentsCountAfter) {
                throw new Error('فشل في حذف السند من قاعدة البيانات');
            }

            // حفظ البيانات
            try {
                saveData();
                console.log('💾 تم حفظ البيانات بعد الحذف');
            } catch (error) {
                console.error('❌ خطأ في حفظ البيانات:', error);
                throw new Error('فشل في حفظ البيانات بعد الحذف');
            }

            console.log('✅ تم حذف سند القبض بنجاح');

            // رسالة نجاح مفصلة
            const successMessage = `✅ تم حذف سند القبض بنجاح!

📄 رقم السند: ${receipt.paymentNumber}
👤 العميل: ${clientName}
💰 المبلغ المسترد: ${formatCurrency(receipt.amount, receipt.currency)}

تم تحديث:
• رصيد العميل
• القيود المحاسبية
• قاعدة البيانات`;

            alert(successMessage);

            // تحديث الصفحة الحالية
            showPage('receipts');

        } catch (error) {
            console.error('❌ خطأ في حذف سند القبض:', error);
            alert('حدث خطأ أثناء حذف سند القبض: ' + error.message);
        }
    }
}

function viewPayment(id) {
    const payment = appData.payments.find(p => p.id === id && p.paymentType === 'payment');
    if (!payment) {
        alert('لم يتم العثور على سند الدفع');
        return;
    }

    const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
    const methodText = {
        'cash': 'نقدي',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان'
    };

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'viewPaymentModal';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">سند دفع رقم ${payment.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6"><strong>المورد:</strong> ${supplier ? supplier.name : 'غير محدد'}</div>
                        <div class="col-md-6"><strong>التاريخ:</strong> ${payment.paymentDate}</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6"><strong>المبلغ:</strong> ${formatCurrency(payment.amount)}</div>
                        <div class="col-md-6"><strong>طريقة الدفع:</strong> ${methodText[payment.paymentMethod] || payment.paymentMethod}</div>
                    </div>
                    ${payment.referenceNumber ? `<div class="row mb-3"><div class="col-12"><strong>رقم المرجع:</strong> ${payment.referenceNumber}</div></div>` : ''}
                    ${payment.bankName ? `<div class="row mb-3"><div class="col-12"><strong>البنك:</strong> ${payment.bankName}</div></div>` : ''}
                    ${payment.notes ? `<div class="row mb-3"><div class="col-12"><strong>ملاحظات:</strong> ${payment.notes}</div></div>` : ''}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="printPayment(${payment.id})">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>

                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

function editPayment(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('payments')) {
        alert('ليس لديك صلاحية لتعديل سندات الدفع');
        return;
    }

    const payment = appData.payments.find(p => p.id === id && p.paymentType === 'payment');
    if (!payment) {
        alert('لم يتم العثور على سند الدفع');
        return;
    }

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editPaymentModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل سند الدفع - ${payment.paymentNumber}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editPaymentForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editPaymentSupplier" class="form-label">المورد <span class="text-danger">*</span></label>
                                <select class="form-select" id="editPaymentSupplier" required>
                                    <option value="">اختر المورد</option>
                                    ${appData.suppliers.map(s => `<option value="${s.id}" ${s.id === payment.supplierId ? 'selected' : ''}>${s.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editPaymentDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="editPaymentDate" value="${payment.paymentDate}" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="editPaymentAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editPaymentAmount" value="${payment.amount}" min="0" step="0.01" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editPaymentCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                <select class="form-select" id="editPaymentCurrency" required>
                                    <option value="SYP" ${payment.currency === 'SYP' ? 'selected' : ''}>ليرة سورية (ل.س)</option>
                                    <option value="USD" ${payment.currency === 'USD' ? 'selected' : ''}>دولار أمريكي ($)</option>
                                    <option value="EUR" ${payment.currency === 'EUR' ? 'selected' : ''}>يورو (€)</option>
                                    <option value="TRY" ${payment.currency === 'TRY' ? 'selected' : ''}>ليرة تركية (₺)</option>
                                    <option value="SAR" ${payment.currency === 'SAR' ? 'selected' : ''}>ريال سعودي (ر.س)</option>
                                    <option value="AED" ${payment.currency === 'AED' ? 'selected' : ''}>درهم إماراتي (د.إ)</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="editPaymentMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                <select class="form-select" id="editPaymentMethod" required>
                                    <option value="">اختر طريقة الدفع</option>
                                    <option value="cash" ${payment.paymentMethod === 'cash' ? 'selected' : ''}>نقدي</option>
                                    <option value="bank" ${payment.paymentMethod === 'bank' ? 'selected' : ''}>تحويل بنكي</option>
                                    <option value="check" ${payment.paymentMethod === 'check' ? 'selected' : ''}>شيك</option>
                                    <option value="card" ${payment.paymentMethod === 'card' ? 'selected' : ''}>بطاقة ائتمان</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editPaymentReference" class="form-label">رقم المرجع</label>
                                <input type="text" class="form-control" id="editPaymentReference" value="${payment.referenceNumber || ''}" placeholder="رقم الشيك أو الحوالة">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editPaymentBank" class="form-label">اسم البنك</label>
                                <input type="text" class="form-control" id="editPaymentBank" value="${payment.bankName || ''}">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editPaymentNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="editPaymentNotes" rows="3">${payment.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="savePaymentEdit(${id})">
                        <i class="fas fa-save me-1"></i>
                        حفظ التعديلات
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ تعديلات سند الدفع
 */
function savePaymentEdit(id) {
    try {
        const supplierId = parseInt(document.getElementById('editPaymentSupplier').value);
        const date = document.getElementById('editPaymentDate').value;
        const amount = parseFloat(document.getElementById('editPaymentAmount').value);
        const currency = document.getElementById('editPaymentCurrency').value;
        const method = document.getElementById('editPaymentMethod').value;
        const reference = document.getElementById('editPaymentReference').value.trim();
        const bank = document.getElementById('editPaymentBank').value.trim();
        const notes = document.getElementById('editPaymentNotes').value.trim();

        // التحقق من البيانات المطلوبة
        if (!supplierId || !date || !amount || !currency || !method || amount <= 0) {
            alert('يرجى ملء جميع الحقول المطلوبة');
            return;
        }

        // العثور على السند
        const paymentIndex = appData.payments.findIndex(p => p.id === id && p.paymentType === 'payment');
        if (paymentIndex === -1) {
            alert('سند الدفع غير موجود');
            return;
        }

        const oldPayment = appData.payments[paymentIndex];
        const supplier = appData.suppliers.find(s => s.id === supplierId);
        if (!supplier) {
            alert('المورد المحدد غير موجود');
            return;
        }

        // عكس تأثير السند القديم على المورد
        if (oldPayment.supplierId) {
            const oldSupplier = appData.suppliers.find(s => s.id === oldPayment.supplierId);
            if (oldSupplier) {
                oldSupplier.totalPayments = (oldSupplier.totalPayments || 0) - oldPayment.amount;
                if (oldSupplier.balances && oldSupplier.balances[oldPayment.currency]) {
                    oldSupplier.balances[oldPayment.currency] += oldPayment.amount;
                }
                if (oldPayment.currency === (appData.settings.currency || 'SYP')) {
                    oldSupplier.currentBalance = (oldSupplier.currentBalance || 0) + oldPayment.amount;
                }
            }
        }

        // تحديث السند
        appData.payments[paymentIndex] = {
            ...oldPayment,
            supplierId: supplierId,
            paymentDate: date,
            amount: amount,
            currency: currency,
            paymentMethod: method,
            referenceNumber: reference,
            bankName: bank,
            notes: notes,
            updatedAt: new Date().toISOString()
        };

        // تطبيق تأثير السند الجديد على المورد
        updateSupplierPayment(supplierId, amount, currency, date);

        // تحديث القيد المحاسبي
        const journalEntryIndex = appData.journalEntries.findIndex(entry => entry.paymentId === id);
        if (journalEntryIndex !== -1) {
            appData.journalEntries[journalEntryIndex] = {
                ...appData.journalEntries[journalEntryIndex],
                entryDate: date,
                description: `سند دفع رقم ${oldPayment.paymentNumber} - ${supplier.name} (معدل)`,
                debitAccount: 'الموردين',
                creditAccount: method === 'cash' ? 'الصندوق' : 'البنك',
                debitAmount: amount,
                creditAmount: amount,
                currency: currency,
                supplierId: supplierId,
                updatedAt: new Date().toISOString()
            };
        }

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editPaymentModal'));
        if (modal) {
            modal.hide();
        }

        alert('تم تحديث سند الدفع بنجاح');
        showPage('payments');

    } catch (error) {
        console.error('❌ خطأ في تعديل سند الدفع:', error);
        alert('حدث خطأ أثناء تعديل سند الدفع: ' + error.message);
    }
}

/**
 * تسجيل الدخول
 */
function login(event) {
    event.preventDefault();

    const username = document.getElementById('loginUsername').value.trim();
    const password = document.getElementById('loginPassword').value;

    console.log('🔐 محاولة تسجيل دخول:', username);

    // التحقق من البيانات المطلوبة
    if (!username || !password) {
        alert('يرجى إدخال اسم المستخدم وكلمة المرور');
        return;
    }

    // البحث عن المستخدم
    const user = appData.users.find(u => u.username === username && u.password === password);

    if (user) {
        if (!user.isActive) {
            alert('حسابك معطل. يرجى التواصل مع المدير');
            return;
        }

        // تحديث آخر تسجيل دخول
        user.lastLogin = new Date().toISOString();
        saveData();

        // حفظ بيانات المستخدم في التخزين المحلي
        localStorage.setItem('samProLoggedIn', 'true');
        localStorage.setItem('samProCurrentUser', JSON.stringify({
            id: user.id,
            username: user.username,
            fullName: user.fullName,
            role: user.role,
            permissions: user.permissions
        }));

        console.log('✅ تم تسجيل الدخول بنجاح:', user.fullName);
        showPage('dashboard');
        alert(`مرحباً ${user.fullName}!\nتم تسجيل الدخول بنجاح`);
    } else {
        console.log('❌ فشل تسجيل الدخول');
        alert('اسم المستخدم أو كلمة المرور غير صحيحة');
    }
}

/**
 * تسجيل الخروج
 */
function logout() {
    const currentUser = getCurrentUser();
    const userName = currentUser ? currentUser.fullName : 'المستخدم';

    if (confirm(`هل أنت متأكد من تسجيل الخروج يا ${userName}؟`)) {
        console.log('🚪 تسجيل خروج المستخدم:', userName);
        localStorage.removeItem('samProLoggedIn');
        localStorage.removeItem('samProCurrentUser');
        showPage('login');
        alert('تم تسجيل الخروج بنجاح');
    }
}

/**
 * التحقق من تسجيل الدخول
 */
function checkLogin() {
    const isLoggedIn = localStorage.getItem('samProLoggedIn');
    const currentUser = getCurrentUser();

    // التحقق الأساسي من وجود بيانات تسجيل الدخول
    if (!isLoggedIn || !currentUser) {
        console.log('🔒 لا توجد بيانات تسجيل دخول صحيحة');
        clearLoginData();
        showPage('login');
        return false;
    }

    // التحقق من وجود قاعدة بيانات المستخدمين
    if (!appData.users || appData.users.length === 0) {
        console.log('🔒 قاعدة بيانات المستخدمين غير موجودة');
        clearLoginData();
        showPage('login');
        alert('خطأ في النظام: قاعدة بيانات المستخدمين غير موجودة');
        return false;
    }

    // التحقق من أن المستخدم ما زال موجوداً ونشطاً
    const user = appData.users.find(u => u.id === currentUser.id);
    if (!user) {
        console.log('🔒 المستخدم غير موجود في قاعدة البيانات');
        clearLoginData();
        showPage('login');
        alert('المستخدم غير موجود. يرجى تسجيل الدخول مرة أخرى');
        return false;
    }

    if (!user.isActive) {
        console.log('🔒 المستخدم معطل');
        clearLoginData();
        showPage('login');
        alert('تم تعطيل حسابك. يرجى التواصل مع المدير');
        return false;
    }

    // التحقق من صحة بيانات المستخدم المحفوظة
    if (currentUser.username !== user.username || currentUser.role !== user.role) {
        console.log('🔒 بيانات المستخدم المحفوظة غير متطابقة');
        clearLoginData();
        showPage('login');
        alert('تم تغيير بيانات حسابك. يرجى تسجيل الدخول مرة أخرى');
        return false;
    }

    console.log('✅ تم التحقق من تسجيل الدخول بنجاح للمستخدم:', user.fullName);
    return true;
}

/**
 * مسح بيانات تسجيل الدخول
 */
function clearLoginData() {
    localStorage.removeItem('samProLoggedIn');
    localStorage.removeItem('samProCurrentUser');
    console.log('🧹 تم مسح بيانات تسجيل الدخول');
}

/**
 * الحصول على المستخدم الحالي
 */
function getCurrentUser() {
    try {
        const userStr = localStorage.getItem('samProCurrentUser');
        return userStr ? JSON.parse(userStr) : null;
    } catch (error) {
        console.error('خطأ في قراءة بيانات المستخدم:', error);
        return null;
    }
}

/**
 * التحقق من صلاحية المستخدم
 */
function hasPermission(permission) {
    const currentUser = getCurrentUser();

    // إذا لم يكن هناك مستخدم مسجل دخول، السماح بالعمليات الأساسية
    if (!currentUser) {
        // السماح بالعمليات الأساسية للتطبيق
        const basicPermissions = ['receipts', 'payments', 'customers', 'suppliers', 'products', 'invoices', 'dashboard'];
        return basicPermissions.includes(permission);
    }

    // المدير له جميع الصلاحيات
    if (currentUser.role === 'admin') return true;

    // التحقق من الصلاحية المحددة
    return currentUser.permissions && currentUser.permissions[permission] === true;
}

/**
 * التحقق من صلاحية الوصول للصفحة
 */
function checkPagePermission(pageName) {
    const currentUser = getCurrentUser();
    if (!currentUser) return false;

    // المدير له صلاحية الوصول لجميع الصفحات
    if (currentUser.role === 'admin') return true;

    // تحديد الصلاحية المطلوبة لكل صفحة
    const pagePermissions = {
        'dashboard': 'dashboard',
        'customers': 'customers',
        'add-customer': 'customers',
        'suppliers': 'suppliers',
        'add-supplier': 'suppliers',
        'products': 'products',
        'add-product': 'products',
        'warehouses': 'warehouses',
        'add-warehouse': 'warehouses',
        'sales-invoices': 'salesInvoices',
        'purchase-invoices': 'purchaseInvoices',
        'create-invoice': 'salesInvoices', // يمكن تخصيصها حسب نوع الفاتورة
        'receipts': 'receipts',
        'payments': 'payments',
        'inventory': 'inventory',
        'reports': 'reports',
        'journal': 'journal',
        'settings': 'settings',
        'backup': 'backup',
        'users': 'users',
        'login': true // صفحة تسجيل الدخول متاحة للجميع
    };

    const requiredPermission = pagePermissions[pageName];

    // إذا لم تكن الصفحة محددة في القائمة، فهي محمية بشكل افتراضي
    if (requiredPermission === undefined) {
        console.log('⚠️ صفحة غير محددة في قائمة الصلاحيات:', pageName);
        return false;
    }

    // إذا كانت الصفحة متاحة للجميع
    if (requiredPermission === true) {
        return true;
    }

    // التحقق من الصلاحية المطلوبة
    return hasPermission(requiredPermission);
}

/**
 * الحصول على رمز العملة
 */
function getCurrencySymbol(currencyCode) {
    const currencies = {
        'SYP': 'ل.س',
        'USD': '$',
        'EUR': '€',
        'TRY': '₺',
        'SAR': 'ر.س',
        'AED': 'د.إ',
        'EGP': 'ج.م',
        'JOD': 'د.أ',
        'LBP': 'ل.ل',
        'GBP': '£'
    };
    return currencies[currencyCode] || 'ل.س';
}

/**
 * تحديث عرض العملة في الفاتورة
 */
function updateCurrencyDisplay() {
    const currencySelect = document.getElementById('invoiceCurrency');
    const conversionSection = document.getElementById('currencyConversionSection');
    const currentCurrencyDisplay = document.getElementById('currentCurrencyDisplay');
    const exchangeRateOptional = document.getElementById('exchangeRateOptional');
    const currencySymbolDisplay = document.getElementById('currencySymbolDisplay');
    const defaultRateHint = document.getElementById('defaultRateHint');

    if (!currencySelect) return;

    const selectedCurrency = currencySelect.value;
    const currencySymbol = getCurrencySymbol(selectedCurrency);
    const currencyName = getCurrencyName(selectedCurrency);

    console.log(`💱 تحديث عرض العملة: ${currencyName} (${currencySymbol})`);

    // تحديث رمز العملة في التسمية
    if (currencySymbolDisplay) {
        currencySymbolDisplay.textContent = currencySymbol;
        currencySymbolDisplay.className = `badge bg-info ms-1`;
    }

    // تحديث عرض العملة الحالية
    if (currentCurrencyDisplay) {
        currentCurrencyDisplay.value = `${currencyName} (${currencySymbol})`;
    }

    // تحديث تلميح السعر الافتراضي
    if (defaultRateHint && selectedCurrency !== 'SYP') {
        const defaultRate = getExchangeRate('SYP', selectedCurrency);
        defaultRateHint.textContent = `(الافتراضي: ${defaultRate})`;
    } else if (defaultRateHint) {
        defaultRateHint.textContent = '';
    }

    // إظهار/إخفاء حقل سعر الصرف الاختياري
    if (exchangeRateOptional) {
        if (selectedCurrency !== 'SYP') {
            exchangeRateOptional.style.display = 'block';
            // عرض السعر الافتراضي كـ placeholder
            const defaultRate = getExchangeRate('SYP', selectedCurrency);
            exchangeRateOptional.placeholder = `اختياري - السعر الافتراضي: ${defaultRate}`;
            exchangeRateOptional.title = 'سعر الصرف اختياري - إذا تُرك فارغاً سيتم استخدام السعر الافتراضي';
            // إزالة القيمة المطلوبة
            exchangeRateOptional.removeAttribute('required');
        } else {
            exchangeRateOptional.style.display = 'none';
            exchangeRateOptional.value = '';
        }
    }

    // إظهار قسم تحويل العملة إذا لم تكن الليرة السورية
    if (conversionSection) {
        if (selectedCurrency !== 'SYP') {
            conversionSection.style.display = 'block';
        } else {
            conversionSection.style.display = 'none';
        }
    }

    // تحديث جميع عروض العملة في الفاتورة
    updateInvoiceCurrencyDisplay(selectedCurrency, currencySymbol);

    // إعادة حساب الإجماليات
    calculateInvoiceTotals();
}

/**
 * تحديث سعر الصرف المخصص
 */
function updateCustomExchangeRate() {
    const exchangeRateOptional = document.getElementById('exchangeRateOptional');
    const selectedCurrency = document.getElementById('invoiceCurrency')?.value;

    if (!exchangeRateOptional || !selectedCurrency) return;

    const customRate = parseFloat(exchangeRateOptional.value);

    if (customRate && customRate > 0) {
        // حفظ السعر المخصص مؤقتاً
        if (!window.customExchangeRates) {
            window.customExchangeRates = {};
        }
        window.customExchangeRates[selectedCurrency] = customRate;

        console.log(`💱 تم تعيين سعر صرف مخصص لـ ${selectedCurrency}: ${customRate}`);

        // إعادة حساب الإجماليات مع السعر الجديد
        calculateInvoiceTotals();

        // تحديث قسم التحويل إذا كان مفتوحاً
        calculateCurrencyConversion();
    } else {
        // إزالة السعر المخصص
        if (window.customExchangeRates && window.customExchangeRates[selectedCurrency]) {
            delete window.customExchangeRates[selectedCurrency];
            console.log(`💱 تم إزالة السعر المخصص لـ ${selectedCurrency}`);
        }
    }
}

/**
 * الحصول على اسم العملة
 */
function getCurrencyName(currencyCode) {
    const currencyNames = {
        'SYP': 'ليرة سورية',
        'USD': 'دولار أمريكي',
        'EUR': 'يورو',
        'TRY': 'ليرة تركية',
        'SAR': 'ريال سعودي',
        'AED': 'درهم إماراتي',
        'EGP': 'جنيه مصري',
        'JOD': 'دينار أردني',
        'LBP': 'ليرة لبنانية',
        'GBP': 'جنيه إسترليني'
    };
    return currencyNames[currencyCode] || 'ليرة سورية';
}

/**
 * تحديث عرض العملة في جميع أنحاء الفاتورة
 */
function updateInvoiceCurrencyDisplay(currencyCode, currencySymbol) {
    // تحديث عروض المبالغ
    const amountElements = [
        'subtotalAmount',
        'discountAmount',
        'taxAmount',
        'totalAmount'
    ];

    amountElements.forEach(elementId => {
        const element = document.getElementById(elementId);
        if (element) {
            const currentText = element.textContent;
            const numericValue = parseFloat(currentText.replace(/[^\d.-]/g, '')) || 0;
            element.textContent = `${formatCurrency(numericValue)} ${currencySymbol}`;
        }
    });

    // تحديث عروض المبالغ في جدول العناصر
    const itemTotalElements = document.querySelectorAll('[id^="itemTotal_"]');
    itemTotalElements.forEach(element => {
        const currentText = element.textContent;
        const numericValue = parseFloat(currentText.replace(/[^\d.-]/g, '')) || 0;
        element.textContent = `${formatCurrency(numericValue)} ${currencySymbol}`;
    });
}

/**
 * حساب تحويل العملة
 */
function calculateCurrencyConversion() {
    const currentCurrency = document.getElementById('invoiceCurrency')?.value;
    const targetCurrency = document.getElementById('targetCurrency')?.value;
    const exchangeRateInput = document.getElementById('exchangeRate');
    const convertedAmountInput = document.getElementById('convertedAmount');
    const totalAmountElement = document.getElementById('totalAmount');

    if (!currentCurrency || !targetCurrency || !exchangeRateInput || !convertedAmountInput) {
        return;
    }

    // استخدام السعر المدخل أو السعر الافتراضي
    let exchangeRate = parseFloat(exchangeRateInput.value);
    if (!exchangeRate || exchangeRate <= 0) {
        // استخدام السعر الافتراضي
        exchangeRate = getExchangeRate(currentCurrency, targetCurrency);
        exchangeRateInput.placeholder = `السعر الافتراضي: ${exchangeRate}`;
    }

    // حساب المبلغ المحول
    const currentTotal = parseFloat(totalAmountElement?.textContent?.replace(/[^\d.-]/g, '')) || 0;
    const convertedTotal = currentTotal * exchangeRate;

    const targetCurrencySymbol = getCurrencySymbol(targetCurrency);
    convertedAmountInput.value = `${formatCurrency(convertedTotal)} ${targetCurrencySymbol}`;

    console.log('💱 تم حساب تحويل العملة:', {
        from: currentCurrency,
        to: targetCurrency,
        rate: exchangeRate,
        isDefault: !parseFloat(exchangeRateInput.value),
        originalAmount: currentTotal,
        convertedAmount: convertedTotal
    });
}

/**
 * الحصول على سعر الصرف بين عملتين
 */
function getExchangeRate(fromCurrency, toCurrency) {
    if (fromCurrency === toCurrency) {
        return 1.0;
    }

    // التحقق من وجود سعر صرف مخصص للفاتورة الحالية
    if (window.customExchangeRates && window.customExchangeRates[toCurrency]) {
        console.log(`💱 استخدام سعر صرف مخصص لـ ${toCurrency}: ${window.customExchangeRates[toCurrency]}`);
        return window.customExchangeRates[toCurrency];
    }

    // أسعار الصرف الافتراضية (يمكن تحديثها من الإعدادات)
    const defaultRates = {
        'SYP_USD': 0.0004,
        'SYP_EUR': 0.00037,
        'SYP_TRY': 0.011,
        'SYP_SAR': 0.0015,
        'SYP_AED': 0.0015,
        'SYP_EGP': 0.012,
        'SYP_JOD': 0.00028,
        'SYP_LBP': 0.6,
        'SYP_GBP': 0.00032,
        'USD_SYP': 2500,
        'EUR_SYP': 2700,
        'TRY_SYP': 91,
        'SAR_SYP': 667,
        'AED_SYP': 680,
        'EGP_SYP': 83,
        'JOD_SYP': 3521,
        'LBP_SYP': 1.67,
        'GBP_SYP': 3125
    };

    // البحث في إعدادات أسعار الصرف المحفوظة
    if (appData.settings && appData.settings.exchangeRates) {
        const rateKey = `${fromCurrency}_${toCurrency}`;
        if (appData.settings.exchangeRates[rateKey]) {
            return appData.settings.exchangeRates[rateKey];
        }
    }

    // استخدام الأسعار الافتراضية
    const rateKey = `${fromCurrency}_${toCurrency}`;
    return defaultRates[rateKey] || 1.0;
}

/**
 * تطبيق تحويل العملة على الفاتورة
 */
function applyCurrencyConversion() {
    const currentCurrency = document.getElementById('invoiceCurrency')?.value;
    const targetCurrency = document.getElementById('targetCurrency')?.value;
    const exchangeRateInput = document.getElementById('exchangeRate');

    // استخدام السعر المدخل أو السعر الافتراضي
    let exchangeRate = parseFloat(exchangeRateInput?.value);
    if (!exchangeRate || exchangeRate <= 0) {
        exchangeRate = getExchangeRate(currentCurrency, targetCurrency);
    }

    if (!currentCurrency || !targetCurrency) {
        alert('يرجى اختيار العملة المستهدفة');
        return;
    }

    if (currentCurrency === targetCurrency) {
        alert('العملة الحالية والمستهدفة متطابقتان');
        return;
    }

    // تأكيد التحويل
    const targetCurrencyName = getCurrencyName(targetCurrency);
    const currentCurrencyName = getCurrencyName(currentCurrency);

    if (!confirm(`هل أنت متأكد من تحويل الفاتورة من ${currentCurrencyName} إلى ${targetCurrencyName}؟\n\nسعر الصرف: ${exchangeRate}\n\nسيتم تحويل جميع المبالغ في الفاتورة.`)) {
        return;
    }

    // تحويل أسعار العناصر
    const itemRows = document.querySelectorAll('#invoiceItemsTable tr');
    itemRows.forEach(row => {
        const priceInput = row.querySelector('input[id^="itemPrice_"]');
        if (priceInput) {
            const currentPrice = parseFloat(priceInput.value) || 0;
            const convertedPrice = currentPrice * exchangeRate;
            priceInput.value = convertedPrice.toFixed(4);

            // إعادة حساب إجمالي العنصر
            const itemId = priceInput.id.split('_')[1];
            calculateItemTotal(itemId);
        }
    });

    // تحديث عملة الفاتورة
    document.getElementById('invoiceCurrency').value = targetCurrency;

    // إعادة حساب الإجماليات
    calculateInvoiceTotals();

    // تحديث عرض العملة
    updateCurrencyDisplay();

    // إخفاء قسم التحويل
    document.getElementById('currencyConversionSection').style.display = 'none';

    // رسالة نجاح
    const targetCurrencySymbol = getCurrencySymbol(targetCurrency);
    alert(`✅ تم تحويل الفاتورة بنجاح إلى ${targetCurrencyName} (${targetCurrencySymbol})`);

    console.log(`✅ تم تحويل الفاتورة من ${currentCurrency} إلى ${targetCurrency} بسعر صرف ${exchangeRate}`);
}

/**
 * حفظ إعدادات الشركة
 */
function saveCompanySettings(event) {
    event.preventDefault();

    console.log('💾 بدء حفظ إعدادات الشركة...');

    try {
        // التحقق من وجود البيانات الأساسية
        console.log('🔍 فحص العناصر المطلوبة...');

        const requiredElements = [
            'companyName', 'companyAddress', 'companyPhone', 'companyEmail',
            'taxNumber', 'currency', 'taxRate'
        ];

        const missingElements = [];
        requiredElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (!element) {
                missingElements.push(elementId);
            }
        });

        if (missingElements.length > 0) {
            console.error('❌ عناصر مفقودة:', missingElements);
            alert(`خطأ: العناصر التالية مفقودة من النموذج:\n${missingElements.join(', ')}`);
            return;
        }

        // التحقق من تهيئة appData.settings
        if (!appData.settings) {
            console.log('🔧 إنشاء كائن الإعدادات...');
            appData.settings = {};
        }

        // حفظ البيانات الأساسية مع التحقق
        console.log('📝 حفظ البيانات الأساسية...');

        const companyName = document.getElementById('companyName').value.trim();
        const companyAddress = document.getElementById('companyAddress').value.trim();
        const companyPhone = document.getElementById('companyPhone').value.trim();
        const companyEmail = document.getElementById('companyEmail').value.trim();
        const taxNumber = document.getElementById('taxNumber').value.trim();
        const currency = document.getElementById('currency').value;
        const taxRate = parseFloat(document.getElementById('taxRate').value) || 0;

        // التحقق من البيانات المطلوبة
        if (!companyName) {
            alert('يرجى إدخال اسم الشركة');
            return;
        }

        if (!currency) {
            alert('يرجى اختيار العملة الافتراضية');
            return;
        }

        // حفظ البيانات
        appData.settings.companyName = companyName;
        appData.settings.companyAddress = companyAddress;
        appData.settings.companyPhone = companyPhone;
        appData.settings.companyEmail = companyEmail;
        appData.settings.taxNumber = taxNumber;
        appData.settings.currency = currency;
        appData.settings.currencySymbol = getCurrencySymbol(currency);
        appData.settings.taxRate = taxRate;

        console.log('✅ تم حفظ البيانات الأساسية:', {
            companyName, currency, taxRate
        });

        // حفظ إعدادات العملات المتعددة
        console.log('💱 فحص إعدادات العملات المتعددة...');

        const enableMultiCurrencyElement = document.getElementById('enableMultiCurrency');
        if (enableMultiCurrencyElement) {
            const wasEnabled = appData.settings.enableMultiCurrency;
            appData.settings.enableMultiCurrency = enableMultiCurrencyElement.checked;

            console.log(`💱 العملات المتعددة: ${wasEnabled ? 'كانت مفعلة' : 'كانت معطلة'} → ${appData.settings.enableMultiCurrency ? 'مفعلة الآن' : 'معطلة الآن'}`);

            // إذا تم تفعيل العملات المتعددة، حفظ أسعار الصرف
            if (appData.settings.enableMultiCurrency) {
                console.log('💰 حفظ أسعار الصرف...');

                if (!appData.settings.exchangeRates) {
                    appData.settings.exchangeRates = {};
                }

                const currencies = ['USD', 'EUR', 'SAR', 'AED', 'EGP', 'JOD', 'LBP', 'TRY', 'GBP'];
                const baseCurrency = currency;
                let savedRates = 0;

                currencies.forEach(currencyCode => {
                    if (currencyCode !== baseCurrency) {
                        const rateInput = document.getElementById(`rate_${currencyCode}`);
                        if (rateInput) {
                            const rate = parseFloat(rateInput.value) || 1;
                            appData.settings.exchangeRates[currencyCode] = rate;
                            appData.settings.exchangeRates[`${currencyCode}_updated`] = new Date().toISOString();
                            savedRates++;
                            console.log(`💱 سعر صرف ${currencyCode}: ${rate}`);
                        } else {
                            console.warn(`⚠️ لم يتم العثور على حقل سعر الصرف لـ ${currencyCode}`);
                        }
                    }
                });

                console.log(`✅ تم حفظ ${savedRates} سعر صرف`);
            } else {
                console.log('ℹ️ العملات المتعددة معطلة، لن يتم حفظ أسعار الصرف');
            }
        } else {
            console.warn('⚠️ عنصر تفعيل العملات المتعددة غير موجود');
        }

        // حفظ البيانات في localStorage
        console.log('💾 حفظ البيانات في localStorage...');

        try {
            saveData();
            console.log('✅ تم حفظ البيانات في localStorage بنجاح');

            // التحقق من الحفظ
            const savedData = localStorage.getItem('samProData');
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                if (parsedData.settings && parsedData.settings.companyName === companyName) {
                    console.log('✅ تم التحقق من حفظ البيانات بنجاح');
                } else {
                    console.error('❌ فشل في التحقق من حفظ البيانات');
                }
            }
        } catch (saveError) {
            console.error('❌ خطأ في حفظ البيانات:', saveError);
            alert('خطأ في حفظ البيانات: ' + saveError.message);
            return;
        }

        // رسالة النجاح
        const successMessage = `✅ تم حفظ إعدادات الشركة بنجاح!

📊 الإعدادات المحفوظة:
• اسم الشركة: ${companyName}
• العملة الافتراضية: ${getCurrencyName(currency)} (${getCurrencySymbol(currency)})
• معدل الضريبة: ${taxRate}%
• العملات المتعددة: ${appData.settings.enableMultiCurrency ? 'مفعلة' : 'معطلة'}

سيتم إعادة تحميل الصفحة لتطبيق التغييرات.`;

        alert(successMessage);
        console.log('🎉 تم حفظ إعدادات الشركة بنجاح');

        // إعادة تحميل الصفحة لتطبيق التغييرات
        setTimeout(() => {
            console.log('🔄 إعادة تحميل صفحة الإعدادات...');
            showPage('settings');
        }, 1000);

    } catch (error) {
        console.error('❌ خطأ عام في حفظ إعدادات الشركة:', error);
        console.error('❌ تفاصيل الخطأ:', error.stack);
        alert('حدث خطأ أثناء حفظ إعدادات الشركة: ' + error.message);
    }
}

/**
 * حفظ إعدادات النظام
 */
function saveSystemSettings(event) {
    event.preventDefault();

    appData.settings.password = document.getElementById('systemPassword').value;
    appData.settings.autoBackup = document.getElementById('autoBackup').value;

    saveData();
    alert('تم حفظ إعدادات النظام بنجاح');
}

/**
 * حفظ إعدادات الطباعة
 */
function savePrintSettings(event) {
    event.preventDefault();
    console.log('💾 حفظ إعدادات الطباعة...');

    // تهيئة إعدادات الطباعة إذا لم توجد
    if (!appData.settings.printSettings) {
        appData.settings.printSettings = {};
    }

    // حفظ إعدادات العرض
    appData.settings.printSettings.showAppName = document.getElementById('showAppName').checked;
    appData.settings.printSettings.showCompanyLogo = document.getElementById('showCompanyLogo').checked;
    appData.settings.printSettings.showPrintDate = document.getElementById('showPrintDate').checked;
    appData.settings.printSettings.showPageNumbers = document.getElementById('showPageNumbers').checked;

    // حفظ النصوص المخصصة
    appData.settings.printSettings.headerText = document.getElementById('printHeaderText').value.trim();
    appData.settings.printSettings.footerText = document.getElementById('printFooterText').value.trim();

    // حفظ إعدادات الصفحة
    appData.settings.printSettings.orientation = document.getElementById('printOrientation').value;
    appData.settings.printSettings.pageSize = document.getElementById('printPageSize').value;

    saveData();
    console.log('✅ تم حفظ إعدادات الطباعة:', appData.settings.printSettings);
    alert('تم حفظ إعدادات الطباعة بنجاح');
}

/**
 * معاينة إعدادات الطباعة
 */
function previewPrintSettings() {
    console.log('👁️ معاينة إعدادات الطباعة...');

    // جمع الإعدادات الحالية
    const settings = {
        showAppName: document.getElementById('showAppName').checked,
        showCompanyLogo: document.getElementById('showCompanyLogo').checked,
        showPrintDate: document.getElementById('showPrintDate').checked,
        showPageNumbers: document.getElementById('showPageNumbers').checked,
        headerText: document.getElementById('printHeaderText').value.trim(),
        footerText: document.getElementById('printFooterText').value.trim(),
        orientation: document.getElementById('printOrientation').value,
        pageSize: document.getElementById('printPageSize').value
    };

    // إنشاء نافذة معاينة
    const previewWindow = window.open('', '_blank', 'width=800,height=600');
    previewWindow.document.write(generatePrintPreview(settings));
    previewWindow.document.close();
}

/**
 * إنشاء معاينة الطباعة
 */
function generatePrintPreview(settings) {
    const currentDate = formatDate(new Date());
    const companyName = appData.settings.companyName || 'اسم الشركة';
    const logoUrl = appData.settings.logoUrl || '';

    return `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>معاينة إعدادات الطباعة</title>
            <style>
                @page {
                    size: ${settings.pageSize} ${settings.orientation};
                    margin: 2cm;
                }

                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    direction: rtl;
                    text-align: right;
                    margin: 0;
                    padding: 20px;
                    background: #f8f9fa;
                }

                .preview-container {
                    background: white;
                    padding: 30px;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    max-width: 800px;
                    margin: 0 auto;
                }

                .print-header {
                    text-align: center;
                    border-bottom: 2px solid #007bff;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }

                .company-logo {
                    max-height: 80px;
                    margin-bottom: 10px;
                }

                .company-name {
                    font-size: 24px;
                    font-weight: bold;
                    color: #333;
                    margin: 10px 0;
                }

                .header-text {
                    font-size: 18px;
                    color: #666;
                    margin: 10px 0;
                }

                .print-date {
                    font-size: 14px;
                    color: #888;
                    margin-top: 10px;
                }

                .content-area {
                    min-height: 400px;
                    padding: 20px 0;
                    border: 2px dashed #ddd;
                    text-align: center;
                    color: #666;
                    font-size: 18px;
                }

                .print-footer {
                    text-align: center;
                    border-top: 1px solid #ddd;
                    padding-top: 20px;
                    margin-top: 30px;
                    font-size: 14px;
                    color: #666;
                }

                .app-name {
                    font-weight: bold;
                    color: #007bff;
                }

                .page-number {
                    position: fixed;
                    bottom: 20px;
                    left: 20px;
                    font-size: 12px;
                    color: #888;
                }

                .settings-info {
                    background: #e3f2fd;
                    padding: 15px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                    font-size: 14px;
                }

                .settings-info h4 {
                    margin: 0 0 10px 0;
                    color: #1976d2;
                }

                .setting-item {
                    margin: 5px 0;
                }

                .enabled {
                    color: #4caf50;
                    font-weight: bold;
                }

                .disabled {
                    color: #f44336;
                }

                @media print {
                    body {
                        background: white;
                    }
                    .preview-container {
                        box-shadow: none;
                        border: none;
                    }
                    .settings-info {
                        display: none;
                    }
                }
            </style>
        </head>
        <body>
            <div class="preview-container">
                <!-- معلومات الإعدادات -->
                <div class="settings-info">
                    <h4>إعدادات الطباعة الحالية:</h4>
                    <div class="setting-item">اسم التطبيق: <span class="${settings.showAppName ? 'enabled' : 'disabled'}">${settings.showAppName ? 'مفعل' : 'معطل'}</span></div>
                    <div class="setting-item">شعار الشركة: <span class="${settings.showCompanyLogo ? 'enabled' : 'disabled'}">${settings.showCompanyLogo ? 'مفعل' : 'معطل'}</span></div>
                    <div class="setting-item">تاريخ الطباعة: <span class="${settings.showPrintDate ? 'enabled' : 'disabled'}">${settings.showPrintDate ? 'مفعل' : 'معطل'}</span></div>
                    <div class="setting-item">أرقام الصفحات: <span class="${settings.showPageNumbers ? 'enabled' : 'disabled'}">${settings.showPageNumbers ? 'مفعل' : 'معطل'}</span></div>
                    <div class="setting-item">اتجاه الطباعة: <strong>${settings.orientation === 'portrait' ? 'عمودي' : 'أفقي'}</strong></div>
                    <div class="setting-item">حجم الورق: <strong>${settings.pageSize}</strong></div>
                </div>

                <!-- رأس الصفحة -->
                <div class="print-header">
                    ${settings.showCompanyLogo && logoUrl ? `<img src="${logoUrl}" alt="شعار الشركة" class="company-logo">` : ''}
                    <div class="company-name">${companyName}</div>
                    ${settings.headerText ? `<div class="header-text">${settings.headerText}</div>` : ''}
                    ${settings.showPrintDate ? `<div class="print-date">تاريخ الطباعة: ${currentDate}</div>` : ''}
                </div>

                <!-- منطقة المحتوى -->
                <div class="content-area">
                    <p>هذه معاينة لشكل الملفات المطبوعة</p>
                    <p>سيظهر محتوى التقارير والفواتير هنا</p>
                </div>

                <!-- تذييل الصفحة -->
                <div class="print-footer">
                    ${settings.footerText ? `<div>${settings.footerText}</div>` : ''}
                    ${settings.showAppName ? `<div class="app-name">تم الإنشاء بواسطة SAM PRO</div>` : ''}
                </div>

                <!-- رقم الصفحة -->
                ${settings.showPageNumbers ? `<div class="page-number">صفحة 1</div>` : ''}
            </div>

            <script>
                // إضافة زر طباعة
                document.addEventListener('DOMContentLoaded', function() {
                    const printBtn = document.createElement('button');
                    printBtn.innerHTML = '🖨️ طباعة المعاينة';
                    printBtn.style.cssText = 'position: fixed; top: 20px; left: 20px; padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; z-index: 1000;';
                    printBtn.onclick = () => window.print();
                    document.body.appendChild(printBtn);
                });
            </script>
        </body>
        </html>
    `;
}

/**
 * طباعة متقدمة مع تحديد المحتوى
 */
function advancedPrint(contentType, data = null) {
    console.log('🖨️ بدء الطباعة المتقدمة...', { contentType, data });

    // إنشاء نافذة اختيار المحتوى
    showPrintSelectionDialog(contentType, data);
}

/**
 * عرض نافذة اختيار محتوى الطباعة
 */
function showPrintSelectionDialog(contentType, data) {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'printSelectionModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-print me-2"></i>
                        خيارات الطباعة المتقدمة
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="mb-3">
                                <i class="fas fa-list-check me-2"></i>
                                اختر المحتوى المراد طباعته:
                            </h6>
                            <div id="printContentOptions">
                                ${generatePrintContentOptions(contentType, data)}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="mb-3">
                                <i class="fas fa-cogs me-2"></i>
                                إعدادات الطباعة:
                            </h6>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="printShowAppName" ${appData.settings.printSettings?.showAppName !== false ? 'checked' : ''}>
                                    <label class="form-check-label" for="printShowAppName">
                                        إظهار اسم التطبيق
                                    </label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="printShowDate" ${appData.settings.printSettings?.showPrintDate !== false ? 'checked' : ''}>
                                    <label class="form-check-label" for="printShowDate">
                                        إظهار تاريخ الطباعة
                                    </label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="printShowPageNumbers" ${appData.settings.printSettings?.showPageNumbers !== false ? 'checked' : ''}>
                                    <label class="form-check-label" for="printShowPageNumbers">
                                        إظهار أرقام الصفحات
                                    </label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="printOrientation" class="form-label">اتجاه الطباعة:</label>
                                <select class="form-select" id="printOrientation">
                                    <option value="portrait">عمودي</option>
                                    <option value="landscape">أفقي</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>
                        إلغاء
                    </button>
                    <button type="button" class="btn btn-outline-info" onclick="previewSelectedContent()">
                        <i class="fas fa-eye me-2"></i>
                        معاينة
                    </button>
                    <button type="button" class="btn btn-primary" onclick="printSelectedContent()">
                        <i class="fas fa-print me-2"></i>
                        طباعة
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة المودال عند الإغلاق
    modal.addEventListener('hidden.bs.modal', () => {
        document.body.removeChild(modal);
    });
}

/**
 * إنشاء خيارات محتوى الطباعة
 */
function generatePrintContentOptions(contentType, data) {
    let options = '';

    switch (contentType) {
        case 'invoice':
            options = `
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printInvoiceHeader" checked>
                    <label class="form-check-label" for="printInvoiceHeader">
                        رأس الفاتورة (معلومات الشركة والعميل)
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printInvoiceItems" checked>
                    <label class="form-check-label" for="printInvoiceItems">
                        عناصر الفاتورة
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printInvoiceTotals" checked>
                    <label class="form-check-label" for="printInvoiceTotals">
                        الإجماليات والضرائب
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printInvoiceNotes">
                    <label class="form-check-label" for="printInvoiceNotes">
                        الملاحظات
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printInvoiceSignature">
                    <label class="form-check-label" for="printInvoiceSignature">
                        مكان التوقيع
                    </label>
                </div>
            `;
            break;

        case 'report':
            options = `
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printReportTitle" checked>
                    <label class="form-check-label" for="printReportTitle">
                        عنوان التقرير
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printReportSummary" checked>
                    <label class="form-check-label" for="printReportSummary">
                        ملخص التقرير
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printReportDetails" checked>
                    <label class="form-check-label" for="printReportDetails">
                        تفاصيل التقرير
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printReportCharts">
                    <label class="form-check-label" for="printReportCharts">
                        الرسوم البيانية
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printReportFooter">
                    <label class="form-check-label" for="printReportFooter">
                        تذييل التقرير
                    </label>
                </div>
            `;
            break;

        case 'list':
            options = `
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printListHeader" checked>
                    <label class="form-check-label" for="printListHeader">
                        رأس القائمة
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printListItems" checked>
                    <label class="form-check-label" for="printListItems">
                        عناصر القائمة
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printListSummary">
                    <label class="form-check-label" for="printListSummary">
                        ملخص القائمة
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printListNumbers" checked>
                    <label class="form-check-label" for="printListNumbers">
                        أرقام العناصر
                    </label>
                </div>
            `;
            break;

        default:
            options = `
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printFullContent" checked>
                    <label class="form-check-label" for="printFullContent">
                        المحتوى كاملاً
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="printSelectedOnly">
                    <label class="form-check-label" for="printSelectedOnly">
                        المحتوى المحدد فقط
                    </label>
                </div>
            `;
    }

    return options;
}

/**
 * معاينة المحتوى المحدد
 */
function previewSelectedContent() {
    console.log('👁️ معاينة المحتوى المحدد...');

    const selectedOptions = getSelectedPrintOptions();
    const printSettings = getCurrentPrintSettings();

    // إنشاء نافذة معاينة
    const previewWindow = window.open('', '_blank', 'width=900,height=700');
    previewWindow.document.write(generateSelectedContentPreview(selectedOptions, printSettings));
    previewWindow.document.close();
}

/**
 * طباعة المحتوى المحدد
 */
function printSelectedContent() {
    console.log('🖨️ طباعة المحتوى المحدد...');

    const selectedOptions = getSelectedPrintOptions();
    const printSettings = getCurrentPrintSettings();

    // إنشاء نافذة طباعة
    const printWindow = window.open('', '_blank', 'width=900,height=700');
    printWindow.document.write(generatePrintableContent(selectedOptions, printSettings));
    printWindow.document.close();

    // طباعة تلقائية
    printWindow.onload = function() {
        printWindow.print();
        setTimeout(() => {
            printWindow.close();
        }, 1000);
    };

    // إغلاق مودال الخيارات
    const modal = bootstrap.Modal.getInstance(document.getElementById('printSelectionModal'));
    if (modal) {
        modal.hide();
    }
}

/**
 * الحصول على خيارات الطباعة المحددة
 */
function getSelectedPrintOptions() {
    const options = {};
    const checkboxes = document.querySelectorAll('#printSelectionModal input[type="checkbox"]');

    checkboxes.forEach(checkbox => {
        options[checkbox.id] = checkbox.checked;
    });

    return options;
}

/**
 * الحصول على إعدادات الطباعة الحالية
 */
function getCurrentPrintSettings() {
    return {
        showAppName: document.getElementById('printShowAppName')?.checked || false,
        showDate: document.getElementById('printShowDate')?.checked || false,
        showPageNumbers: document.getElementById('printShowPageNumbers')?.checked || false,
        orientation: document.getElementById('printOrientation')?.value || 'portrait',
        headerText: appData.settings.printSettings?.headerText || '',
        footerText: appData.settings.printSettings?.footerText || '',
        pageSize: appData.settings.printSettings?.pageSize || 'A4'
    };
}

/**
 * إنشاء محتوى قابل للطباعة
 */
function generatePrintableContent(selectedOptions, printSettings) {
    const currentDate = formatDate(new Date());
    const companyName = appData.settings.companyName || 'اسم الشركة';

    return `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>طباعة - ${companyName}</title>
            <style>
                @page {
                    size: ${printSettings.pageSize} ${printSettings.orientation};
                    margin: 1.5cm;
                }

                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    direction: rtl;
                    text-align: right;
                    margin: 0;
                    padding: 0;
                    font-size: 14px;
                    line-height: 1.6;
                    color: #333;
                }

                .print-header {
                    text-align: center;
                    border-bottom: 2px solid #007bff;
                    padding-bottom: 15px;
                    margin-bottom: 20px;
                }

                .company-name {
                    font-size: 22px;
                    font-weight: bold;
                    color: #333;
                    margin: 10px 0;
                }

                .header-text {
                    font-size: 16px;
                    color: #666;
                    margin: 5px 0;
                }

                .print-date {
                    font-size: 12px;
                    color: #888;
                    margin-top: 10px;
                }

                .content-section {
                    margin: 20px 0;
                    page-break-inside: avoid;
                }

                .section-title {
                    font-size: 18px;
                    font-weight: bold;
                    color: #007bff;
                    border-bottom: 1px solid #ddd;
                    padding-bottom: 5px;
                    margin-bottom: 15px;
                }

                .invoice-info {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 20px;
                }

                .invoice-info div {
                    flex: 1;
                }

                .items-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }

                .items-table th,
                .items-table td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: center;
                }

                .items-table th {
                    background-color: #f8f9fa;
                    font-weight: bold;
                }

                .totals-section {
                    margin-top: 20px;
                    text-align: left;
                }

                .total-row {
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    padding: 5px 0;
                }

                .total-row.final {
                    border-top: 2px solid #007bff;
                    font-weight: bold;
                    font-size: 16px;
                }

                .print-footer {
                    text-align: center;
                    border-top: 1px solid #ddd;
                    padding-top: 15px;
                    margin-top: 30px;
                    font-size: 12px;
                    color: #666;
                }

                .app-name {
                    font-weight: bold;
                    color: #007bff;
                }

                .page-number {
                    position: fixed;
                    bottom: 10px;
                    left: 10px;
                    font-size: 10px;
                    color: #888;
                }

                .signature-area {
                    margin-top: 40px;
                    display: flex;
                    justify-content: space-between;
                }

                .signature-box {
                    text-align: center;
                    width: 200px;
                }

                .signature-line {
                    border-top: 1px solid #333;
                    margin-top: 50px;
                    padding-top: 5px;
                }

                @media print {
                    body {
                        -webkit-print-color-adjust: exact;
                        print-color-adjust: exact;
                    }

                    .no-print {
                        display: none !important;
                    }
                }
            </style>
        </head>
        <body>
            ${generatePrintHeader(printSettings, companyName, currentDate)}
            ${generatePrintContent(selectedOptions)}
            ${generatePrintFooter(printSettings)}
            ${printSettings.showPageNumbers ? '<div class="page-number">صفحة 1</div>' : ''}
        </body>
        </html>
    `;
}

/**
 * إنشاء رأس الطباعة
 */
function generatePrintHeader(printSettings, companyName, currentDate) {
    let header = '';

    if (printSettings.showDate || printSettings.headerText || companyName) {
        header = `
            <div class="print-header">
                <div class="company-name">${companyName}</div>
                ${printSettings.headerText ? `<div class="header-text">${printSettings.headerText}</div>` : ''}
                ${printSettings.showDate ? `<div class="print-date">تاريخ الطباعة: ${currentDate}</div>` : ''}
            </div>
        `;
    }

    return header;
}

/**
 * إنشاء تذييل الطباعة
 */
function generatePrintFooter(printSettings) {
    let footer = '';

    if (printSettings.showAppName || printSettings.footerText) {
        footer = `
            <div class="print-footer">
                ${printSettings.footerText ? `<div>${printSettings.footerText}</div>` : ''}
                ${printSettings.showAppName ? `<div class="app-name">تم الإنشاء بواسطة SAM PRO</div>` : ''}
            </div>
        `;
    }

    return footer;
}

/**
 * إنشاء محتوى الطباعة حسب الخيارات المحددة
 */
function generatePrintContent(selectedOptions) {
    let content = '<div class="content-section">';

    // محتوى تجريبي - يمكن تخصيصه حسب نوع المحتوى
    if (selectedOptions.printInvoiceHeader || selectedOptions.printListHeader || selectedOptions.printReportTitle) {
        content += `
            <div class="section-title">معلومات الفاتورة</div>
            <div class="invoice-info">
                <div>
                    <strong>رقم الفاتورة:</strong> INV-001<br>
                    <strong>التاريخ:</strong> ${formatDate(new Date())}
                </div>
                <div>
                    <strong>العميل:</strong> أحمد محمد<br>
                    <strong>الهاتف:</strong> 0991234567
                </div>
            </div>
        `;
    }

    if (selectedOptions.printInvoiceItems || selectedOptions.printListItems || selectedOptions.printReportDetails) {
        content += `
            <div class="section-title">العناصر</div>
            <table class="items-table">
                <thead>
                    <tr>
                        <th>الرقم</th>
                        <th>الصنف</th>
                        <th>الكمية</th>
                        <th>السعر</th>
                        <th>المجموع</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>لابتوب ديل</td>
                        <td>1</td>
                        <td>1,000.00 ل.س</td>
                        <td>1,000.00 ل.س</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>ماوس لاسلكي</td>
                        <td>2</td>
                        <td>25.00 ل.س</td>
                        <td>50.00 ل.س</td>
                    </tr>
                </tbody>
            </table>
        `;
    }

    if (selectedOptions.printInvoiceTotals || selectedOptions.printListSummary || selectedOptions.printReportSummary) {
        content += `
            <div class="totals-section">
                <div class="total-row">
                    <span>المجموع الفرعي:</span>
                    <span>1,050.00 ل.س</span>
                </div>
                <div class="total-row">
                    <span>الخصم:</span>
                    <span>0.00 ل.س</span>
                </div>
                <div class="total-row">
                    <span>الضريبة:</span>
                    <span>0.00 ل.س</span>
                </div>
                <div class="total-row final">
                    <span>المجموع الإجمالي:</span>
                    <span>1,050.00 ل.س</span>
                </div>
            </div>
        `;
    }

    if (selectedOptions.printInvoiceSignature) {
        content += `
            <div class="signature-area">
                <div class="signature-box">
                    <div class="signature-line">توقيع العميل</div>
                </div>
                <div class="signature-box">
                    <div class="signature-line">توقيع المندوب</div>
                </div>
            </div>
        `;
    }

    if (selectedOptions.printInvoiceNotes) {
        content += `
            <div class="section-title">ملاحظات</div>
            <div style="min-height: 60px; border: 1px dashed #ddd; padding: 10px;">
                شكراً لتعاملكم معنا
            </div>
        `;
    }

    content += '</div>';
    return content;
}

/**
 * إنشاء معاينة للمحتوى المحدد
 */
function generateSelectedContentPreview(selectedOptions, printSettings) {
    const currentDate = formatDate(new Date());
    const companyName = appData.settings.companyName || 'اسم الشركة';

    return `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>معاينة الطباعة - ${companyName}</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    direction: rtl;
                    text-align: right;
                    margin: 0;
                    padding: 20px;
                    background: #f8f9fa;
                    font-size: 14px;
                    line-height: 1.6;
                    color: #333;
                }

                .preview-container {
                    background: white;
                    padding: 30px;
                    border-radius: 8px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    max-width: 800px;
                    margin: 0 auto;
                    min-height: 600px;
                }

                .preview-header {
                    background: #e3f2fd;
                    padding: 15px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                    text-align: center;
                }

                .preview-title {
                    font-size: 18px;
                    font-weight: bold;
                    color: #1976d2;
                    margin: 0;
                }

                .selected-options {
                    background: #f1f8e9;
                    padding: 10px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                    font-size: 12px;
                }

                .selected-options h6 {
                    margin: 0 0 10px 0;
                    color: #388e3c;
                }

                .option-item {
                    display: inline-block;
                    background: #4caf50;
                    color: white;
                    padding: 2px 8px;
                    border-radius: 3px;
                    margin: 2px;
                    font-size: 11px;
                }

                .print-controls {
                    position: fixed;
                    top: 20px;
                    left: 20px;
                    z-index: 1000;
                }

                .print-controls button {
                    margin: 5px;
                    padding: 10px 15px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 14px;
                }

                .btn-print {
                    background: #007bff;
                    color: white;
                }

                .btn-close {
                    background: #6c757d;
                    color: white;
                }

                /* استيراد أنماط الطباعة */
                .print-header {
                    text-align: center;
                    border-bottom: 2px solid #007bff;
                    padding-bottom: 15px;
                    margin-bottom: 20px;
                }

                .company-name {
                    font-size: 22px;
                    font-weight: bold;
                    color: #333;
                    margin: 10px 0;
                }

                .header-text {
                    font-size: 16px;
                    color: #666;
                    margin: 5px 0;
                }

                .print-date {
                    font-size: 12px;
                    color: #888;
                    margin-top: 10px;
                }

                .content-section {
                    margin: 20px 0;
                }

                .section-title {
                    font-size: 18px;
                    font-weight: bold;
                    color: #007bff;
                    border-bottom: 1px solid #ddd;
                    padding-bottom: 5px;
                    margin-bottom: 15px;
                }

                .invoice-info {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 20px;
                }

                .invoice-info div {
                    flex: 1;
                }

                .items-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }

                .items-table th,
                .items-table td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: center;
                }

                .items-table th {
                    background-color: #f8f9fa;
                    font-weight: bold;
                }

                .totals-section {
                    margin-top: 20px;
                    text-align: left;
                }

                .total-row {
                    display: flex;
                    justify-content: space-between;
                    margin: 5px 0;
                    padding: 5px 0;
                }

                .total-row.final {
                    border-top: 2px solid #007bff;
                    font-weight: bold;
                    font-size: 16px;
                }

                .print-footer {
                    text-align: center;
                    border-top: 1px solid #ddd;
                    padding-top: 15px;
                    margin-top: 30px;
                    font-size: 12px;
                    color: #666;
                }

                .app-name {
                    font-weight: bold;
                    color: #007bff;
                }

                .signature-area {
                    margin-top: 40px;
                    display: flex;
                    justify-content: space-between;
                }

                .signature-box {
                    text-align: center;
                    width: 200px;
                }

                .signature-line {
                    border-top: 1px solid #333;
                    margin-top: 50px;
                    padding-top: 5px;
                }

                @media print {
                    body {
                        background: white;
                    }
                    .preview-container {
                        box-shadow: none;
                        border: none;
                    }
                    .preview-header,
                    .selected-options,
                    .print-controls {
                        display: none !important;
                    }
                }
            </style>
        </head>
        <body>
            <div class="print-controls">
                <button class="btn-print" onclick="window.print()">🖨️ طباعة</button>
                <button class="btn-close" onclick="window.close()">✖️ إغلاق</button>
            </div>

            <div class="preview-container">
                <div class="preview-header">
                    <h3 class="preview-title">معاينة الطباعة</h3>
                    <p>هذه معاينة للمحتوى الذي سيتم طباعته</p>
                </div>

                <div class="selected-options">
                    <h6>الخيارات المحددة:</h6>
                    ${generateSelectedOptionsDisplay(selectedOptions)}
                </div>

                ${generatePrintHeader(printSettings, companyName, currentDate)}
                ${generatePrintContent(selectedOptions)}
                ${generatePrintFooter(printSettings)}
            </div>
        </body>
        </html>
    `;
}

/**
 * عرض الخيارات المحددة
 */
function generateSelectedOptionsDisplay(selectedOptions) {
    let display = '';

    Object.keys(selectedOptions).forEach(key => {
        if (selectedOptions[key]) {
            const optionName = getOptionDisplayName(key);
            display += `<span class="option-item">${optionName}</span>`;
        }
    });

    return display || '<span class="option-item">لا توجد خيارات محددة</span>';
}

/**
 * الحصول على اسم الخيار للعرض
 */
function getOptionDisplayName(optionKey) {
    const names = {
        'printInvoiceHeader': 'رأس الفاتورة',
        'printInvoiceItems': 'عناصر الفاتورة',
        'printInvoiceTotals': 'الإجماليات',
        'printInvoiceNotes': 'الملاحظات',
        'printInvoiceSignature': 'التوقيع',
        'printReportTitle': 'عنوان التقرير',
        'printReportSummary': 'ملخص التقرير',
        'printReportDetails': 'تفاصيل التقرير',
        'printReportCharts': 'الرسوم البيانية',
        'printReportFooter': 'تذييل التقرير',
        'printListHeader': 'رأس القائمة',
        'printListItems': 'عناصر القائمة',
        'printListSummary': 'ملخص القائمة',
        'printListNumbers': 'أرقام العناصر',
        'printShowAppName': 'اسم التطبيق',
        'printShowDate': 'تاريخ الطباعة',
        'printShowPageNumbers': 'أرقام الصفحات'
    };

    return names[optionKey] || optionKey;
}

/**
 * صفحة كشف دفعات العميل
 */
function getCustomerPaymentsReportHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-money-bill-wave me-2"></i>
                        كشف دفعات العميل
                    </h1>
                    <div>
                        <button class="btn btn-outline-info me-2" onclick="advancedPrint('report')">
                            <i class="fas fa-print me-2"></i>
                            طباعة متقدمة
                        </button>
                        <button class="btn btn-success me-2" onclick="exportCustomerPaymentsReport('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-primary" onclick="exportCustomerPaymentsReport('print')">
                            <i class="fas fa-print me-2"></i>
                            طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر التقرير -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر التقرير
                </h6>
            </div>
            <div class="card-body">
                <form id="customerPaymentsReportForm" onsubmit="generateCustomerPaymentsReport(event)">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="customerPaymentsFromDate" class="form-label">من تاريخ</label>
                            <input type="date" class="form-control" id="customerPaymentsFromDate" required>
                        </div>
                        <div class="col-md-3">
                            <label for="customerPaymentsToDate" class="form-label">إلى تاريخ</label>
                            <input type="date" class="form-control" id="customerPaymentsToDate" required>
                        </div>
                        <div class="col-md-4">
                            <label for="customerPaymentsCustomer" class="form-label">العميل</label>
                            <select class="form-select" id="customerPaymentsCustomer">
                                <option value="">جميع العملاء</option>
                                ${appData.customers.map(customer =>
                                    `<option value="${customer.id}">${customer.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-chart-bar me-2"></i>
                                    إنشاء التقرير
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- نتائج التقرير -->
        <div class="card shadow">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-table me-2"></i>
                    نتائج كشف دفعات العميل
                </h6>
            </div>
            <div class="card-body">
                <div id="customerPaymentsReportResults">
                    <div class="text-center text-muted py-5">
                        <i class="fas fa-chart-bar fa-3x mb-3"></i>
                        <p>اختر الفلاتر المطلوبة واضغط "إنشاء التقرير" لعرض النتائج</p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة كشف دفعات المورد
 */
function getSupplierPaymentsReportHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-money-bill-wave me-2"></i>
                        كشف دفعات المورد
                    </h1>
                    <div>
                        <button class="btn btn-outline-info me-2" onclick="advancedPrint('report')">
                            <i class="fas fa-print me-2"></i>
                            طباعة متقدمة
                        </button>
                        <button class="btn btn-success me-2" onclick="exportSupplierPaymentsReport('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-primary" onclick="exportSupplierPaymentsReport('print')">
                            <i class="fas fa-print me-2"></i>
                            طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر التقرير -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر التقرير
                </h6>
            </div>
            <div class="card-body">
                <form id="supplierPaymentsReportForm" onsubmit="generateSupplierPaymentsReport(event)">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="supplierPaymentsFromDate" class="form-label">من تاريخ</label>
                            <input type="date" class="form-control" id="supplierPaymentsFromDate" required>
                        </div>
                        <div class="col-md-3">
                            <label for="supplierPaymentsToDate" class="form-label">إلى تاريخ</label>
                            <input type="date" class="form-control" id="supplierPaymentsToDate" required>
                        </div>
                        <div class="col-md-4">
                            <label for="supplierPaymentsSupplier" class="form-label">المورد</label>
                            <select class="form-select" id="supplierPaymentsSupplier">
                                <option value="">جميع الموردين</option>
                                ${appData.suppliers.map(supplier =>
                                    `<option value="${supplier.id}">${supplier.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-chart-bar me-2"></i>
                                    إنشاء التقرير
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- نتائج التقرير -->
        <div class="card shadow">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-table me-2"></i>
                    نتائج كشف دفعات المورد
                </h6>
            </div>
            <div class="card-body">
                <div id="supplierPaymentsReportResults">
                    <div class="text-center text-muted py-5">
                        <i class="fas fa-chart-bar fa-3x mb-3"></i>
                        <p>اختر الفلاتر المطلوبة واضغط "إنشاء التقرير" لعرض النتائج</p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة كشف حساب المورد
 */
function getSupplierStatementHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-file-invoice me-2"></i>
                        كشف حساب المورد
                    </h1>
                    <div>
                        <button class="btn btn-outline-info me-2" onclick="advancedPrint('report')">
                            <i class="fas fa-print me-2"></i>
                            طباعة متقدمة
                        </button>
                        <button class="btn btn-success me-2" onclick="exportSupplierStatement('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-primary" onclick="exportSupplierStatement('print')">
                            <i class="fas fa-print me-2"></i>
                            طباعة الكشف
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- اختيار المورد -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-user-tie me-2"></i>
                    اختيار المورد والفترة
                </h6>
            </div>
            <div class="card-body">
                <form id="supplierStatementForm" onsubmit="generateSupplierStatement(event)">
                    <div class="row">
                        <div class="col-md-4">
                            <label for="supplierStatementSupplier" class="form-label">المورد *</label>
                            <select class="form-select" id="supplierStatementSupplier" required>
                                <option value="">اختر المورد</option>
                                ${appData.suppliers.map(supplier =>
                                    `<option value="${supplier.id}">${supplier.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="supplierStatementFromDate" class="form-label">من تاريخ</label>
                            <input type="date" class="form-control" id="supplierStatementFromDate">
                        </div>
                        <div class="col-md-3">
                            <label for="supplierStatementToDate" class="form-label">إلى تاريخ</label>
                            <input type="date" class="form-control" id="supplierStatementToDate">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <div>
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-file-alt me-2"></i>
                                    إنشاء الكشف
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- نتائج كشف الحساب -->
        <div class="card shadow">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-table me-2"></i>
                    كشف حساب المورد
                </h6>
            </div>
            <div class="card-body">
                <div id="supplierStatementResults">
                    <div class="text-center text-muted py-5">
                        <i class="fas fa-file-alt fa-3x mb-3"></i>
                        <p>اختر المورد واضغط "إنشاء الكشف" لعرض كشف الحساب</p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * إنشاء تقرير دفعات العميل
 */
function generateCustomerPaymentsReport(event) {
    event.preventDefault();
    console.log('📊 إنشاء تقرير دفعات العميل...');

    const fromDate = document.getElementById('customerPaymentsFromDate').value;
    const toDate = document.getElementById('customerPaymentsToDate').value;
    const customerId = document.getElementById('customerPaymentsCustomer').value;

    // فلترة البيانات
    let payments = appData.payments || [];

    // فلترة حسب التاريخ
    if (fromDate) {
        payments = payments.filter(payment => payment.paymentDate >= fromDate);
    }
    if (toDate) {
        payments = payments.filter(payment => payment.paymentDate <= toDate);
    }

    // فلترة حسب العميل
    if (customerId) {
        payments = payments.filter(payment => payment.customerId == customerId);
    }

    // فلترة دفعات العملاء فقط
    payments = payments.filter(payment => payment.customerId);

    // إنشاء HTML للنتائج
    const resultsHTML = generateCustomerPaymentsReportHTML(payments, fromDate, toDate, customerId);
    document.getElementById('customerPaymentsReportResults').innerHTML = resultsHTML;

    console.log('✅ تم إنشاء تقرير دفعات العميل');
}

/**
 * إنشاء تقرير دفعات المورد
 */
function generateSupplierPaymentsReport(event) {
    event.preventDefault();
    console.log('📊 إنشاء تقرير دفعات المورد...');

    const fromDate = document.getElementById('supplierPaymentsFromDate').value;
    const toDate = document.getElementById('supplierPaymentsToDate').value;
    const supplierId = document.getElementById('supplierPaymentsSupplier').value;

    // فلترة البيانات
    let payments = appData.payments || [];

    // فلترة حسب التاريخ
    if (fromDate) {
        payments = payments.filter(payment => payment.paymentDate >= fromDate);
    }
    if (toDate) {
        payments = payments.filter(payment => payment.paymentDate <= toDate);
    }

    // فلترة حسب المورد
    if (supplierId) {
        payments = payments.filter(payment => payment.supplierId == supplierId);
    }

    // فلترة دفعات الموردين فقط
    payments = payments.filter(payment => payment.supplierId);

    // إنشاء HTML للنتائج
    const resultsHTML = generateSupplierPaymentsReportHTML(payments, fromDate, toDate, supplierId);
    document.getElementById('supplierPaymentsReportResults').innerHTML = resultsHTML;

    console.log('✅ تم إنشاء تقرير دفعات المورد');
}

/**
 * إنشاء كشف حساب المورد
 */
function generateSupplierStatement(event) {
    event.preventDefault();
    console.log('📊 إنشاء كشف حساب المورد...');

    const supplierId = document.getElementById('supplierStatementSupplier').value;
    const fromDate = document.getElementById('supplierStatementFromDate').value;
    const toDate = document.getElementById('supplierStatementToDate').value;

    if (!supplierId) {
        alert('يرجى اختيار المورد');
        return;
    }

    const supplier = appData.suppliers.find(s => s.id == supplierId);
    if (!supplier) {
        alert('المورد غير موجود');
        return;
    }

    // جمع المعاملات
    let transactions = [];

    // إضافة فواتير المشتريات
    const purchaseInvoices = appData.invoices.filter(inv =>
        inv.invoiceType === 'purchase' &&
        inv.supplierId == supplierId &&
        (!fromDate || inv.invoiceDate >= fromDate) &&
        (!toDate || inv.invoiceDate <= toDate)
    );

    purchaseInvoices.forEach(invoice => {
        transactions.push({
            date: invoice.invoiceDate,
            type: 'invoice',
            description: `فاتورة مشتريات رقم ${invoice.invoiceNumber}`,
            debit: invoice.totalAmount,
            credit: 0,
            balance: 0,
            reference: invoice.id
        });
    });

    // إضافة المدفوعات
    const supplierPayments = (appData.payments || []).filter(payment =>
        payment.supplierId == supplierId &&
        (!fromDate || payment.paymentDate >= fromDate) &&
        (!toDate || payment.paymentDate <= toDate)
    );

    supplierPayments.forEach(payment => {
        transactions.push({
            date: payment.paymentDate,
            type: 'payment',
            description: `دفعة رقم ${payment.paymentNumber || payment.id}`,
            debit: 0,
            credit: payment.amount,
            balance: 0,
            reference: payment.id
        });
    });

    // ترتيب المعاملات حسب التاريخ
    transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

    // حساب الأرصدة
    let runningBalance = 0;
    transactions.forEach(transaction => {
        runningBalance += transaction.debit - transaction.credit;
        transaction.balance = runningBalance;
    });

    // إنشاء HTML للنتائج
    const resultsHTML = generateSupplierStatementHTML(supplier, transactions, fromDate, toDate);
    document.getElementById('supplierStatementResults').innerHTML = resultsHTML;

    console.log('✅ تم إنشاء كشف حساب المورد');
}

/**
 * إنشاء HTML لتقرير دفعات العميل
 */
function generateCustomerPaymentsReportHTML(payments, fromDate, toDate, customerId) {
    const selectedCustomer = customerId ? appData.customers.find(c => c.id == customerId) : null;
    const totalAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);

    let html = `
        <div class="report-header mb-4">
            <div class="row">
                <div class="col-md-6">
                    <h5>كشف دفعات العميل</h5>
                    <p class="text-muted mb-0">
                        ${selectedCustomer ? `العميل: ${selectedCustomer.name}` : 'جميع العملاء'}
                    </p>
                    ${fromDate || toDate ? `<p class="text-muted mb-0">الفترة: ${fromDate || 'البداية'} - ${toDate || 'النهاية'}</p>` : ''}
                </div>
                <div class="col-md-6 text-end">
                    <div class="alert alert-info">
                        <strong>إجمالي الدفعات: ${formatCurrency(totalAmount)}</strong><br>
                        <small>عدد الدفعات: ${payments.length}</small>
                    </div>
                </div>
            </div>
        </div>
    `;

    if (payments.length === 0) {
        html += `
            <div class="text-center text-muted py-5">
                <i class="fas fa-inbox fa-3x mb-3"></i>
                <p>لا توجد دفعات في الفترة المحددة</p>
            </div>
        `;
    } else {
        html += `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>رقم الدفعة</th>
                            <th>التاريخ</th>
                            <th>العميل</th>
                            <th>المبلغ</th>
                            <th>طريقة الدفع</th>
                            <th>الملاحظات</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        payments.forEach(payment => {
            const customer = appData.customers.find(c => c.id === payment.customerId);
            html += `
                <tr>
                    <td>${payment.paymentNumber || payment.id}</td>
                    <td>${payment.paymentDate}</td>
                    <td>${customer ? customer.name : '-'}</td>
                    <td class="text-end">${formatCurrency(payment.amount)}</td>
                    <td>${getPaymentMethodText(payment.paymentMethod)}</td>
                    <td>${payment.notes || '-'}</td>
                </tr>
            `;
        });

        html += `
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <th colspan="3">الإجمالي</th>
                            <th class="text-end">${formatCurrency(totalAmount)}</th>
                            <th colspan="2"></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        `;
    }

    return html;
}

/**
 * إنشاء HTML لتقرير دفعات المورد
 */
function generateSupplierPaymentsReportHTML(payments, fromDate, toDate, supplierId) {
    const selectedSupplier = supplierId ? appData.suppliers.find(s => s.id == supplierId) : null;
    const totalAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);

    let html = `
        <div class="report-header mb-4">
            <div class="row">
                <div class="col-md-6">
                    <h5>كشف دفعات المورد</h5>
                    <p class="text-muted mb-0">
                        ${selectedSupplier ? `المورد: ${selectedSupplier.name}` : 'جميع الموردين'}
                    </p>
                    ${fromDate || toDate ? `<p class="text-muted mb-0">الفترة: ${fromDate || 'البداية'} - ${toDate || 'النهاية'}</p>` : ''}
                </div>
                <div class="col-md-6 text-end">
                    <div class="alert alert-warning">
                        <strong>إجمالي الدفعات: ${formatCurrency(totalAmount)}</strong><br>
                        <small>عدد الدفعات: ${payments.length}</small>
                    </div>
                </div>
            </div>
        </div>
    `;

    if (payments.length === 0) {
        html += `
            <div class="text-center text-muted py-5">
                <i class="fas fa-inbox fa-3x mb-3"></i>
                <p>لا توجد دفعات في الفترة المحددة</p>
            </div>
        `;
    } else {
        html += `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>رقم الدفعة</th>
                            <th>التاريخ</th>
                            <th>المورد</th>
                            <th>المبلغ</th>
                            <th>طريقة الدفع</th>
                            <th>الملاحظات</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        payments.forEach(payment => {
            const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
            html += `
                <tr>
                    <td>${payment.paymentNumber || payment.id}</td>
                    <td>${payment.paymentDate}</td>
                    <td>${supplier ? supplier.name : '-'}</td>
                    <td class="text-end">${formatCurrency(payment.amount)}</td>
                    <td>${getPaymentMethodText(payment.paymentMethod)}</td>
                    <td>${payment.notes || '-'}</td>
                </tr>
            `;
        });

        html += `
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <th colspan="3">الإجمالي</th>
                            <th class="text-end">${formatCurrency(totalAmount)}</th>
                            <th colspan="2"></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        `;
    }

    return html;
}

/**
 * إنشاء HTML لكشف حساب المورد
 */
function generateSupplierStatementHTML(supplier, transactions, fromDate, toDate) {
    const finalBalance = transactions.length > 0 ? transactions[transactions.length - 1].balance : 0;
    const totalDebits = transactions.reduce((sum, t) => sum + t.debit, 0);
    const totalCredits = transactions.reduce((sum, t) => sum + t.credit, 0);

    let html = `
        <div class="report-header mb-4">
            <div class="row">
                <div class="col-md-6">
                    <h5>كشف حساب المورد</h5>
                    <div class="supplier-info">
                        <p class="mb-1"><strong>اسم المورد:</strong> ${supplier.name}</p>
                        <p class="mb-1"><strong>الهاتف:</strong> ${supplier.phone || '-'}</p>
                        <p class="mb-1"><strong>البريد الإلكتروني:</strong> ${supplier.email || '-'}</p>
                        ${fromDate || toDate ? `<p class="mb-1"><strong>الفترة:</strong> ${fromDate || 'البداية'} - ${toDate || 'النهاية'}</p>` : ''}
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="alert alert-${finalBalance > 0 ? 'danger' : finalBalance < 0 ? 'success' : 'secondary'}">
                        <h6>ملخص الحساب</h6>
                        <p class="mb-1"><strong>إجمالي المشتريات:</strong> ${formatCurrency(totalDebits)}</p>
                        <p class="mb-1"><strong>إجمالي المدفوعات:</strong> ${formatCurrency(totalCredits)}</p>
                        <hr>
                        <p class="mb-0"><strong>الرصيد النهائي:</strong>
                            ${formatCurrency(Math.abs(finalBalance))}
                            ${finalBalance > 0 ? '(مدين لنا)' : finalBalance < 0 ? '(دائن لنا)' : '(متوازن)'}
                        </p>
                    </div>
                </div>
            </div>
        </div>
    `;

    if (transactions.length === 0) {
        html += `
            <div class="text-center text-muted py-5">
                <i class="fas fa-inbox fa-3x mb-3"></i>
                <p>لا توجد معاملات في الفترة المحددة</p>
            </div>
        `;
    } else {
        html += `
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>التاريخ</th>
                            <th>البيان</th>
                            <th>مدين</th>
                            <th>دائن</th>
                            <th>الرصيد</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        transactions.forEach(transaction => {
            html += `
                <tr>
                    <td>${transaction.date}</td>
                    <td>${transaction.description}</td>
                    <td class="text-end">${transaction.debit > 0 ? formatCurrency(transaction.debit) : '-'}</td>
                    <td class="text-end">${transaction.credit > 0 ? formatCurrency(transaction.credit) : '-'}</td>
                    <td class="text-end">
                        <span class="badge bg-${transaction.balance > 0 ? 'danger' : transaction.balance < 0 ? 'success' : 'secondary'}">
                            ${formatCurrency(Math.abs(transaction.balance))}
                            ${transaction.balance > 0 ? ' مدين' : transaction.balance < 0 ? ' دائن' : ' متوازن'}
                        </span>
                    </td>
                </tr>
            `;
        });

        html += `
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <th colspan="2">الإجمالي</th>
                            <th class="text-end">${formatCurrency(totalDebits)}</th>
                            <th class="text-end">${formatCurrency(totalCredits)}</th>
                            <th class="text-end">
                                <span class="badge bg-${finalBalance > 0 ? 'danger' : finalBalance < 0 ? 'success' : 'secondary'}">
                                    ${formatCurrency(Math.abs(finalBalance))}
                                    ${finalBalance > 0 ? ' مدين' : finalBalance < 0 ? ' دائن' : ' متوازن'}
                                </span>
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        `;
    }

    return html;
}

/**
 * وظائف الطباعة للتقارير الجديدة
 */
function exportCustomerPaymentsReport(format) {
    if (format === 'excel') {
        exportCustomerPaymentsToExcel();
    } else if (format === 'print') {
        const reportContent = document.getElementById('customerPaymentsReportResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر الفلاتر')) {
            alert('يرجى إنشاء التقرير أولاً');
            return;
        }
        printReportContent('كشف دفعات العميل', reportContent);
    } else {
        const reportContent = document.getElementById('customerPaymentsReportResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر الفلاتر')) {
            alert('يرجى إنشاء التقرير أولاً');
            return;
        }
        advancedPrint('report', { title: 'كشف دفعات العميل', content: reportContent });
    }
}

/**
 * تصدير تقرير دفعات العملاء إلى Excel
 */
function exportCustomerPaymentsToExcel() {
    console.log('📊 تصدير تقرير دفعات العملاء إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const customerId = document.getElementById('customerPaymentsCustomer')?.value;
        const fromDate = document.getElementById('customerPaymentsFromDate')?.value;
        const toDate = document.getElementById('customerPaymentsToDate')?.value;
        const currency = document.getElementById('customerPaymentsCurrency')?.value || 'all';

        // فلترة سندات القبض
        let receipts = appData.payments.filter(payment =>
            payment.paymentType === 'receipt' &&
            payment.status === 'confirmed'
        );

        if (customerId) {
            receipts = receipts.filter(receipt => receipt.customerId == customerId);
        }

        if (fromDate) {
            receipts = receipts.filter(receipt => receipt.paymentDate >= fromDate);
        }

        if (toDate) {
            receipts = receipts.filter(receipt => receipt.paymentDate <= toDate);
        }

        if (currency !== 'all') {
            receipts = receipts.filter(receipt => receipt.currency === currency);
        }

        if (receipts.length === 0) {
            alert('لا توجد سندات قبض في الفترة المحددة');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'رقم السند',
            'التاريخ',
            'العميل',
            'المبلغ',
            'العملة',
            'طريقة الدفع',
            'رقم المرجع',
            'البنك',
            'ملاحظات'
        ];

        const data = receipts.map(receipt => {
            const customer = appData.customers.find(c => c.id === receipt.customerId);
            return [
                receipt.paymentNumber,
                receipt.paymentDate,
                customer ? customer.name : 'غير محدد',
                receipt.amount,
                getCurrencyName(receipt.currency),
                getPaymentMethodText(receipt.paymentMethod),
                receipt.referenceNumber || '',
                receipt.bankName || '',
                receipt.notes || ''
            ];
        });

        // حساب الإجماليات
        const totalAmount = receipts.reduce((sum, receipt) => sum + receipt.amount, 0);
        const totalCount = receipts.length;

        // إضافة صف الإجماليات
        data.push([
            '',
            '',
            'الإجماليات',
            totalAmount,
            '',
            '',
            '',
            '',
            `عدد السندات: ${totalCount}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'تقرير دفعات العملاء');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'دفعات العملاء');

        // إضافة ورقة الملخص
        const summarySheet = createPaymentsSummarySheet(receipts, 'العملاء', fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // حفظ الملف
        const fileName = `تقرير_دفعات_العملاء_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير تقرير دفعات العملاء إلى Excel بنجاح');
        showSuccessToast('تم تصدير تقرير دفعات العملاء إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير دفعات العملاء إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

function exportSupplierPaymentsReport(format) {
    if (format === 'excel') {
        exportSupplierPaymentsToExcel();
    } else if (format === 'print') {
        const reportContent = document.getElementById('supplierPaymentsReportResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر الفلاتر')) {
            alert('يرجى إنشاء التقرير أولاً');
            return;
        }
        printReportContent('كشف دفعات المورد', reportContent);
    } else {
        const reportContent = document.getElementById('supplierPaymentsReportResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر الفلاتر')) {
            alert('يرجى إنشاء التقرير أولاً');
            return;
        }
        advancedPrint('report', { title: 'كشف دفعات المورد', content: reportContent });
    }
}

/**
 * تصدير تقرير دفعات الموردين إلى Excel
 */
function exportSupplierPaymentsToExcel() {
    console.log('📊 تصدير تقرير دفعات الموردين إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const supplierId = document.getElementById('supplierPaymentsSupplier')?.value;
        const fromDate = document.getElementById('supplierPaymentsFromDate')?.value;
        const toDate = document.getElementById('supplierPaymentsToDate')?.value;
        const currency = document.getElementById('supplierPaymentsCurrency')?.value || 'all';

        // فلترة سندات الدفع
        let payments = appData.payments.filter(payment =>
            payment.paymentType === 'payment' &&
            payment.status === 'confirmed'
        );

        if (supplierId) {
            payments = payments.filter(payment => payment.supplierId == supplierId);
        }

        if (fromDate) {
            payments = payments.filter(payment => payment.paymentDate >= fromDate);
        }

        if (toDate) {
            payments = payments.filter(payment => payment.paymentDate <= toDate);
        }

        if (currency !== 'all') {
            payments = payments.filter(payment => payment.currency === currency);
        }

        if (payments.length === 0) {
            alert('لا توجد سندات دفع في الفترة المحددة');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'رقم السند',
            'التاريخ',
            'المورد',
            'المبلغ',
            'العملة',
            'طريقة الدفع',
            'رقم المرجع',
            'البنك',
            'ملاحظات'
        ];

        const data = payments.map(payment => {
            const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
            return [
                payment.paymentNumber,
                payment.paymentDate,
                supplier ? supplier.name : 'غير محدد',
                payment.amount,
                getCurrencyName(payment.currency),
                getPaymentMethodText(payment.paymentMethod),
                payment.referenceNumber || '',
                payment.bankName || '',
                payment.notes || ''
            ];
        });

        // حساب الإجماليات
        const totalAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);
        const totalCount = payments.length;

        // إضافة صف الإجماليات
        data.push([
            '',
            '',
            'الإجماليات',
            totalAmount,
            '',
            '',
            '',
            '',
            `عدد السندات: ${totalCount}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'تقرير دفعات الموردين');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'دفعات الموردين');

        // إضافة ورقة الملخص
        const summarySheet = createPaymentsSummarySheet(payments, 'الموردين', fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // حفظ الملف
        const fileName = `تقرير_دفعات_الموردين_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير تقرير دفعات الموردين إلى Excel بنجاح');
        showSuccessToast('تم تصدير تقرير دفعات الموردين إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير دفعات الموردين إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

function exportSupplierStatement(format) {
    if (format === 'excel') {
        exportSupplierStatementToExcel();
    } else if (format === 'print') {
        const reportContent = document.getElementById('supplierStatementResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر المورد')) {
            alert('يرجى إنشاء كشف الحساب أولاً');
            return;
        }
        printReportContent('كشف حساب المورد', reportContent);
    } else {
        const reportContent = document.getElementById('supplierStatementResults').innerHTML;
        if (!reportContent || reportContent.includes('اختر المورد')) {
            alert('يرجى إنشاء كشف الحساب أولاً');
            return;
        }
        advancedPrint('report', { title: 'كشف حساب المورد', content: reportContent });
    }
}

/**
 * طباعة محتوى التقرير
 */
function printReportContent(title, content) {
    const printWindow = window.open('', '_blank', 'width=900,height=700');
    const companyName = appData.settings.companyName || 'اسم الشركة';
    const currentDate = formatDate(new Date());
    const printSettings = appData.settings.printSettings || {};

    printWindow.document.write(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${title} - ${companyName}</title>
            <style>
                @page {
                    size: A4 portrait;
                    margin: 1.5cm;
                }

                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    direction: rtl;
                    text-align: right;
                    margin: 0;
                    padding: 0;
                    font-size: 14px;
                    line-height: 1.6;
                    color: #333;
                }

                .print-header {
                    text-align: center;
                    border-bottom: 2px solid #007bff;
                    padding-bottom: 15px;
                    margin-bottom: 20px;
                }

                .company-name {
                    font-size: 22px;
                    font-weight: bold;
                    color: #333;
                    margin: 10px 0;
                }

                .report-title {
                    font-size: 18px;
                    color: #007bff;
                    margin: 10px 0;
                }

                .print-date {
                    font-size: 12px;
                    color: #888;
                    margin-top: 10px;
                }

                .report-content {
                    margin: 20px 0;
                }

                .table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }

                .table th,
                .table td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: center;
                }

                .table th {
                    background-color: #f8f9fa;
                    font-weight: bold;
                }

                .table-light th {
                    background-color: #f8f9fa;
                }

                .text-end {
                    text-align: left;
                }

                .alert {
                    padding: 15px;
                    margin-bottom: 20px;
                    border: 1px solid transparent;
                    border-radius: 4px;
                }

                .alert-info {
                    color: #0c5460;
                    background-color: #d1ecf1;
                    border-color: #bee5eb;
                }

                .alert-warning {
                    color: #856404;
                    background-color: #fff3cd;
                    border-color: #ffeaa7;
                }

                .alert-danger {
                    color: #721c24;
                    background-color: #f8d7da;
                    border-color: #f5c6cb;
                }

                .alert-success {
                    color: #155724;
                    background-color: #d4edda;
                    border-color: #c3e6cb;
                }

                .alert-secondary {
                    color: #383d41;
                    background-color: #e2e3e5;
                    border-color: #d6d8db;
                }

                .badge {
                    display: inline-block;
                    padding: 0.25em 0.4em;
                    font-size: 75%;
                    font-weight: 700;
                    line-height: 1;
                    text-align: center;
                    white-space: nowrap;
                    vertical-align: baseline;
                    border-radius: 0.25rem;
                }

                .bg-danger { background-color: #dc3545; color: white; }
                .bg-success { background-color: #28a745; color: white; }
                .bg-secondary { background-color: #6c757d; color: white; }

                .print-footer {
                    text-align: center;
                    border-top: 1px solid #ddd;
                    padding-top: 15px;
                    margin-top: 30px;
                    font-size: 12px;
                    color: #666;
                }

                .app-name {
                    font-weight: bold;
                    color: #007bff;
                }

                @media print {
                    body {
                        -webkit-print-color-adjust: exact;
                        print-color-adjust: exact;
                    }
                }
            </style>
        </head>
        <body>
            <div class="print-header">
                <div class="company-name">${companyName}</div>
                <div class="report-title">${title}</div>
                ${printSettings.showPrintDate !== false ? `<div class="print-date">تاريخ الطباعة: ${currentDate}</div>` : ''}
            </div>

            <div class="report-content">
                ${content}
            </div>

            <div class="print-footer">
                ${printSettings.footerText ? `<div>${printSettings.footerText}</div>` : ''}
                ${printSettings.showAppName !== false ? `<div class="app-name">تم الإنشاء بواسطة SAM PRO</div>` : ''}
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();

    printWindow.onload = function() {
        printWindow.print();
        setTimeout(() => {
            printWindow.close();
        }, 1000);
    };
}

/**
 * الحصول على نص طريقة الدفع
 */
function getPaymentMethodText(method) {
    const methods = {
        'cash': 'نقداً',
        'bank': 'تحويل بنكي',
        'check': 'شيك',
        'card': 'بطاقة ائتمان',
        'other': 'أخرى'
    };
    return methods[method] || method || '-';
}

/**
 * رفع شعار الشركة
 */
function uploadLogo(input) {
    const file = input.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            appData.settings.logoUrl = e.target.result;
            saveData();
            alert('تم رفع الشعار بنجاح');
            showPage('settings'); // إعادة تحميل الصفحة لعرض الشعار
        };
        reader.readAsDataURL(file);
    }
}

/**
 * إنشاء نسخة احتياطية
 */
function createBackup() {
    // التحقق من الصلاحيات
    if (!hasPermission('backup')) {
        alert('ليس لديك صلاحية لإنشاء النسخ الاحتياطية');
        return;
    }

    console.log('💾 بدء إنشاء النسخة الاحتياطية...');

    try {
        const backupName = document.getElementById('backupName').value.trim() || 'backup';
        const includeSettings = document.getElementById('includeSettings').checked;
        const includeData = document.getElementById('includeData').checked;

        if (!includeSettings && !includeData) {
            alert('يجب اختيار نوع واحد على الأقل من البيانات للنسخ الاحتياطي');
            return;
        }

        const currentUser = getCurrentUser();
        const backup = {
            name: backupName,
            date: new Date().toISOString(),
            version: '2.0.0',
            createdBy: currentUser ? currentUser.fullName : 'غير معروف',
            systemInfo: {
                userAgent: navigator.userAgent,
                timestamp: Date.now(),
                dataSize: 0
            },
            data: {}
        };

        let totalRecords = 0;

        if (includeSettings) {
            backup.data.settings = appData.settings;
            console.log('✅ تم تضمين الإعدادات');
        }

        if (includeData) {
            // تضمين جميع البيانات مع إحصائيات
            const dataTypes = [
                'customers', 'suppliers', 'products', 'warehouses',
                'invoices', 'payments', 'journalEntries', 'inventoryMovements', 'users'
            ];

            dataTypes.forEach(type => {
                if (appData[type]) {
                    backup.data[type] = appData[type];
                    totalRecords += Array.isArray(appData[type]) ? appData[type].length : 1;
                    console.log(`✅ تم تضمين ${type}: ${Array.isArray(appData[type]) ? appData[type].length : 1} عنصر`);
                }
            });
        }

        // حساب حجم البيانات
        const dataStr = JSON.stringify(backup, null, 2);
        backup.systemInfo.dataSize = new Blob([dataStr]).size;
        backup.systemInfo.totalRecords = totalRecords;

        // إعادة تحويل البيانات بعد إضافة معلومات الحجم
        const finalDataStr = JSON.stringify(backup, null, 2);
        const dataBlob = new Blob([finalDataStr], {type: 'application/json'});

        // تحميل الملف
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        const fileName = `${backupName}_${new Date().toISOString().split('T')[0]}_${Date.now()}.json`;
        link.download = fileName;
        link.click();

        // تنظيف الذاكرة
        URL.revokeObjectURL(link.href);

        console.log('✅ تم إنشاء النسخة الاحتياطية بنجاح');

        const sizeInKB = (backup.systemInfo.dataSize / 1024).toFixed(2);
        const successMessage = `✅ تم إنشاء النسخة الاحتياطية بنجاح!

📄 اسم الملف: ${fileName}
📊 إجمالي السجلات: ${totalRecords}
💾 حجم الملف: ${sizeInKB} KB
📅 التاريخ: ${formatDateTime(new Date())}

تم تحميل الملف تلقائياً.`;

        alert(successMessage);

    } catch (error) {
        console.error('❌ خطأ في إنشاء النسخة الاحتياطية:', error);
        alert('حدث خطأ أثناء إنشاء النسخة الاحتياطية: ' + error.message);
    }
}

/**
 * التحقق من ملف النسخة الاحتياطية
 */
function validateBackupFile(input) {
    const file = input.files[0];
    const restoreBtn = document.getElementById('restoreBtn');
    const confirmRestore = document.getElementById('confirmRestore');
    const backupFileInfo = document.getElementById('backupFileInfo');
    const backupDetails = document.getElementById('backupDetails');

    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const backup = JSON.parse(e.target.result);

                // عرض معلومات النسخة الاحتياطية
                backupDetails.innerHTML = `
                    <strong>اسم النسخة:</strong> ${backup.name || 'غير محدد'}<br>
                    <strong>التاريخ:</strong> ${backup.date ? formatDateTime(backup.date) : 'غير محدد'}<br>
                    <strong>الإصدار:</strong> ${backup.version || 'غير محدد'}<br>
                    <strong>البيانات المتضمنة:</strong> ${Object.keys(backup.data || {}).join(', ')}
                `;

                backupFileInfo.style.display = 'block';

                // تفعيل زر الاستعادة عند تأكيد المستخدم
                confirmRestore.addEventListener('change', function() {
                    restoreBtn.disabled = !this.checked;
                });

            } catch (error) {
                alert('ملف النسخة الاحتياطية غير صالح');
                input.value = '';
                backupFileInfo.style.display = 'none';
                restoreBtn.disabled = true;
            }
        };
        reader.readAsText(file);
    } else {
        backupFileInfo.style.display = 'none';
        restoreBtn.disabled = true;
    }
}

/**
 * استعادة نسخة احتياطية
 */
function restoreBackup() {
    // التحقق من الصلاحيات
    if (!hasPermission('backup')) {
        alert('ليس لديك صلاحية لاستعادة النسخ الاحتياطية');
        return;
    }

    const fileInput = document.getElementById('backupFile');
    const file = fileInput.files[0];
    const confirmRestore = document.getElementById('confirmRestore');

    if (!file) {
        alert('يرجى اختيار ملف النسخة الاحتياطية');
        return;
    }

    if (!confirmRestore.checked) {
        alert('يجب تأكيد الاستعادة أولاً');
        return;
    }

    const finalConfirm = confirm(`⚠️ تحذير مهم ⚠️

هل أنت متأكد من استعادة النسخة الاحتياطية؟

سيتم:
• استبدال جميع البيانات الحالية
• حذف جميع الفواتير والسندات الحالية
• إعادة تعيين جميع الإعدادات
• تسجيل خروج جميع المستخدمين

هذا الإجراء لا يمكن التراجع عنه!

اضغط "موافق" للمتابعة أو "إلغاء" للتوقف.`);

    if (!finalConfirm) {
        return;
    }

    console.log('🔄 بدء استعادة النسخة الاحتياطية...');

    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const backup = JSON.parse(e.target.result);

            console.log('📄 معلومات النسخة الاحتياطية:', {
                name: backup.name,
                date: backup.date,
                version: backup.version,
                createdBy: backup.createdBy
            });

            // التحقق من صحة النسخة الاحتياطية
            if (!backup.data || typeof backup.data !== 'object') {
                throw new Error('ملف النسخة الاحتياطية لا يحتوي على بيانات صحيحة');
            }

            // إنشاء نسخة احتياطية سريعة من البيانات الحالية قبل الاستعادة
            const currentBackup = {
                name: 'auto_backup_before_restore',
                date: new Date().toISOString(),
                version: '2.0.0',
                data: { ...appData }
            };

            // حفظ النسخة الاحتياطية السريعة في localStorage مؤقتاً
            localStorage.setItem('samProEmergencyBackup', JSON.stringify(currentBackup));
            console.log('💾 تم إنشاء نسخة احتياطية طارئة');

            let restoredItems = 0;
            const restoredTypes = [];

            // استعادة البيانات
            if (backup.data) {
                Object.keys(backup.data).forEach(key => {
                    if (backup.data[key] !== null && backup.data[key] !== undefined) {
                        appData[key] = backup.data[key];
                        restoredTypes.push(key);

                        if (Array.isArray(backup.data[key])) {
                            restoredItems += backup.data[key].length;
                        } else {
                            restoredItems += 1;
                        }

                        console.log(`✅ تم استعادة ${key}: ${Array.isArray(backup.data[key]) ? backup.data[key].length : 1} عنصر`);
                    }
                });
            }

            // حفظ البيانات المستعادة
            saveData();
            console.log('💾 تم حفظ البيانات المستعادة');

            // مسح بيانات تسجيل الدخول لإجبار المستخدمين على تسجيل الدخول مرة أخرى
            clearLoginData();

            const successMessage = `✅ تم استعادة النسخة الاحتياطية بنجاح!

📄 اسم النسخة: ${backup.name || 'غير محدد'}
📅 تاريخ النسخة: ${backup.date ? formatDateTime(backup.date) : 'غير محدد'}
👤 منشئ النسخة: ${backup.createdBy || 'غير محدد'}
📊 إجمالي العناصر المستعادة: ${restoredItems}
🔧 أنواع البيانات: ${restoredTypes.join(', ')}

سيتم إعادة تحميل الصفحة الآن.`;

            alert(successMessage);

            // إعادة تحميل الصفحة
            window.location.reload();

        } catch (error) {
            console.error('❌ خطأ في استعادة النسخة الاحتياطية:', error);

            const errorMessage = `❌ فشل في استعادة النسخة الاحتياطية

السبب: ${error.message}

يرجى التحقق من:
• صحة ملف النسخة الاحتياطية
• أن الملف بصيغة JSON صحيحة
• أن النسخة متوافقة مع هذا الإصدار

إذا استمرت المشكلة، يرجى الاتصال بالدعم الفني.`;

            alert(errorMessage);
        }
    };
    reader.readAsText(file);
}

/**
 * عرض نافذة التحويل بين المخازن
 */
function showTransferModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'transferModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تحويل بين المخازن</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="transferForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="transferProduct" class="form-label">المنتج <span class="text-danger">*</span></label>
                                <select class="form-select" id="transferProduct" required>
                                    <option value="">اختر المنتج</option>
                                    ${appData.products.map(p => `<option value="${p.id}">${p.name} (${p.code})</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="transferQuantity" class="form-label">الكمية <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="transferQuantity" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="fromWarehouse" class="form-label">من المخزن <span class="text-danger">*</span></label>
                                <select class="form-select" id="fromWarehouse" required>
                                    <option value="">اختر المخزن</option>
                                    ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="toWarehouse" class="form-label">إلى المخزن <span class="text-danger">*</span></label>
                                <select class="form-select" id="toWarehouse" required>
                                    <option value="">اختر المخزن</option>
                                    ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="transferNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="transferNotes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveTransfer()">تنفيذ التحويل</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ التحويل بين المخازن
 */
function saveTransfer() {
    const productId = parseInt(document.getElementById('transferProduct').value);
    const quantity = parseFloat(document.getElementById('transferQuantity').value);
    const fromWarehouseId = parseInt(document.getElementById('fromWarehouse').value);
    const toWarehouseId = parseInt(document.getElementById('toWarehouse').value);
    const notes = document.getElementById('transferNotes').value.trim();

    if (!productId || !quantity || !fromWarehouseId || !toWarehouseId || quantity <= 0) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    if (fromWarehouseId === toWarehouseId) {
        alert('لا يمكن التحويل إلى نفس المخزن');
        return;
    }

    // التحقق من توفر الكمية في المخزن المصدر
    const product = appData.products.find(p => p.id === productId);
    if (product && product.quantity < quantity) {
        alert(`الكمية المتاحة: ${product.quantity} ${product.unit}`);
        return;
    }

    // إضافة حركة إخراج من المخزن المصدر
    addInventoryMovement({
        productId: productId,
        warehouseId: fromWarehouseId,
        movementType: 'out',
        quantity: quantity,
        reference: 'تحويل مخزن',
        notes: `تحويل إلى ${appData.warehouses.find(w => w.id === toWarehouseId)?.name || 'مخزن آخر'} - ${notes}`
    });

    // إضافة حركة إدخال للمخزن المستهدف
    addInventoryMovement({
        productId: productId,
        warehouseId: toWarehouseId,
        movementType: 'in',
        quantity: quantity,
        reference: 'تحويل مخزن',
        notes: `تحويل من ${appData.warehouses.find(w => w.id === fromWarehouseId)?.name || 'مخزن آخر'} - ${notes}`
    });

    saveData();

    // إغلاق النافذة
    const modal = bootstrap.Modal.getInstance(document.getElementById('transferModal'));
    modal.hide();

    alert('تم تنفيذ التحويل بنجاح');
    showPage('inventory');
}

/**
 * صفحة إضافة مورد
 */
function getAddSupplierHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-truck-loading me-2"></i>
                        إضافة مورد جديد
                    </h1>
                    <button class="btn btn-outline-secondary" onclick="showPage('suppliers')">
                        <i class="fas fa-arrow-right me-2"></i>
                        العودة للقائمة
                    </button>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-truck me-2"></i>
                            بيانات المورد
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="addSupplierForm" onsubmit="addSupplier(event)">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="supplierName" class="form-label">
                                        <i class="fas fa-building me-1"></i>
                                        اسم المورد <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" class="form-control" id="supplierName" required>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="supplierPhone" class="form-label">
                                        <i class="fas fa-phone me-1"></i>
                                        رقم الهاتف
                                    </label>
                                    <input type="tel" class="form-control" id="supplierPhone">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="supplierEmail" class="form-label">
                                        <i class="fas fa-envelope me-1"></i>
                                        البريد الإلكتروني
                                    </label>
                                    <input type="email" class="form-control" id="supplierEmail">
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="supplierTaxNumber" class="form-label">
                                        <i class="fas fa-receipt me-1"></i>
                                        الرقم الضريبي
                                    </label>
                                    <input type="text" class="form-control" id="supplierTaxNumber">
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="supplierAddress" class="form-label">
                                    <i class="fas fa-map-marker-alt me-1"></i>
                                    العنوان
                                </label>
                                <textarea class="form-control" id="supplierAddress" rows="3"></textarea>
                            </div>

                            <div class="row" ${appData.settings.enableMultiCurrency ? '' : 'style="display: none;"'}>
                                <div class="col-md-6 mb-3">
                                    <label for="supplierCurrency" class="form-label">
                                        <i class="fas fa-coins me-1"></i>
                                        العملة
                                    </label>
                                    <select class="form-select" id="supplierCurrency">
                                        <option value="${appData.settings.currency || 'SYP'}">${getCurrencySymbol(appData.settings.currency || 'SYP')}</option>
                                        ${appData.settings.enableMultiCurrency ? `
                                            <option value="USD">$ (الدولار الأمريكي)</option>
                                            <option value="EUR">€ (اليورو)</option>
                                            <option value="SAR">ر.س (الريال السعودي)</option>
                                            <option value="AED">د.إ (الدرهم الإماراتي)</option>
                                            <option value="EGP">ج.م (الجنيه المصري)</option>
                                            <option value="JOD">د.أ (الدينار الأردني)</option>
                                            <option value="LBP">ل.ل (الليرة اللبنانية)</option>
                                            <option value="TRY">₺ (الليرة التركية)</option>
                                            <option value="GBP">£ (الجنيه الإسترليني)</option>
                                        ` : ''}
                                    </select>
                                </div>
                            </div>

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" onclick="showPage('suppliers')">
                                    <i class="fas fa-times me-2"></i>
                                    إلغاء
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ المورد
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة المخازن
 */
function getWarehousesHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-warehouse me-2"></i>
                        إدارة المخازن
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showAddWarehouseModal()">
                            <i class="fas fa-plus me-2"></i>
                            إضافة مخزن جديد
                        </button>
                        <button class="btn btn-outline-success" onclick="exportWarehousesToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printContent('warehouses', 'قائمة المخازن')">
                            <i class="fas fa-print me-2"></i>
                            طباعة القائمة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>اسم المخزن</th>
                                <th>الموقع</th>
                                <th>المدير</th>
                                <th>الهاتف</th>
                                <th>عدد الأصناف</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${getWarehousesTableRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Modal إضافة مخزن -->
        <div class="modal fade" id="addWarehouseModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">إضافة مخزن جديد</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addWarehouseForm">
                            <div class="mb-3">
                                <label for="warehouseName" class="form-label">اسم المخزن <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="warehouseName" required>
                            </div>
                            <div class="mb-3">
                                <label for="warehouseLocation" class="form-label">الموقع</label>
                                <input type="text" class="form-control" id="warehouseLocation">
                            </div>
                            <div class="mb-3">
                                <label for="warehouseManager" class="form-label">المدير</label>
                                <input type="text" class="form-control" id="warehouseManager">
                            </div>
                            <div class="mb-3">
                                <label for="warehousePhone" class="form-label">الهاتف</label>
                                <input type="tel" class="form-control" id="warehousePhone">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                        <button type="button" class="btn btn-primary" onclick="addWarehouse()">حفظ المخزن</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة تفاصيل حركة المخزون المحسنة
 */
function getInventoryDetailsHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-list-alt me-2"></i>
                        تفاصيل حركة الأصناف
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" onclick="showPage('inventory')">
                            <i class="fas fa-arrow-left me-2"></i>
                            العودة لحركة المخزون
                        </button>
                        <button class="btn btn-outline-success" onclick="exportInventoryDetailsToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-primary" onclick="printInventoryDetails()">
                            <i class="fas fa-print me-2"></i>
                            طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات سريعة -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">إجمالي الإدخالات</h6>
                                <h4 id="totalInMovements">0</h4>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-arrow-up fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">إجمالي الإخراجات</h6>
                                <h4 id="totalOutMovements">0</h4>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-arrow-down fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">التحويلات</h6>
                                <h4 id="totalTransferMovements">0</h4>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-exchange-alt fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">التسويات</h6>
                                <h4 id="totalAdjustmentMovements">0</h4>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-balance-scale fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث المحسنة -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر البحث والتصفية
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label class="form-label">نوع الحركة</label>
                        <select class="form-select" id="detailsMovementTypeFilter" onchange="applyInventoryDetailsFilter()">
                            <option value="">جميع الحركات</option>
                            <option value="in">إدخال</option>
                            <option value="out">إخراج</option>
                            <option value="transfer">تحويل</option>
                            <option value="adjustment">تسوية</option>
                            <option value="sale">مبيعات</option>
                            <option value="purchase">مشتريات</option>
                            <option value="return">مرتجعات</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الصنف</label>
                        <select class="form-select" id="detailsProductFilter" onchange="applyInventoryDetailsFilter()">
                            <option value="">جميع الأصناف</option>
                            ${appData.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">المخزن</label>
                        <select class="form-select" id="detailsWarehouseFilter" onchange="applyInventoryDetailsFilter()">
                            <option value="">جميع المخازن</option>
                            ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="detailsFromDate" onchange="applyInventoryDetailsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="detailsToDate" onchange="applyInventoryDetailsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="detailsMovementSearch" placeholder="المرجع أو الملاحظات" onkeyup="applyInventoryDetailsFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-primary" onclick="applyInventoryDetailsFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearInventoryDetailsFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-info" onclick="showOnlyOutMovements()">
                            <i class="fas fa-arrow-down me-2"></i>
                            عرض الإخراجات فقط
                        </button>
                        <button class="btn btn-outline-success" onclick="showOnlyInMovements()">
                            <i class="fas fa-arrow-up me-2"></i>
                            عرض الإدخالات فقط
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول التفاصيل المحسن -->
        <div class="card shadow">
            <div class="card-header">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-table me-2"></i>
                    تفاصيل حركة الأصناف
                    <span class="badge bg-primary ms-2" id="movementsCount">0</span>
                </h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-sm">
                        <thead class="table-dark">
                            <tr>
                                <th style="width: 8%">التاريخ</th>
                                <th style="width: 10%">نوع الحركة</th>
                                <th style="width: 15%">الصنف</th>
                                <th style="width: 10%">المخزن</th>
                                <th style="width: 8%">الكمية</th>
                                <th style="width: 6%">الوحدة</th>
                                <th style="width: 10%">سعر الوحدة</th>
                                <th style="width: 10%">المجموع</th>
                                <th style="width: 10%">المرجع/السبب</th>
                                <th style="width: 8%">المستخدم</th>
                                <th style="width: 15%">ملاحظات</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryDetailsTable">
                            ${getInventoryDetailsRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <script>
            // تحديث الإحصائيات عند تحميل الصفحة
            setTimeout(() => {
                updateInventoryDetailsStats();
            }, 100);
        </script>
    `;
}

/**
 * صفحة حركة المخزون
 */
function getInventoryHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-exchange-alt me-2"></i>
                        حركة المخزون
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showAddMovementModal()">
                            <i class="fas fa-plus me-2"></i>
                            إضافة حركة
                        </button>
                        <button class="btn btn-success" onclick="showTransferModal()">
                            <i class="fas fa-exchange-alt me-2"></i>
                            تحويل بين المخازن
                        </button>
                        <button class="btn btn-warning" onclick="refreshInventoryCalculations()" title="تحديث حسابات المخزون">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث الحسابات
                        </button>
                        <button class="btn btn-outline-success me-2" onclick="exportInventoryToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-primary" onclick="printContent('inventory', 'تقرير حركة المخزون')">
                            <i class="fas fa-print me-2"></i>
                            طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label class="form-label">نوع الحركة</label>
                        <select class="form-select" id="movementTypeFilter" onchange="applyInventoryMovementsFilter()">
                            <option value="">جميع الحركات</option>
                            <option value="in">إدخال</option>
                            <option value="out">إخراج</option>
                            <option value="transfer">تحويل</option>
                            <option value="adjustment">تسوية</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الصنف</label>
                        <select class="form-select" id="productFilter" onchange="applyInventoryMovementsFilter()">
                            <option value="">جميع الأصناف</option>
                            ${appData.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">المخزن</label>
                        <select class="form-select" id="warehouseFilter" onchange="applyInventoryMovementsFilter()">
                            <option value="">جميع المخازن</option>
                            ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="fromDate" onchange="applyInventoryMovementsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="toDate" onchange="applyInventoryMovementsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="movementSearch" placeholder="المرجع أو الملاحظات" onkeyup="applyInventoryMovementsFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-primary" onclick="applyInventoryMovementsFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearInventoryMovementsFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول الحركات -->
        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>التاريخ</th>
                                <th>نوع الحركة</th>
                                <th>الصنف</th>
                                <th>المخزن</th>
                                <th>الكمية</th>
                                <th>سعر الوحدة</th>
                                <th>المجموع</th>
                                <th>المرجع</th>
                                <th>ملاحظات</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryMovementsTable">
                            ${getInventoryMovementsRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة إنشاء فاتورة
 */
function getCreateInvoiceHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-file-invoice-dollar me-2"></i>
                    إنشاء فاتورة جديدة
                </h1>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <form id="createInvoiceForm" onsubmit="createInvoice(event)">
                    <!-- معلومات الفاتورة الأساسية -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <label for="invoiceType" class="form-label">نوع الفاتورة <span class="text-danger">*</span></label>
                            <select class="form-select" id="invoiceType" required onchange="updateClientOptions()">
                                <option value="">اختر نوع الفاتورة</option>
                                <option value="sale">فاتورة مبيعات</option>
                                <option value="purchase">فاتورة مشتريات</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="invoiceNumber" class="form-label">رقم الفاتورة</label>
                            <input type="text" class="form-control" id="invoiceNumber" readonly>
                        </div>
                        <div class="col-md-3">
                            <label for="invoiceDate" class="form-label">تاريخ الفاتورة <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="invoiceDate" required>
                        </div>
                        <div class="col-md-3">
                            <label for="dueDate" class="form-label">تاريخ الاستحقاق</label>
                            <input type="date" class="form-control" id="dueDate">
                        </div>
                    </div>

                    <!-- العميل/المورد والعملة -->
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <label for="clientSelect" class="form-label">
                                <span id="clientLabel">العميل/المورد</span> <span class="text-danger">*</span>
                            </label>
                            <select class="form-select" id="clientSelect" required onchange="updateClientInfo()">
                                <option value="">اختر العميل/المورد</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="invoiceCurrency" class="form-label">عملة الفاتورة <span class="text-danger">*</span></label>
                            <select class="form-select" id="invoiceCurrency" required onchange="updateCurrencyDisplay()">
                                <option value="SYP" selected>ليرة سورية (ل.س)</option>
                                <option value="USD">دولار أمريكي ($)</option>
                                <option value="EUR">يورو (€)</option>
                                <option value="TRY">ليرة تركية (₺)</option>
                                <option value="SAR">ريال سعودي (ر.س)</option>
                                <option value="AED">درهم إماراتي (د.إ)</option>
                                <option value="EGP">جنيه مصري (ج.م)</option>
                                <option value="JOD">دينار أردني (د.أ)</option>
                                <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                <option value="GBP">جنيه إسترليني (£)</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="exchangeRateOptional" class="form-label">
                                سعر الصرف (اختياري)
                                <span id="currencySymbolDisplay" class="badge bg-info ms-1">ل.س</span>
                            </label>
                            <input type="number" class="form-control" id="exchangeRateOptional"
                                   step="0.0001" placeholder="سعر صرف مخصص"
                                   onchange="updateCustomExchangeRate()">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                اتركه فارغاً لاستخدام السعر الافتراضي
                                <span id="defaultRateHint" class="text-primary"></span>
                            </small>
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">معلومات العميل/المورد</label>
                            <div id="clientInfo" class="form-control-plaintext text-muted">
                                اختر العميل/المورد لعرض المعلومات
                            </div>
                        </div>
                    </div>

                    <!-- خيارات تحويل العملة -->
                    <div class="row mb-4" id="currencyConversionSection" style="display: none;">
                        <div class="col-12">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h6 class="mb-0">
                                        <i class="fas fa-exchange-alt me-2"></i>
                                        تحويل العملة
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="form-label">العملة الحالية</label>
                                            <input type="text" class="form-control" id="currentCurrencyDisplay" readonly>
                                        </div>
                                        <div class="col-md-3">
                                            <label for="targetCurrency" class="form-label">تحويل إلى</label>
                                            <select class="form-select" id="targetCurrency" onchange="calculateCurrencyConversion()">
                                                <option value="">اختر العملة المستهدفة</option>
                                                <option value="SYP">ليرة سورية (ل.س)</option>
                                                <option value="USD">دولار أمريكي ($)</option>
                                                <option value="EUR">يورو (€)</option>
                                                <option value="TRY">ليرة تركية (₺)</option>
                                                <option value="SAR">ريال سعودي (ر.س)</option>
                                                <option value="AED">درهم إماراتي (د.إ)</option>
                                                <option value="EGP">جنيه مصري (ج.م)</option>
                                                <option value="JOD">دينار أردني (د.أ)</option>
                                                <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                                <option value="GBP">جنيه إسترليني (£)</option>
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">سعر الصرف</label>
                                            <input type="number" class="form-control" id="exchangeRate" step="0.0001" readonly>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">المبلغ المحول</label>
                                            <input type="text" class="form-control" id="convertedAmount" readonly>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">&nbsp;</label>
                                            <button type="button" class="btn btn-success d-block" onclick="applyCurrencyConversion()">
                                                <i class="fas fa-check me-1"></i>
                                                تطبيق التحويل
                                            </button>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col-12">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                سيتم تحويل جميع المبالغ في الفاتورة إلى العملة المستهدفة بناءً على سعر الصرف المحدد
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- عناصر الفاتورة -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>عناصر الفاتورة</h5>
                            <button type="button" class="btn btn-success" onclick="addInvoiceItem()">
                                <i class="fas fa-plus me-2"></i>
                                إضافة صنف
                            </button>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 25%">الصنف</th>
                                        <th style="width: 20%">المواصفات</th>
                                        <th style="width: 10%">الكمية</th>
                                        <th style="width: 12%">سعر الوحدة</th>
                                        <th style="width: 8%">خصم %</th>
                                        <th style="width: 15%">المجموع</th>
                                        <th style="width: 10%">إجراءات</th>
                                    </tr>
                                </thead>
                                <tbody id="invoiceItemsTable">
                                    <!-- سيتم إضافة العناصر هنا -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- إجماليات الفاتورة -->
                    <div class="row">
                        <div class="col-md-8"></div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>المجموع الفرعي:</span>
                                        <span id="subtotalAmount">0.00 ل.س</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>الخصم:</span>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="discountPercentage"
                                                   min="0" max="100" step="0.01" value="0" onchange="calculateInvoiceTotals()">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>مبلغ الخصم:</span>
                                        <span id="discountAmount">0.00 ل.س</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>الضريبة:</span>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="taxPercentage"
                                                   min="0" max="100" step="0.01" value="0" onchange="calculateInvoiceTotals()">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>مبلغ الضريبة:</span>
                                        <span id="taxAmount">0.00 ل.س</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between">
                                        <strong>المجموع النهائي:</strong>
                                        <strong id="totalAmount">0.00 ل.س</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ملاحظات -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <label for="invoiceNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="invoiceNotes" rows="3"></textarea>
                        </div>
                    </div>

                    <!-- أزرار الحفظ -->
                    <div class="d-flex justify-content-between mt-4">
                        <div>
                            <button type="button" class="btn btn-outline-warning" onclick="fixInvoiceSaving()">
                                <i class="fas fa-tools me-2"></i>
                                إصلاح مشكلة الحفظ
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="testInvoiceSave()">
                                <i class="fas fa-vial me-2"></i>
                                اختبار النظام
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="quickTest()">
                                <i class="fas fa-rocket me-2"></i>
                                اختبار سريع
                            </button>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-secondary" onclick="showPage('dashboard')">
                                <i class="fas fa-times me-2"></i>
                                إلغاء
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="exportCurrentInvoiceToExcel()">
                                <i class="fas fa-file-excel me-2"></i>
                                تصدير Excel
                            </button>
                            <button type="button" class="btn btn-outline-primary" onclick="saveInvoiceAsDraft()">
                                <i class="fas fa-save me-2"></i>
                                حفظ كمسودة
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-check me-2"></i>
                                حفظ وتأكيد
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    `;
}

/**
 * صفحة إنشاء فاتورة خاصة
 */
function getCreateCustomInvoiceHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-star me-2 text-warning"></i>
                    إنشاء فاتورة خاصة
                </h1>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>الفاتورة الخاصة:</strong> تتيح لك إدخال بيانات العميل/المورد يدوياً أو اختياره من القائمة، مع مرونة أكبر في التحكم بالعملة وأسعار الصرف.
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <form id="createCustomInvoiceForm" onsubmit="createCustomInvoice(event)">
                    <!-- معلومات الفاتورة الأساسية -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <label for="customInvoiceType" class="form-label">نوع الفاتورة <span class="text-danger">*</span></label>
                            <select class="form-select" id="customInvoiceType" required onchange="updateCustomClientOptions()">
                                <option value="">اختر نوع الفاتورة</option>
                                <option value="sale">فاتورة مبيعات خاصة</option>
                                <option value="purchase">فاتورة مشتريات خاصة</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="customInvoiceNumber" class="form-label">رقم الفاتورة</label>
                            <input type="text" class="form-control" id="customInvoiceNumber" readonly>
                        </div>
                        <div class="col-md-3">
                            <label for="customInvoiceDate" class="form-label">تاريخ الفاتورة <span class="text-danger">*</span></label>
                            <input type="date" class="form-control" id="customInvoiceDate" required>
                        </div>
                        <div class="col-md-3">
                            <label for="customDueDate" class="form-label">تاريخ الاستحقاق</label>
                            <input type="date" class="form-control" id="customDueDate">
                        </div>
                    </div>

                    <!-- خيارات العميل/المورد -->
                    <div class="card border-primary mb-4">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-user-cog me-2"></i>
                                بيانات العميل/المورد
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-12">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="clientInputType" id="existingClient" value="existing" checked onchange="toggleClientInputType()">
                                        <label class="form-check-label" for="existingClient">
                                            <i class="fas fa-list me-1"></i>اختيار من القائمة
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="clientInputType" id="manualClient" value="manual" onchange="toggleClientInputType()">
                                        <label class="form-check-label" for="manualClient">
                                            <i class="fas fa-keyboard me-1"></i>إدخال يدوي
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- اختيار من القائمة -->
                            <div id="existingClientSection">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label for="customClientSelect" class="form-label">
                                            <span id="customClientLabel">العميل/المورد</span> <span class="text-danger">*</span>
                                        </label>
                                        <select class="form-select" id="customClientSelect" onchange="updateCustomClientInfo()">
                                            <option value="">اختر العميل/المورد</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">معلومات العميل/المورد</label>
                                        <div id="customClientInfo" class="form-control-plaintext text-muted">
                                            اختر العميل/المورد لعرض المعلومات
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- الإدخال اليدوي -->
                            <div id="manualClientSection" style="display: none;">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label for="manualClientName" class="form-label">الاسم <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="manualClientName" placeholder="اسم العميل/المورد">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="manualClientPhone" class="form-label">رقم الهاتف</label>
                                        <input type="tel" class="form-control" id="manualClientPhone" placeholder="رقم الهاتف">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="manualClientEmail" class="form-label">البريد الإلكتروني</label>
                                        <input type="email" class="form-control" id="manualClientEmail" placeholder="البريد الإلكتروني">
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <label for="manualClientAddress" class="form-label">العنوان</label>
                                        <textarea class="form-control" id="manualClientAddress" rows="2" placeholder="العنوان الكامل"></textarea>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="manualClientTaxNumber" class="form-label">الرقم الضريبي</label>
                                        <input type="text" class="form-control" id="manualClientTaxNumber" placeholder="الرقم الضريبي">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="manualClientCurrency" class="form-label">العملة المفضلة</label>
                                        <select class="form-select" id="manualClientCurrency">
                                            <option value="SYP">ليرة سورية (ل.س)</option>
                                            <option value="USD">دولار أمريكي ($)</option>
                                            <option value="EUR">يورو (€)</option>
                                            <option value="TRY">ليرة تركية (₺)</option>
                                            <option value="SAR">ريال سعودي (ر.س)</option>
                                            <option value="AED">درهم إماراتي (د.إ)</option>
                                            <option value="EGP">جنيه مصري (ج.م)</option>
                                            <option value="JOD">دينار أردني (د.أ)</option>
                                            <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                            <option value="GBP">جنيه إسترليني (£)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- إعدادات العملة المتقدمة -->
                    <div class="card border-warning mb-4">
                        <div class="card-header bg-warning text-dark">
                            <h6 class="mb-0">
                                <i class="fas fa-coins me-2"></i>
                                إعدادات العملة المتقدمة
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <label for="customInvoiceCurrency" class="form-label">عملة الفاتورة <span class="text-danger">*</span></label>
                                    <select class="form-select" id="customInvoiceCurrency" required onchange="updateCustomCurrencyDisplay()">
                                        <option value="SYP" selected>ليرة سورية (ل.س)</option>
                                        <option value="USD">دولار أمريكي ($)</option>
                                        <option value="EUR">يورو (€)</option>
                                        <option value="TRY">ليرة تركية (₺)</option>
                                        <option value="SAR">ريال سعودي (ر.س)</option>
                                        <option value="AED">درهم إماراتي (د.إ)</option>
                                        <option value="EGP">جنيه مصري (ج.م)</option>
                                        <option value="JOD">دينار أردني (د.أ)</option>
                                        <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                        <option value="GBP">جنيه إسترليني (£)</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="customExchangeRate" class="form-label">سعر الصرف (اختياري)</label>
                                    <input type="number" class="form-control" id="customExchangeRate"
                                           step="0.0001" placeholder="سعر صرف مخصص"
                                           onchange="updateCustomInvoiceExchangeRate()">
                                    <small class="text-muted">اتركه فارغاً لاستخدام السعر الافتراضي</small>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">السعر الافتراضي</label>
                                    <input type="text" class="form-control" id="defaultExchangeRateDisplay" readonly>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">السعر المستخدم</label>
                                    <input type="text" class="form-control" id="usedExchangeRateDisplay" readonly>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- عناصر الفاتورة -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>عناصر الفاتورة</h5>
                            <button type="button" class="btn btn-success" onclick="addCustomInvoiceItem()">
                                <i class="fas fa-plus me-2"></i>
                                إضافة صنف
                            </button>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 25%">الصنف</th>
                                        <th style="width: 20%">المواصفات</th>
                                        <th style="width: 10%">الكمية</th>
                                        <th style="width: 12%">سعر الوحدة</th>
                                        <th style="width: 8%">خصم %</th>
                                        <th style="width: 15%">المجموع</th>
                                        <th style="width: 10%">إجراءات</th>
                                    </tr>
                                </thead>
                                <tbody id="customInvoiceItemsTable">
                                    <!-- سيتم إضافة العناصر هنا -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- إجماليات الفاتورة -->
                    <div class="row">
                        <div class="col-md-8"></div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>المجموع الفرعي:</span>
                                        <span id="customSubtotalAmount">0.00 ل.س</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>الخصم:</span>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="customDiscountPercentage"
                                                   min="0" max="100" step="0.01" value="0" onchange="calculateCustomInvoiceTotals()">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>مبلغ الخصم:</span>
                                        <span id="customDiscountAmount">0.00 ل.س</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>الضريبة:</span>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="customTaxPercentage"
                                                   min="0" max="100" step="0.01" value="0" onchange="calculateCustomInvoiceTotals()">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>مبلغ الضريبة:</span>
                                        <span id="customTaxAmount">0.00 ل.س</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between">
                                        <strong>المجموع النهائي:</strong>
                                        <strong id="customTotalAmount">0.00 ل.س</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ملاحظات -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <label for="customInvoiceNotes" class="form-label">ملاحظات</label>
                            <textarea class="form-control" id="customInvoiceNotes" rows="3"></textarea>
                        </div>
                    </div>

                    <!-- أزرار الحفظ -->
                    <div class="d-flex justify-content-between mt-4">
                        <div>
                            <button type="button" class="btn btn-outline-info" onclick="previewCustomInvoice()">
                                <i class="fas fa-eye me-2"></i>
                                معاينة الفاتورة
                            </button>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-secondary" onclick="showPage('dashboard')">
                                <i class="fas fa-times me-2"></i>
                                إلغاء
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="exportCurrentCustomInvoiceToExcel()">
                                <i class="fas fa-file-excel me-2"></i>
                                تصدير Excel
                            </button>
                            <button type="button" class="btn btn-outline-primary" onclick="saveCustomInvoiceAsDraft()">
                                <i class="fas fa-save me-2"></i>
                                حفظ كمسودة
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-check me-2"></i>
                                حفظ وتأكيد
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    `;
}

/**
 * صفحة فواتير المبيعات
 */
function getSalesInvoicesHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-file-invoice me-2"></i>
                        فواتير المبيعات
                    </h1>
                    <div>
                        <button class="btn btn-outline-info me-2" onclick="advancedPrint('invoice')">
                            <i class="fas fa-print me-2"></i>
                            طباعة متقدمة
                        </button>
                        <button class="btn btn-primary" onclick="showPage('create-invoice')">
                            <i class="fas fa-plus me-2"></i>
                            إنشاء فاتورة مبيعات
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">العميل</label>
                        <select class="form-select" id="customerFilter" onchange="applySalesInvoicesFilter()">
                            <option value="">جميع العملاء</option>
                            ${appData.customers.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الحالة</label>
                        <select class="form-select" id="statusFilter" onchange="applySalesInvoicesFilter()">
                            <option value="">جميع الحالات</option>
                            <option value="draft">مسودة</option>
                            <option value="confirmed">مؤكدة</option>
                            <option value="paid">مدفوعة</option>
                            <option value="cancelled">ملغية</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="salesFromDate" onchange="applySalesInvoicesFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="salesToDate" onchange="applySalesInvoicesFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="salesSearch" placeholder="رقم الفاتورة أو اسم العميل" onkeyup="applySalesInvoicesFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-primary" onclick="applySalesInvoicesFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearSalesInvoicesFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-success" onclick="exportSalesInvoicesToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول الفواتير -->
        <div class="card shadow">
            <div class="card-body" id="salesInvoicesTableContainer">
                <!-- سيتم تحميل الجدول هنا -->
            </div>
        </div>

        <script>
            // تحميل جميع فواتير المبيعات عند عرض الصفحة
            setTimeout(() => {
                const salesInvoices = appData.invoices.filter(inv => inv.invoiceType === 'sale');
                updateSalesInvoicesTable(salesInvoices);
            }, 100);
        </script>
    `;
}

/**
 * صفحة فواتير المشتريات
 */
function getPurchaseInvoicesHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-shopping-cart me-2"></i>
                        فواتير المشتريات
                    </h1>
                    <button class="btn btn-primary" onclick="showPage('create-invoice')">
                        <i class="fas fa-plus me-2"></i>
                        إنشاء فاتورة مشتريات
                    </button>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">المورد</label>
                        <select class="form-select" id="supplierFilter" onchange="applyPurchaseInvoicesFilter()">
                            <option value="">جميع الموردين</option>
                            ${appData.suppliers.map(s => `<option value="${s.id}">${s.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الحالة</label>
                        <select class="form-select" id="purchaseStatusFilter" onchange="applyPurchaseInvoicesFilter()">
                            <option value="">جميع الحالات</option>
                            <option value="draft">مسودة</option>
                            <option value="confirmed">مؤكدة</option>
                            <option value="paid">مدفوعة</option>
                            <option value="cancelled">ملغية</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="purchaseFromDate" onchange="applyPurchaseInvoicesFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="purchaseToDate" onchange="applyPurchaseInvoicesFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="purchaseSearch" placeholder="رقم الفاتورة أو اسم المورد" onkeyup="applyPurchaseInvoicesFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-primary" onclick="applyPurchaseInvoicesFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearPurchaseInvoicesFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-success" onclick="exportPurchaseInvoicesToExcel()">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول الفواتير -->
        <div class="card shadow">
            <div class="card-body" id="purchaseInvoicesTableContainer">
                <!-- سيتم تحميل الجدول هنا -->
            </div>
        </div>

        <script>
            // تحميل جميع فواتير المشتريات عند عرض الصفحة
            setTimeout(() => {
                const purchaseInvoices = appData.invoices.filter(inv => inv.invoiceType === 'purchase');
                updatePurchaseInvoicesTable(purchaseInvoices);
            }, 100);
        </script>
    `;
}

/**
 * صفحة سندات القبض
 */
function getReceiptsHTML() {
    const receipts = appData.payments.filter(p => p.paymentType === 'receipt');

    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-hand-holding-usd me-2"></i>
                        سندات القبض
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showAddReceiptModal()">
                            <i class="fas fa-plus me-2"></i>
                            إنشاء سند قبض
                        </button>
                        <button class="btn btn-outline-warning" onclick="refreshReceiptsData()">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث البيانات
                        </button>
                        <button class="btn btn-outline-danger" onclick="fixReceiptDataIssues()" title="إصلاح مشاكل البيانات">
                            <i class="fas fa-tools me-2"></i>
                            إصلاح المشاكل
                        </button>
                        <button class="btn btn-outline-secondary" onclick="diagnoseCustomerIssues()" title="تشخيص مشاكل العملاء">
                            <i class="fas fa-stethoscope me-2"></i>
                            تشخيص
                        </button>
                        <button class="btn btn-success" onclick="exportReceiptsToExcel()" title="تصدير جميع سندات القبض إلى Excel">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printReceiptsList()">
                            <i class="fas fa-print me-2"></i>
                            طباعة القائمة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">العميل</label>
                        <select class="form-select" id="receiptCustomerFilter" onchange="applyReceiptsFilter()">
                            <option value="">جميع العملاء</option>
                            ${appData.customers.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">طريقة الدفع</label>
                        <select class="form-select" id="receiptMethodFilter" onchange="applyReceiptsFilter()">
                            <option value="">جميع الطرق</option>
                            <option value="cash">نقدي</option>
                            <option value="bank">تحويل بنكي</option>
                            <option value="check">شيك</option>
                            <option value="card">بطاقة ائتمان</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="receiptFromDate" onchange="applyReceiptsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="receiptToDate" onchange="applyReceiptsFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="receiptSearch" placeholder="رقم السند أو اسم العميل" onkeyup="applyReceiptsFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-primary" onclick="applyReceiptsFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearReceiptsFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول سندات القبض -->
        <div class="card shadow">
            <div class="card-body">
                ${receipts.length > 0 ? `
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>رقم السند</th>
                                    <th>العميل</th>
                                    <th>التاريخ</th>
                                    <th>المبلغ</th>
                                    <th>طريقة الدفع</th>
                                    <th>رقم المرجع</th>
                                    <th>الحالة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${getReceiptsRows(receipts)}
                            </tbody>
                        </table>
                    </div>
                ` : `
                    <div class="text-center py-5">
                        <i class="fas fa-hand-holding-usd fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">لا توجد سندات قبض</h5>
                        <p class="text-muted">ابدأ بإنشاء سند قبض جديد</p>
                        ${appData.customers && appData.customers.length > 0 ? `
                            <button class="btn btn-primary" onclick="showAddReceiptModal()">
                                <i class="fas fa-plus me-2"></i>
                                إنشاء سند قبض
                            </button>
                        ` : `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                لا توجد عملاء في النظام. يجب إضافة عميل أولاً قبل إنشاء سند قبض.
                            </div>
                            <button class="btn btn-outline-primary me-2" onclick="showPage('customers')">
                                <i class="fas fa-users me-2"></i>
                                إدارة العملاء
                            </button>
                            <button class="btn btn-outline-danger" onclick="fixReceiptDataIssues()">
                                <i class="fas fa-tools me-2"></i>
                                إصلاح المشاكل
                            </button>
                            <button class="btn btn-outline-success" onclick="createTestData()">
                                <i class="fas fa-database me-2"></i>
                                بيانات تجريبية
                            </button>
                            <button class="btn btn-outline-info" onclick="quickReceiptTest()">
                                <i class="fas fa-vial me-2"></i>
                                اختبار سريع
                            </button>
                            <button class="btn btn-outline-primary" onclick="testDirectSave()">
                                <i class="fas fa-rocket me-2"></i>
                                اختبار مباشر
                            </button>
                            <button class="btn btn-outline-dark" onclick="debugReceiptIssue()">
                                <i class="fas fa-search me-2"></i>
                                فحص شامل
                            </button>
                        `}
                    </div>
                `}
            </div>
        </div>

        <!-- Modal إضافة سند قبض -->
        <div class="modal fade" id="addReceiptModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">إنشاء سند قبض جديد</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addReceiptForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="receiptNumber" class="form-label">رقم السند</label>
                                    <input type="text" class="form-control" id="receiptNumber" readonly>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="receiptDate" class="form-label">التاريخ <span class="text-danger">*</span></label>
                                    <input type="date" class="form-control" id="receiptDate" value="${new Date().toISOString().split('T')[0]}" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="receiptCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                                    <select class="form-select" id="receiptCustomer" required>
                                        <option value="">اختر العميل</option>
                                        ${appData.customers.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="receiptAmount" class="form-label">المبلغ <span class="text-danger">*</span></label>
                                    <input type="number" class="form-control" id="receiptAmount" min="0" step="0.01" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="receiptMethod" class="form-label">طريقة الدفع <span class="text-danger">*</span></label>
                                    <select class="form-select" id="receiptMethod" required>
                                        <option value="">اختر طريقة الدفع</option>
                                        <option value="cash">نقدي</option>
                                        <option value="bank">تحويل بنكي</option>
                                        <option value="check">شيك</option>
                                        <option value="card">بطاقة ائتمان</option>
                                    </select>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="receiptCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                                    <select class="form-select" id="receiptCurrency" required>
                                        <option value="SYP" selected>ليرة سورية (ل.س)</option>
                                        <option value="USD">دولار أمريكي ($)</option>
                                        <option value="EUR">يورو (€)</option>
                                        <option value="TRY">ليرة تركية (₺)</option>
                                        <option value="SAR">ريال سعودي (ر.س)</option>
                                        <option value="AED">درهم إماراتي (د.إ)</option>
                                        <option value="LBP">ليرة لبنانية (ل.ل)</option>
                                        <option value="GBP">جنيه إسترليني (£)</option>
                                    </select>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="receiptReference" class="form-label">رقم المرجع</label>
                                    <input type="text" class="form-control" id="receiptReference" placeholder="رقم الشيك أو الحوالة">
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="receiptBankName" class="form-label">اسم البنك</label>
                                <input type="text" class="form-control" id="receiptBankName">
                            </div>
                            <div class="mb-3">
                                <label for="receiptNotes" class="form-label">ملاحظات</label>
                                <textarea class="form-control" id="receiptNotes" rows="3"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                        <button type="button" class="btn btn-primary" onclick="addReceipt()">حفظ السند</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة سندات الدفع
 */
function getPaymentsHTML() {
    const payments = appData.payments.filter(p => p.paymentType === 'payment');

    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-money-bill-wave me-2"></i>
                        سندات الدفع
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showAddPaymentModal()">
                            <i class="fas fa-plus me-2"></i>
                            إنشاء سند دفع
                        </button>
                        <button class="btn btn-success" onclick="exportPaymentsToExcel()" title="تصدير جميع سندات الدفع إلى Excel">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">المورد</label>
                        <select class="form-select" id="paymentSupplierFilter" onchange="applyPaymentsFilter()">
                            <option value="">جميع الموردين</option>
                            ${appData.suppliers.map(s => `<option value="${s.id}">${s.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">طريقة الدفع</label>
                        <select class="form-select" id="paymentMethodFilter" onchange="applyPaymentsFilter()">
                            <option value="">جميع الطرق</option>
                            <option value="cash">نقدي</option>
                            <option value="bank">تحويل بنكي</option>
                            <option value="check">شيك</option>
                            <option value="card">بطاقة ائتمان</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="paymentFromDate" onchange="applyPaymentsFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="paymentToDate" onchange="applyPaymentsFilter()">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="paymentSearch" placeholder="رقم السند أو اسم المورد" onkeyup="applyPaymentsFilter()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-primary" onclick="applyPaymentsFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearPaymentsFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول سندات الدفع -->
        <div class="card shadow">
            <div class="card-body">
                ${payments.length > 0 ? `
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>رقم السند</th>
                                    <th>المورد</th>
                                    <th>التاريخ</th>
                                    <th>المبلغ</th>
                                    <th>طريقة الدفع</th>
                                    <th>رقم المرجع</th>
                                    <th>الحالة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${getPaymentsRows(payments)}
                            </tbody>
                        </table>
                    </div>
                ` : `
                    <div class="text-center py-5">
                        <i class="fas fa-money-bill-wave fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">لا توجد سندات دفع</h5>
                        <p class="text-muted">ابدأ بإنشاء سند دفع جديد</p>
                        <button class="btn btn-primary" onclick="showAddPaymentModal()">
                            <i class="fas fa-plus me-2"></i>
                            إنشاء سند دفع
                        </button>
                    </div>
                `}
            </div>
        </div>
    `;
}



/**
 * صفحة دفتر اليومية
 */
function getJournalHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-book me-2"></i>
                        دفتر اليومية العامة - متعدد العملات
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-warning" onclick="refreshJournalEntries()" title="تحديث شامل لدفتر اليومية من الفواتير والسندات">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث شامل
                        </button>
                        <button class="btn btn-outline-success" onclick="exportJournal('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printJournal()">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                        <button class="btn btn-primary" onclick="refreshJournal()">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث عادي
                        </button>
                        <button class="btn btn-outline-warning" onclick="calculateJournalSummary()">
                            <i class="fas fa-calculator me-2"></i>
                            حساب الملخص
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص العملات -->
        <div class="row mb-4" id="currencySummary">
            <!-- سيتم تحميل ملخص العملات هنا -->
        </div>

        <!-- فلاتر البحث المحسنة -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر البحث والتحليل
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label class="form-label">نوع العملية</label>
                        <select class="form-select" id="journalTypeFilter" onchange="applyJournalFilter()">
                            <option value="">جميع العمليات</option>
                            <optgroup label="الفواتير">
                                <option value="sale_invoice">فواتير المبيعات</option>
                                <option value="purchase_invoice">فواتير المشتريات</option>
                                <option value="invoice">جميع الفواتير</option>
                            </optgroup>
                            <optgroup label="المدفوعات">
                                <option value="receipt">سندات القبض</option>
                                <option value="payment">سندات الدفع</option>
                                <option value="all_payments">جميع المدفوعات</option>
                            </optgroup>
                            <optgroup label="حركة المخزون">
                                <option value="inventory_in">إدخال مخزون</option>
                                <option value="inventory_out">إخراج مخزون</option>
                                <option value="inventory_transfer">تحويل مخزون</option>
                                <option value="inventory_adjustment">تسوية مخزون</option>
                            </optgroup>
                            <optgroup label="أخرى">
                                <option value="adjustment">تسويات عامة</option>
                                <option value="opening">أرصدة افتتاحية</option>
                                <option value="closing">أرصدة ختامية</option>
                                <option value="manual">قيود يدوية</option>
                            </optgroup>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="journalFromDate" onchange="applyJournalFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="journalToDate" onchange="applyJournalFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">العملة</label>
                        <select class="form-select" id="journalCurrencyFilter" onchange="applyJournalFilter()">
                            <option value="">جميع العملات</option>
                            ${getAvailableCurrencies().map(currency =>
                                `<option value="${currency}">${getCurrencyName(currency)} (${getCurrencySymbol(currency)})</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">الحساب</label>
                        <select class="form-select" id="journalAccountFilter" onchange="applyJournalFilter()">
                            <option value="">جميع الحسابات</option>
                            ${getAvailableAccounts().map(account =>
                                `<option value="${account}">${account}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">بحث</label>
                        <input type="text" class="form-control" id="journalSearch" placeholder="البحث في الوصف" onkeyup="applyJournalFilter()">
                    </div>
                </div>

                <!-- صف إضافي للفلاتر المتقدمة -->
                <div class="row mt-3">
                    <div class="col-md-2">
                        <label class="form-label">نطاق المبلغ</label>
                        <select class="form-select" id="journalAmountRange" onchange="applyJournalFilter()">
                            <option value="">جميع المبالغ</option>
                            <option value="0-100">0 - 100</option>
                            <option value="100-500">100 - 500</option>
                            <option value="500-1000">500 - 1,000</option>
                            <option value="1000-5000">1,000 - 5,000</option>
                            <option value="5000-10000">5,000 - 10,000</option>
                            <option value="10000+">أكثر من 10,000</option>
                            <option value="custom">نطاق مخصص</option>
                        </select>
                    </div>
                    <div class="col-md-2" id="customAmountRange" style="display: none;">
                        <label class="form-label">من - إلى</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="minAmount" placeholder="من" onchange="applyJournalFilter()">
                            <input type="number" class="form-control" id="maxAmount" placeholder="إلى" onchange="applyJournalFilter()">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">حالة التوازن</label>
                        <select class="form-select" id="journalBalanceFilter" onchange="applyJournalFilter()">
                            <option value="">جميع القيود</option>
                            <option value="balanced">متوازنة</option>
                            <option value="unbalanced">غير متوازنة</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">العميل/المورد</label>
                        <select class="form-select" id="journalClientFilter" onchange="applyJournalFilter()">
                            <option value="">جميع العملاء والموردين</option>
                            <optgroup label="العملاء">
                                ${appData.customers ? appData.customers.map(c => `<option value="customer_${c.id}">${c.name}</option>`).join('') : ''}
                            </optgroup>
                            <optgroup label="الموردين">
                                ${appData.suppliers ? appData.suppliers.map(s => `<option value="supplier_${s.id}">${s.name}</option>`).join('') : ''}
                            </optgroup>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">المرجع</label>
                        <input type="text" class="form-control" id="journalReferenceFilter" placeholder="رقم المرجع" onkeyup="applyJournalFilter()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">ترتيب النتائج</label>
                        <select class="form-select" id="journalSortOrder" onchange="applyJournalFilter()">
                            <option value="date_desc">التاريخ (الأحدث أولاً)</option>
                            <option value="date_asc">التاريخ (الأقدم أولاً)</option>
                            <option value="amount_desc">المبلغ (الأكبر أولاً)</option>
                            <option value="amount_asc">المبلغ (الأصغر أولاً)</option>
                            <option value="type">نوع العملية</option>
                        </select>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <button class="btn btn-outline-primary" onclick="applyJournalFilter()">
                            <i class="fas fa-search me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearJournalFilter()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-info" onclick="showJournalAnalysis()">
                            <i class="fas fa-chart-pie me-2"></i>
                            تحليل مفصل
                        </button>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="btn-group">
                            <button class="btn btn-outline-success btn-sm" onclick="exportFilteredJournal('excel')">
                                <i class="fas fa-file-excel me-1"></i>
                                تصدير المفلتر
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="printFilteredJournal()">
                                <i class="fas fa-print me-1"></i>
                                طباعة المفلتر
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات الفلترة -->
        <div class="card shadow mb-4" id="journalFilterStats">
            <!-- سيتم تحميل الإحصائيات هنا -->
        </div>

        <!-- جدول دفتر اليومية المحسن -->
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>
                    القيود المحاسبية
                </h5>
                <div class="btn-group">
                    <button class="btn btn-outline-primary btn-sm" onclick="addManualJournalEntry()">
                        <i class="fas fa-plus me-1"></i>
                        إضافة قيد يدوي
                    </button>
                    <button class="btn btn-outline-warning btn-sm" onclick="validateJournalBalance()">
                        <i class="fas fa-balance-scale me-1"></i>
                        التحقق من التوازن
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th width="8%">التاريخ</th>
                                <th width="10%">نوع العملية</th>
                                <th width="20%">الوصف</th>
                                <th width="15%">الحساب المدين</th>
                                <th width="15%">الحساب الدائن</th>
                                <th width="10%">المبلغ المدين</th>
                                <th width="10%">المبلغ الدائن</th>
                                <th width="7%">العملة</th>
                                <th width="5%">المرجع</th>
                            </tr>
                        </thead>
                        <tbody id="journalTableBody">
                            ${getJournalEntriesRows()}
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <th colspan="5">الإجمالي</th>
                                <th id="totalDebit">0.00</th>
                                <th id="totalCredit">0.00</th>
                                <th id="currencyMix">متعدد</th>
                                <th id="balanceStatus">
                                    <span class="badge bg-success">متوازن</span>
                                </th>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <!-- إحصائيات مفصلة -->
                <div class="row mt-3" id="detailedStats">
                    <div class="col-12">
                        <div class="alert alert-info">
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>إجمالي القيود:</strong> <span id="totalEntries">0</span>
                                </div>
                                <div class="col-md-3">
                                    <strong>العملات المستخدمة:</strong> <span id="usedCurrencies">0</span>
                                </div>
                                <div class="col-md-3">
                                    <strong>الفترة:</strong> <span id="periodRange">غير محدد</span>
                                </div>
                                <div class="col-md-3">
                                    <strong>حالة التوازن:</strong> <span id="balanceStatusText">متوازن</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة كشف حساب العميل
 */
function getCustomerStatementHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-user-check me-2"></i>
                        كشف حساب العميل
                    </h1>
                    <div class="btn-group">

                        <button class="btn btn-outline-success" onclick="exportStatement('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-primary" onclick="printStatement()">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- اختيار العميل والفترة -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label for="statementCustomer" class="form-label">العميل <span class="text-danger">*</span></label>
                        <select class="form-select" id="statementCustomer" onchange="loadCustomerStatement()">
                            <option value="">اختر العميل</option>
                            ${appData.customers.map(c => `<option value="${c.id}">${c.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="statementFromDate" class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="statementFromDate" onchange="loadCustomerStatement()">
                    </div>
                    <div class="col-md-3">
                        <label for="statementToDate" class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="statementToDate" onchange="loadCustomerStatement()">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-grid">
                            <button class="btn btn-primary" onclick="loadCustomerStatement()">
                                <i class="fas fa-search me-2"></i>
                                عرض
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- معلومات العميل -->
        <div id="customerInfo" style="display: none;">
            <div class="card shadow mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h5 id="customerName"></h5>
                            <p class="mb-1" id="customerAddress"></p>
                            <p class="mb-1" id="customerPhone"></p>
                            <p class="mb-0" id="customerEmail"></p>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="row">
                                <div class="col-6">
                                    <div class="border p-3 rounded">
                                        <h6 class="text-muted mb-1">الرصيد السابق</h6>
                                        <h4 id="previousBalance" class="mb-0">0.00 ل.س</h4>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="border p-3 rounded">
                                        <h6 class="text-muted mb-1">الرصيد الحالي</h6>
                                        <h4 id="currentBalance" class="mb-0">0.00 ل.س</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- جدول كشف الحساب -->
            <div class="card shadow">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">تفاصيل الحساب</h5>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary btn-sm" onclick="printStatement()">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                        <button class="btn btn-outline-success btn-sm" onclick="exportStatement('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>التاريخ</th>
                                    <th>البيان</th>
                                    <th>رقم المرجع</th>
                                    <th>مدين</th>
                                    <th>دائن</th>
                                    <th>الرصيد</th>
                                </tr>
                            </thead>
                            <tbody id="statementTable">
                                <!-- سيتم تحميل البيانات هنا -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- رسالة عدم اختيار عميل -->
        <div id="noCustomerSelected" class="text-center py-5">
            <i class="fas fa-user-check fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">اختر عميلاً لعرض كشف الحساب</h5>
            <p class="text-muted">يمكنك أيضاً تحديد فترة زمنية معينة</p>
        </div>
    `;
}

/**
 * صفحة تقرير المبيعات
 */
function getSalesReportHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-chart-line me-2"></i>
                        تقرير المبيعات
                    </h1>
                    <div class="btn-group">

                        <button class="btn btn-outline-success" onclick="exportSalesReport('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="exportSalesReport('print')">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر التقرير المحسنة -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر التقرير - متعدد العملات
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label for="salesReportFromDate" class="form-label">من تاريخ <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="salesReportFromDate" required>
                    </div>
                    <div class="col-md-2">
                        <label for="salesReportToDate" class="form-label">إلى تاريخ <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="salesReportToDate" required>
                    </div>
                    <div class="col-md-2">
                        <label for="salesReportCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                        <select class="form-select" id="salesReportCurrency" onchange="updateSalesReportCurrency()" required>
                            <option value="">اختر العملة</option>
                            <option value="ALL">جميع العملات</option>
                            ${getAvailableCurrencies().map(currency =>
                                `<option value="${currency}">${getCurrencyName(currency)} (${getCurrencySymbol(currency)})</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="salesReportCustomer" class="form-label">العميل</label>
                        <select class="form-select" id="salesReportCustomer">
                            <option value="">جميع العملاء</option>
                            ${appData.customers ? appData.customers.map(c => `<option value="${c.id}">${c.name}</option>`).join('') : ''}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="salesReportProduct" class="form-label">الصنف</label>
                        <select class="form-select" id="salesReportProduct">
                            <option value="">جميع الأصناف</option>
                            ${appData.products ? appData.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('') : ''}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="salesReportStatus" class="form-label">الحالة</label>
                        <select class="form-select" id="salesReportStatus">
                            <option value="">جميع الحالات</option>
                            <option value="paid">مدفوعة</option>
                            <option value="partial">مدفوعة جزئياً</option>
                            <option value="pending">معلقة</option>
                        </select>
                    </div>
                </div>

                <!-- خيارات تحويل العملة -->
                <div class="row mt-3" id="currencyConversionOptions" style="display: none;">
                    <div class="col-12">
                        <div class="alert alert-info">
                            <div class="row align-items-center">
                                <div class="col-md-3">
                                    <label for="convertToCurrency" class="form-label mb-0">تحويل جميع المبالغ إلى:</label>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" id="convertToCurrency" onchange="updateConversionRate()">
                                        <option value="">بدون تحويل</option>
                                        ${getAvailableCurrencies().map(currency =>
                                            `<option value="${currency}">${getCurrencyName(currency)} (${getCurrencySymbol(currency)})</option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <input type="number" class="form-control" id="conversionRate" placeholder="سعر الصرف" step="0.0001" readonly>
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="updateExchangeRates()">
                                        <i class="fas fa-sync-alt me-1"></i>
                                        تحديث الأسعار
                                    </button>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">سيتم تحويل جميع المبالغ للعملة المحددة</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <button class="btn btn-primary" onclick="generateAdvancedSalesReport()">
                            <i class="fas fa-chart-bar me-2"></i>
                            إنشاء التقرير المتقدم
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearSalesReportFilters()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-info" onclick="previewSalesReport()">
                            <i class="fas fa-eye me-2"></i>
                            معاينة
                        </button>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="btn-group">
                            <button class="btn btn-outline-success btn-sm" onclick="exportSalesReport('excel')">
                                <i class="fas fa-file-excel me-1"></i>
                                Excel
                            </button>

                            <button class="btn btn-outline-primary btn-sm" onclick="printSalesReport()">
                                <i class="fas fa-print me-1"></i>
                                طباعة
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص التقرير المحسن -->
        <div id="salesReportSummary" style="display: none;">
            <!-- ملخص العملات -->
            <div class="row mb-4" id="salesCurrencySummary">
                <!-- سيتم تحميل ملخص العملات هنا -->
            </div>

            <!-- الإحصائيات الرئيسية -->
            <div class="row mb-4">
                <div class="col-md-2">
                    <div class="card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">إجمالي المبيعات</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="totalSalesAmount">0.00</div>
                                    <small class="text-muted" id="totalSalesCurrency">متعدد العملات</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">عدد الفواتير</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="totalInvoicesCount">0</div>
                                    <small class="text-muted" id="invoicesDateRange">-</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-file-invoice fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">متوسط الفاتورة</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="averageInvoiceAmount">0.00</div>
                                    <small class="text-muted" id="averageCurrency">-</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-calculator fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">المبلغ المعلق</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="pendingSalesAmount">0.00</div>
                                    <small class="text-muted" id="pendingCurrency">-</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clock fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="card border-left-danger shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">المدفوع</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="paidSalesAmount">0.00</div>
                                    <small class="text-muted" id="paidCurrency">-</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="card border-left-secondary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-secondary text-uppercase mb-1">العملات</div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800" id="currenciesCount">0</div>
                                    <small class="text-muted">عملة نشطة</small>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-coins fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- جدول تفاصيل المبيعات المحسن -->
            <div class="card shadow">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">تفاصيل المبيعات</h5>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary btn-sm" onclick="toggleSalesReportView('summary')">
                            <i class="fas fa-chart-pie me-1"></i>
                            ملخص
                        </button>
                        <button class="btn btn-outline-success btn-sm" onclick="toggleSalesReportView('detailed')">
                            <i class="fas fa-list me-1"></i>
                            تفصيلي
                        </button>
                        <button class="btn btn-outline-info btn-sm" onclick="groupSalesReportBy('currency')">
                            <i class="fas fa-coins me-1"></i>
                            تجميع بالعملة
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th width="10%">رقم الفاتورة</th>
                                    <th width="10%">التاريخ</th>
                                    <th width="15%">العميل</th>
                                    <th width="12%">المبلغ الإجمالي</th>
                                    <th width="8%">العملة</th>
                                    <th width="12%">المدفوع</th>
                                    <th width="12%">المتبقي</th>
                                    <th width="8%">الحالة</th>
                                    <th width="13%">المبلغ المحول</th>
                                </tr>
                            </thead>
                            <tbody id="salesReportTable">
                                <!-- سيتم تحميل البيانات هنا -->
                            </tbody>
                            <tfoot class="table-light">
                                <tr>
                                    <th colspan="3">الإجمالي</th>
                                    <th id="salesTableTotalAmount">0.00</th>
                                    <th id="salesTableCurrencyMix">متعدد</th>
                                    <th id="salesTableTotalPaid">0.00</th>
                                    <th id="salesTableTotalRemaining">0.00</th>
                                    <th id="salesTableStatusSummary">-</th>
                                    <th id="salesTableConvertedTotal">0.00</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                    <!-- معلومات إضافية -->
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="alert alert-info">
                                <h6 class="alert-heading">معلومات التقرير</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <small><strong>الفترة:</strong> <span id="reportPeriod">-</span></small><br>
                                        <small><strong>العملة المحددة:</strong> <span id="selectedCurrency">-</span></small>
                                    </div>
                                    <div class="col-6">
                                        <small><strong>عدد الفواتير:</strong> <span id="reportInvoicesCount">0</span></small><br>
                                        <small><strong>آخر تحديث:</strong> <span id="reportLastUpdate">-</span></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="alert alert-warning" id="conversionInfo" style="display: none;">
                                <h6 class="alert-heading">معلومات التحويل</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <small><strong>العملة المستهدفة:</strong> <span id="targetCurrencyInfo">-</span></small><br>
                                        <small><strong>سعر الصرف:</strong> <span id="exchangeRateInfo">-</span></small>
                                    </div>
                                    <div class="col-6">
                                        <small><strong>تاريخ السعر:</strong> <span id="rateDate">-</span></small><br>
                                        <small class="text-muted">المبالغ المحولة تقريبية</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- رسالة عدم وجود بيانات -->
        <div id="noSalesData" class="text-center py-5">
            <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">حدد الفترة الزمنية لإنشاء تقرير المبيعات</h5>
            <p class="text-muted">يمكنك أيضاً تصفية النتائج حسب العميل أو الصنف</p>
        </div>
    `;
}

/**
 * صفحة تقرير المشتريات
 */
function getPurchaseReportHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-shopping-cart me-2"></i>
                        تقرير المشتريات
                    </h1>
                    <div class="btn-group">

                        <button class="btn btn-outline-success" onclick="exportPurchaseReport('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="exportPurchaseReport('print')">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- فلاتر التقرير المحسنة -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر التقرير - متعدد العملات
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-2">
                        <label for="purchaseReportFromDate" class="form-label">من تاريخ <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="purchaseReportFromDate" required>
                    </div>
                    <div class="col-md-2">
                        <label for="purchaseReportToDate" class="form-label">إلى تاريخ <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="purchaseReportToDate" required>
                    </div>
                    <div class="col-md-2">
                        <label for="purchaseReportCurrency" class="form-label">العملة <span class="text-danger">*</span></label>
                        <select class="form-select" id="purchaseReportCurrency" onchange="updatePurchaseReportCurrency()" required>
                            <option value="">اختر العملة</option>
                            <option value="ALL">جميع العملات</option>
                            ${getAvailableCurrencies().map(currency =>
                                `<option value="${currency}">${getCurrencyName(currency)} (${getCurrencySymbol(currency)})</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="purchaseReportSupplier" class="form-label">المورد</label>
                        <select class="form-select" id="purchaseReportSupplier">
                            <option value="">جميع الموردين</option>
                            ${appData.suppliers ? appData.suppliers.map(s => `<option value="${s.id}">${s.name}</option>`).join('') : ''}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="purchaseReportProduct" class="form-label">الصنف</label>
                        <select class="form-select" id="purchaseReportProduct">
                            <option value="">جميع الأصناف</option>
                            ${appData.products ? appData.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('') : ''}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="purchaseReportStatus" class="form-label">الحالة</label>
                        <select class="form-select" id="purchaseReportStatus">
                            <option value="">جميع الحالات</option>
                            <option value="paid">مدفوعة</option>
                            <option value="partial">مدفوعة جزئياً</option>
                            <option value="pending">معلقة</option>
                        </select>
                    </div>
                </div>

                <!-- خيارات تحويل العملة -->
                <div class="row mt-3" id="purchaseCurrencyConversionOptions" style="display: none;">
                    <div class="col-12">
                        <div class="alert alert-info">
                            <div class="row align-items-center">
                                <div class="col-md-3">
                                    <label for="purchaseConvertToCurrency" class="form-label mb-0">تحويل جميع المبالغ إلى:</label>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" id="purchaseConvertToCurrency" onchange="updatePurchaseConversionRate()">
                                        <option value="">بدون تحويل</option>
                                        ${getAvailableCurrencies().map(currency =>
                                            `<option value="${currency}">${getCurrencyName(currency)} (${getCurrencySymbol(currency)})</option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <input type="number" class="form-control" id="purchaseConversionRate" placeholder="سعر الصرف" step="0.0001" readonly>
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="updateExchangeRates()">
                                        <i class="fas fa-sync-alt me-1"></i>
                                        تحديث الأسعار
                                    </button>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">سيتم تحويل جميع المبالغ للعملة المحددة</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <button class="btn btn-primary" onclick="generateAdvancedPurchaseReport()">
                            <i class="fas fa-chart-bar me-2"></i>
                            إنشاء التقرير المتقدم
                        </button>
                        <button class="btn btn-outline-secondary" onclick="clearPurchaseReportFilters()">
                            <i class="fas fa-times me-2"></i>
                            مسح الفلاتر
                        </button>
                        <button class="btn btn-outline-info" onclick="previewPurchaseReport()">
                            <i class="fas fa-eye me-2"></i>
                            معاينة
                        </button>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="btn-group">
                            <button class="btn btn-outline-success btn-sm" onclick="exportPurchaseReport('excel')">
                                <i class="fas fa-file-excel me-1"></i>
                                Excel
                            </button>

                            <button class="btn btn-outline-primary btn-sm" onclick="printPurchaseReport()">
                                <i class="fas fa-print me-1"></i>
                                طباعة
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص التقرير -->
        <div id="purchaseReportSummary" style="display: none;">
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card border-right-danger shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">إجمالي المشتريات</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalPurchaseAmount">0.00 ل.س</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-shopping-cart fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-right-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">عدد الفواتير</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalPurchaseInvoicesCount">0</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-file-invoice fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-right-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">متوسط الفاتورة</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="averagePurchaseAmount">0.00 ل.س</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-calculator fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-right-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col me-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">المبلغ المعلق</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="pendingPurchaseAmount">0.00 ل.س</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clock fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- جدول تفاصيل المشتريات -->
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0">تفاصيل المشتريات</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>رقم الفاتورة</th>
                                    <th>التاريخ</th>
                                    <th>المورد</th>
                                    <th>المبلغ الإجمالي</th>
                                    <th>المدفوع</th>
                                    <th>المتبقي</th>
                                    <th>الحالة</th>
                                </tr>
                            </thead>
                            <tbody id="purchaseReportTable">
                                <!-- سيتم تحميل البيانات هنا -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- رسالة عدم وجود بيانات -->
        <div id="noPurchaseData" class="text-center py-5">
            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">حدد الفترة الزمنية لإنشاء تقرير المشتريات</h5>
            <p class="text-muted">يمكنك أيضاً تصفية النتائج حسب المورد أو الصنف</p>
        </div>
    `;
}

/**
 * صفحة الأرصدة الإجمالية
 */
function getCurrencyBalancesHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-coins me-2"></i>
                        الأرصدة الإجمالية للعملات
                    </h1>
                    <div class="btn-group">

                        <button class="btn btn-outline-success" onclick="exportCurrencyBalances('excel')">
                            <i class="fas fa-file-excel me-2"></i>
                            تصدير Excel
                        </button>
                        <button class="btn btn-outline-info" onclick="printCurrencyBalances()">
                            <i class="fas fa-print me-2"></i>
                            طباعة
                        </button>
                        <button class="btn btn-primary" onclick="refreshCurrencyBalances()">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص الأرصدة -->
        <div class="row mb-4" id="currencyBalancesSummary">
            <!-- سيتم تحميل البيانات هنا -->
        </div>

        <!-- جدول تفاصيل الأرصدة -->
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">تفاصيل الأرصدة حسب العملة</h5>
                <small class="text-muted">آخر تحديث: <span id="lastUpdateTime">جاري التحميل...</span></small>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>العملة</th>
                                <th>الرمز</th>
                                <th>إدخالات العملاء</th>
                                <th>إخراجات العملاء</th>
                                <th>إدخالات الموردين</th>
                                <th>إخراجات الموردين</th>
                                <th>صافي الرصيد</th>
                                <th>الحالة</th>
                            </tr>
                        </thead>
                        <tbody id="currencyBalancesTable">
                            <tr>
                                <td colspan="8" class="text-center text-muted py-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">جاري التحميل...</span>
                                    </div>
                                    <div class="mt-2">جاري تحميل الأرصدة...</div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- معلومات إضافية -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">ملاحظات مهمة</h6>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled mb-0">
                            <li><i class="fas fa-info-circle text-info me-2"></i>الأرصدة محسوبة بناءً على الفواتير والدفعات المؤكدة</li>
                            <li><i class="fas fa-clock text-warning me-2"></i>يتم تحديث الأرصدة تلقائياً مع كل عملية</li>
                            <li><i class="fas fa-shield-alt text-success me-2"></i>جميع المبالغ معروضة بالعملة الأصلية</li>
                            <li><i class="fas fa-sync-alt text-primary me-2"></i>استخدم زر "تحديث" لإعادة حساب الأرصدة</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">إحصائيات سريعة</h6>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="border-end">
                                    <h4 class="text-primary mb-1" id="totalCurrencies">0</h4>
                                    <small class="text-muted">عملات نشطة</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="border-end">
                                    <h4 class="text-success mb-1" id="positiveCurrencies">0</h4>
                                    <small class="text-muted">أرصدة موجبة</small>
                                </div>
                            </div>
                            <div class="col-4">
                                <h4 class="text-danger mb-1" id="negativeCurrencies">0</h4>
                                <small class="text-muted">أرصدة سالبة</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة إدارة المستخدمين
 */
function getUsersHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-users me-2"></i>
                        إدارة المستخدمين
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-primary" onclick="showAddUserModal()">
                            <i class="fas fa-user-plus me-2"></i>
                            إضافة مستخدم جديد
                        </button>
                        <button class="btn btn-outline-info" onclick="refreshUsers()">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات المستخدمين -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">إجمالي المستخدمين</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalUsers">${appData.users ? appData.users.length : 0}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">المستخدمين النشطين</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="activeUsers">${appData.users ? appData.users.filter(u => u.isActive).length : 0}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-user-check fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">المديرين</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="adminUsers">${appData.users ? appData.users.filter(u => u.role === 'admin').length : 0}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-user-shield fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">المستخدمين العاديين</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="regularUsers">${appData.users ? appData.users.filter(u => u.role === 'user').length : 0}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-user fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول المستخدمين -->
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">قائمة المستخدمين</h5>
                <div class="input-group" style="width: 300px;">
                    <input type="text" class="form-control" id="userSearch" placeholder="البحث عن مستخدم..." onkeyup="filterUsers()">
                    <button class="btn btn-outline-secondary" onclick="clearUserSearch()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>اسم المستخدم</th>
                                <th>الاسم الكامل</th>
                                <th>البريد الإلكتروني</th>
                                <th>الدور</th>
                                <th>الحالة</th>
                                <th>آخر تسجيل دخول</th>
                                <th>تاريخ الإنشاء</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody id="usersTable">
                            ${getUsersTableRows()}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

/**
 * الحصول على صفوف جدول المستخدمين
 */
function getUsersTableRows() {
    if (!appData.users || appData.users.length === 0) {
        return '<tr><td colspan="8" class="text-center text-muted py-4"><i class="fas fa-users fa-3x mb-3"></i><h5>لا يوجد مستخدمين</h5></td></tr>';
    }

    return appData.users.map(user => {
        const roleText = user.role === 'admin' ? 'مدير' : 'مستخدم عادي';
        const roleBadge = user.role === 'admin' ? 'bg-danger' : 'bg-primary';
        const statusBadge = user.isActive ? 'bg-success' : 'bg-secondary';
        const statusText = user.isActive ? 'نشط' : 'معطل';
        const lastLogin = user.lastLogin ? formatDate(user.lastLogin) : 'لم يسجل دخول';

        return `
            <tr>
                <td>
                    <strong>${user.username}</strong>
                    ${user.role === 'admin' ? '<i class="fas fa-crown text-warning ms-1" title="مدير"></i>' : ''}
                </td>
                <td>${user.fullName}</td>
                <td>${user.email || '-'}</td>
                <td><span class="badge ${roleBadge}">${roleText}</span></td>
                <td><span class="badge ${statusBadge}">${statusText}</span></td>
                <td>${lastLogin}</td>
                <td>${formatDate(user.createdAt)}</td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary" onclick="editUser(${user.id})" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-info" onclick="viewUserPermissions(${user.id})" title="الصلاحيات">
                            <i class="fas fa-key"></i>
                        </button>
                        ${user.id !== 1 ? `
                            <button class="btn btn-outline-${user.isActive ? 'warning' : 'success'}" onclick="toggleUserStatus(${user.id})" title="${user.isActive ? 'تعطيل' : 'تفعيل'}">
                                <i class="fas fa-${user.isActive ? 'user-slash' : 'user-check'}"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteUser(${user.id})" title="حذف">
                                <i class="fas fa-trash"></i>
                            </button>
                        ` : ''}
                    </div>
                </td>
            </tr>
        `;
    }).join('');
}

/**
 * تحديث إحصائيات المستخدمين
 */
function updateUserStats() {
    if (!appData.users) return;

    const totalUsers = appData.users.length;
    const activeUsers = appData.users.filter(u => u.isActive).length;
    const adminUsers = appData.users.filter(u => u.role === 'admin').length;
    const regularUsers = appData.users.filter(u => u.role === 'user').length;

    const totalElement = document.getElementById('totalUsers');
    const activeElement = document.getElementById('activeUsers');
    const adminElement = document.getElementById('adminUsers');
    const regularElement = document.getElementById('regularUsers');

    if (totalElement) totalElement.textContent = totalUsers;
    if (activeElement) activeElement.textContent = activeUsers;
    if (adminElement) adminElement.textContent = adminUsers;
    if (regularElement) regularElement.textContent = regularUsers;
}

/**
 * تحديث جدول المستخدمين
 */
function refreshUsers() {
    const tableBody = document.getElementById('usersTable');
    if (tableBody) {
        tableBody.innerHTML = getUsersTableRows();
    }
    updateUserStats();
}

/**
 * تصفية المستخدمين
 */
function filterUsers() {
    const searchText = document.getElementById('userSearch').value.toLowerCase();
    const tableBody = document.getElementById('usersTable');

    if (!searchText) {
        tableBody.innerHTML = getUsersTableRows();
        return;
    }

    const filteredUsers = appData.users.filter(user =>
        user.username.toLowerCase().includes(searchText) ||
        user.fullName.toLowerCase().includes(searchText) ||
        (user.email && user.email.toLowerCase().includes(searchText))
    );

    if (filteredUsers.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="8" class="text-center text-muted py-4"><i class="fas fa-search fa-3x mb-3"></i><h5>لا توجد نتائج</h5></td></tr>';
    } else {
        tableBody.innerHTML = filteredUsers.map(user => {
            const roleText = user.role === 'admin' ? 'مدير' : 'مستخدم عادي';
            const roleBadge = user.role === 'admin' ? 'bg-danger' : 'bg-primary';
            const statusBadge = user.isActive ? 'bg-success' : 'bg-secondary';
            const statusText = user.isActive ? 'نشط' : 'معطل';
            const lastLogin = user.lastLogin ? formatDate(user.lastLogin) : 'لم يسجل دخول';

            return `
                <tr>
                    <td>
                        <strong>${user.username}</strong>
                        ${user.role === 'admin' ? '<i class="fas fa-crown text-warning ms-1" title="مدير"></i>' : ''}
                    </td>
                    <td>${user.fullName}</td>
                    <td>${user.email || '-'}</td>
                    <td><span class="badge ${roleBadge}">${roleText}</span></td>
                    <td><span class="badge ${statusBadge}">${statusText}</span></td>
                    <td>${lastLogin}</td>
                    <td>${formatDate(user.createdAt)}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="editUser(${user.id})" title="تعديل">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="viewUserPermissions(${user.id})" title="الصلاحيات">
                                <i class="fas fa-key"></i>
                            </button>
                            ${user.id !== 1 ? `
                                <button class="btn btn-outline-${user.isActive ? 'warning' : 'success'}" onclick="toggleUserStatus(${user.id})" title="${user.isActive ? 'تعطيل' : 'تفعيل'}">
                                    <i class="fas fa-${user.isActive ? 'user-slash' : 'user-check'}"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteUser(${user.id})" title="حذف">
                                    <i class="fas fa-trash"></i>
                                </button>
                            ` : ''}
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    }
}

/**
 * مسح البحث
 */
function clearUserSearch() {
    document.getElementById('userSearch').value = '';
    refreshUsers();
}

/**
 * إظهار نافذة إضافة مستخدم جديد
 */
function showAddUserModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addUserModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">إضافة مستخدم جديد</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addUserForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">اسم المستخدم <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="newUsername" required>
                                    <small class="form-text text-muted">يجب أن يكون فريداً ولا يحتوي على مسافات</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">كلمة المرور <span class="text-danger">*</span></label>
                                    <input type="password" class="form-control" id="newPassword" required>
                                    <small class="form-text text-muted">يجب أن تكون 6 أحرف على الأقل</small>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الاسم الكامل <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="newFullName" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">البريد الإلكتروني</label>
                                    <input type="email" class="form-control" id="newEmail">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الدور <span class="text-danger">*</span></label>
                                    <select class="form-select" id="newRole" required onchange="togglePermissionsSection()">
                                        <option value="">اختر الدور</option>
                                        <option value="admin">مدير</option>
                                        <option value="user">مستخدم عادي</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الحالة</label>
                                    <select class="form-select" id="newStatus">
                                        <option value="true">نشط</option>
                                        <option value="false">معطل</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- قسم الصلاحيات -->
                        <div id="permissionsSection" style="display: none;">
                            <hr>
                            <h6>الصلاحيات</h6>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_dashboard" checked>
                                        <label class="form-check-label" for="perm_dashboard">لوحة التحكم</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_customers">
                                        <label class="form-check-label" for="perm_customers">العملاء</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_suppliers">
                                        <label class="form-check-label" for="perm_suppliers">الموردين</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_products">
                                        <label class="form-check-label" for="perm_products">الأصناف</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_warehouses">
                                        <label class="form-check-label" for="perm_warehouses">المخازن</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_salesInvoices">
                                        <label class="form-check-label" for="perm_salesInvoices">فواتير المبيعات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_purchaseInvoices">
                                        <label class="form-check-label" for="perm_purchaseInvoices">فواتير المشتريات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_receipts">
                                        <label class="form-check-label" for="perm_receipts">سندات القبض</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_payments">
                                        <label class="form-check-label" for="perm_payments">سندات الدفع</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_inventory">
                                        <label class="form-check-label" for="perm_inventory">المخزون</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_reports">
                                        <label class="form-check-label" for="perm_reports">التقارير</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_journal">
                                        <label class="form-check-label" for="perm_journal">دفتر اليومية</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_settings">
                                        <label class="form-check-label" for="perm_settings">الإعدادات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_backup">
                                        <label class="form-check-label" for="perm_backup">النسخ الاحتياطي</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="perm_users">
                                        <label class="form-check-label" for="perm_users">إدارة المستخدمين</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveNewUser()">حفظ المستخدم</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تبديل عرض قسم الصلاحيات
 */
function togglePermissionsSection() {
    const role = document.getElementById('newRole').value;
    const permissionsSection = document.getElementById('permissionsSection');

    if (role === 'user') {
        permissionsSection.style.display = 'block';
    } else {
        permissionsSection.style.display = 'none';
    }
}

/**
 * تبديل عرض قسم الصلاحيات في تعديل المستخدم
 */
function toggleEditPermissionsSection() {
    const role = document.getElementById('editRole').value;
    const permissionsSection = document.getElementById('editPermissionsSection');

    if (role === 'user') {
        permissionsSection.style.display = 'block';
    } else {
        permissionsSection.style.display = 'none';
    }
}

/**
 * حفظ تعديلات المستخدم
 */
function saveEditedUser(userId) {
    console.log('👤 حفظ تعديلات المستخدم...', userId);

    try {
        // جمع البيانات
        const username = document.getElementById('editUsername').value.trim();
        const password = document.getElementById('editPassword').value;
        const fullName = document.getElementById('editFullName').value.trim();
        const email = document.getElementById('editEmail').value.trim();
        const role = document.getElementById('editRole').value;
        const isActive = document.getElementById('editStatus').value === 'true';

        // التحقق من البيانات المطلوبة
        if (!username || !fullName || !role) {
            alert('يرجى ملء جميع الحقول المطلوبة');
            return;
        }

        if (password && password.length < 6) {
            alert('كلمة المرور يجب أن تكون 6 أحرف على الأقل');
            return;
        }

        // التحقق من عدم تكرار اسم المستخدم (إذا تم تغييره)
        const existingUser = appData.users.find(u => u.username === username && u.id !== userId);
        if (existingUser) {
            alert('اسم المستخدم موجود مسبقاً');
            return;
        }

        // العثور على المستخدم
        const user = appData.users.find(u => u.id === userId);
        if (!user) {
            alert('المستخدم غير موجود');
            return;
        }

        // جمع الصلاحيات
        let permissions = {};
        if (role === 'admin') {
            // المدير له جميع الصلاحيات
            permissions = {
                dashboard: true,
                customers: true,
                suppliers: true,
                products: true,
                warehouses: true,
                salesInvoices: true,
                purchaseInvoices: true,
                receipts: true,
                payments: true,
                inventory: true,
                reports: true,
                journal: true,
                settings: true,
                backup: true,
                users: true
            };
        } else {
            // جمع الصلاحيات المحددة للمستخدم العادي
            const permissionsList = [
                'dashboard', 'customers', 'suppliers', 'products', 'warehouses',
                'salesInvoices', 'purchaseInvoices', 'receipts', 'payments',
                'inventory', 'reports', 'journal', 'settings', 'backup', 'users'
            ];

            permissionsList.forEach(perm => {
                const checkbox = document.getElementById(`edit_perm_${perm}`);
                permissions[perm] = checkbox ? checkbox.checked : false;
            });
        }

        // تحديث بيانات المستخدم
        user.username = username;
        if (password) {
            user.password = password; // في التطبيق الحقيقي يجب تشفير كلمة المرور
        }
        user.fullName = fullName;
        user.email = email || null;
        user.role = role;
        user.permissions = permissions;
        user.isActive = isActive;
        user.updatedAt = new Date().toISOString().split('T')[0];

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
        modal.hide();

        // تحديث الجدول
        refreshUsers();

        alert(`تم تحديث بيانات المستخدم "${fullName}" بنجاح!`);
        console.log('✅ تم تحديث المستخدم:', user);

        // إذا كان المستخدم الحالي يعدل نفسه، تحديث بيانات الجلسة
        const currentUser = getCurrentUser();
        if (currentUser && currentUser.id === userId) {
            localStorage.setItem('samProCurrentUser', JSON.stringify({
                id: user.id,
                username: user.username,
                fullName: user.fullName,
                role: user.role,
                permissions: user.permissions
            }));
            console.log('✅ تم تحديث بيانات الجلسة الحالية');
        }

    } catch (error) {
        console.error('❌ خطأ في تحديث المستخدم:', error);
        alert('حدث خطأ أثناء تحديث المستخدم');
    }
}

/**
 * حفظ مستخدم جديد
 */
function saveNewUser() {
    console.log('👤 حفظ مستخدم جديد...');

    try {
        // جمع البيانات
        const username = document.getElementById('newUsername').value.trim();
        const password = document.getElementById('newPassword').value;
        const fullName = document.getElementById('newFullName').value.trim();
        const email = document.getElementById('newEmail').value.trim();
        const role = document.getElementById('newRole').value;
        const isActive = document.getElementById('newStatus').value === 'true';

        // التحقق من البيانات المطلوبة
        if (!username || !password || !fullName || !role) {
            alert('يرجى ملء جميع الحقول المطلوبة');
            return;
        }

        if (password.length < 6) {
            alert('كلمة المرور يجب أن تكون 6 أحرف على الأقل');
            return;
        }

        // التحقق من عدم تكرار اسم المستخدم
        if (appData.users.some(u => u.username === username)) {
            alert('اسم المستخدم موجود مسبقاً');
            return;
        }

        // جمع الصلاحيات
        let permissions = {};
        if (role === 'admin') {
            // المدير له جميع الصلاحيات
            permissions = {
                dashboard: true,
                customers: true,
                suppliers: true,
                products: true,
                warehouses: true,
                salesInvoices: true,
                purchaseInvoices: true,
                receipts: true,
                payments: true,
                inventory: true,
                reports: true,
                journal: true,
                settings: true,
                backup: true,
                users: true
            };
        } else {
            // جمع الصلاحيات المحددة للمستخدم العادي
            const permissionsList = [
                'dashboard', 'customers', 'suppliers', 'products', 'warehouses',
                'salesInvoices', 'purchaseInvoices', 'receipts', 'payments',
                'inventory', 'reports', 'journal', 'settings', 'backup', 'users'
            ];

            permissionsList.forEach(perm => {
                const checkbox = document.getElementById(`perm_${perm}`);
                permissions[perm] = checkbox ? checkbox.checked : false;
            });
        }

        // إنشاء المستخدم الجديد
        const newUser = {
            id: Date.now(),
            username,
            password, // في التطبيق الحقيقي يجب تشفير كلمة المرور
            fullName,
            email: email || null,
            role,
            permissions,
            isActive,
            createdAt: new Date().toISOString().split('T')[0],
            lastLogin: null
        };

        // إضافة المستخدم
        if (!appData.users) appData.users = [];
        appData.users.push(newUser);

        // حفظ البيانات
        saveData();

        // إغلاق النافذة
        const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
        modal.hide();

        // تحديث الجدول
        refreshUsers();

        alert(`تم إضافة المستخدم "${fullName}" بنجاح!`);
        console.log('✅ تم حفظ المستخدم الجديد:', newUser);

    } catch (error) {
        console.error('❌ خطأ في حفظ المستخدم:', error);
        alert('حدث خطأ أثناء حفظ المستخدم');
    }
}

/**
 * تعديل مستخدم
 */
function editUser(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('users')) {
        alert('ليس لديك صلاحية لتعديل المستخدمين');
        return;
    }

    const user = appData.users.find(u => u.id === id);
    if (!user) {
        alert('المستخدم غير موجود');
        return;
    }

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'editUserModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">تعديل المستخدم: ${user.fullName}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">اسم المستخدم <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="editUsername" value="${user.username}" required ${user.id === 1 ? 'readonly' : ''}>
                                    <small class="form-text text-muted">يجب أن يكون فريداً ولا يحتوي على مسافات</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">كلمة المرور الجديدة</label>
                                    <input type="password" class="form-control" id="editPassword" placeholder="اتركه فارغاً لعدم التغيير">
                                    <small class="form-text text-muted">يجب أن تكون 6 أحرف على الأقل</small>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الاسم الكامل <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="editFullName" value="${user.fullName}" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">البريد الإلكتروني</label>
                                    <input type="email" class="form-control" id="editEmail" value="${user.email || ''}">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الدور <span class="text-danger">*</span></label>
                                    <select class="form-select" id="editRole" required onchange="toggleEditPermissionsSection()" ${user.id === 1 ? 'disabled' : ''}>
                                        <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>مدير</option>
                                        <option value="user" ${user.role === 'user' ? 'selected' : ''}>مستخدم عادي</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">الحالة</label>
                                    <select class="form-select" id="editStatus" ${user.id === 1 ? 'disabled' : ''}>
                                        <option value="true" ${user.isActive ? 'selected' : ''}>نشط</option>
                                        <option value="false" ${!user.isActive ? 'selected' : ''}>معطل</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- قسم الصلاحيات -->
                        <div id="editPermissionsSection" style="display: ${user.role === 'user' ? 'block' : 'none'};">
                            <hr>
                            <h6>الصلاحيات</h6>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_dashboard" ${user.permissions?.dashboard ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_dashboard">لوحة التحكم</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_customers" ${user.permissions?.customers ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_customers">العملاء</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_suppliers" ${user.permissions?.suppliers ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_suppliers">الموردين</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_products" ${user.permissions?.products ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_products">الأصناف</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_warehouses" ${user.permissions?.warehouses ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_warehouses">المخازن</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_salesInvoices" ${user.permissions?.salesInvoices ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_salesInvoices">فواتير المبيعات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_purchaseInvoices" ${user.permissions?.purchaseInvoices ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_purchaseInvoices">فواتير المشتريات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_receipts" ${user.permissions?.receipts ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_receipts">سندات القبض</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_payments" ${user.permissions?.payments ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_payments">سندات الدفع</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_inventory" ${user.permissions?.inventory ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_inventory">المخزون</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_reports" ${user.permissions?.reports ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_reports">التقارير</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_journal" ${user.permissions?.journal ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_journal">دفتر اليومية</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_settings" ${user.permissions?.settings ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_settings">الإعدادات</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_backup" ${user.permissions?.backup ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_backup">النسخ الاحتياطي</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="edit_perm_users" ${user.permissions?.users ? 'checked' : ''}>
                                        <label class="form-check-label" for="edit_perm_users">إدارة المستخدمين</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-primary" onclick="saveEditedUser(${id})">حفظ التعديلات</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * عرض صلاحيات المستخدم
 */
function viewUserPermissions(id) {
    const user = appData.users.find(u => u.id === id);
    if (!user) return;

    const permissionNames = {
        dashboard: 'لوحة التحكم',
        customers: 'العملاء',
        suppliers: 'الموردين',
        products: 'الأصناف',
        warehouses: 'المخازن',
        salesInvoices: 'فواتير المبيعات',
        purchaseInvoices: 'فواتير المشتريات',
        receipts: 'سندات القبض',
        payments: 'سندات الدفع',
        inventory: 'المخزون',
        reports: 'التقارير',
        journal: 'دفتر اليومية',
        settings: 'الإعدادات',
        backup: 'النسخ الاحتياطي',
        users: 'إدارة المستخدمين'
    };

    const permissionsList = Object.entries(user.permissions || {})
        .map(([key, value]) => `
            <li class="list-group-item d-flex justify-content-between align-items-center">
                ${permissionNames[key] || key}
                <span class="badge bg-${value ? 'success' : 'danger'}">${value ? 'مسموح' : 'ممنوع'}</span>
            </li>
        `).join('');

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'userPermissionsModal';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">صلاحيات المستخدم: ${user.fullName}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>اسم المستخدم:</strong> ${user.username}<br>
                        <strong>الدور:</strong> <span class="badge bg-${user.role === 'admin' ? 'danger' : 'primary'}">${user.role === 'admin' ? 'مدير' : 'مستخدم عادي'}</span><br>
                        <strong>الحالة:</strong> <span class="badge bg-${user.isActive ? 'success' : 'secondary'}">${user.isActive ? 'نشط' : 'معطل'}</span>
                    </div>
                    <h6>الصلاحيات:</h6>
                    <ul class="list-group">
                        ${permissionsList}
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تبديل حالة المستخدم
 */
function toggleUserStatus(id) {
    const user = appData.users.find(u => u.id === id);
    if (!user || user.id === 1) return; // لا يمكن تعطيل المدير الرئيسي

    const newStatus = !user.isActive;
    const action = newStatus ? 'تفعيل' : 'تعطيل';

    if (confirm(`هل أنت متأكد من ${action} المستخدم "${user.fullName}"؟`)) {
        user.isActive = newStatus;
        saveData();
        refreshUsers();
        alert(`تم ${action} المستخدم بنجاح`);
    }
}

/**
 * حذف مستخدم
 */
function deleteUser(id) {
    const user = appData.users.find(u => u.id === id);
    if (!user || user.id === 1) return; // لا يمكن حذف المدير الرئيسي

    if (confirm(`هل أنت متأكد من حذف المستخدم "${user.fullName}"؟\n\nهذا الإجراء لا يمكن التراجع عنه.`)) {
        appData.users = appData.users.filter(u => u.id !== id);
        saveData();
        refreshUsers();
        alert('تم حذف المستخدم بنجاح');
    }
}

/**
 * حذف فاتورة
 */
function deleteInvoice(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('salesInvoices') && !hasPermission('purchaseInvoices')) {
        alert('ليس لديك صلاحية لحذف الفواتير');
        return;
    }

    const invoice = appData.invoices.find(inv => inv.id === id);
    if (!invoice) {
        alert('الفاتورة غير موجودة');
        return;
    }

    const invoiceTypeText = invoice.invoiceType === 'sale' ? 'المبيعات' : 'المشتريات';
    const clientName = getClientName(invoice);

    if (confirm(`هل أنت متأكد من حذف فاتورة ${invoiceTypeText} رقم ${invoice.invoiceNumber}؟\n\nالعميل/المورد: ${clientName}\nالمبلغ: ${formatCurrency(invoice.totalAmount)}\n\nهذا الإجراء لا يمكن التراجع عنه وسيؤثر على:\n- أرصدة العملاء/الموردين\n- حركة المخزون\n- القيود المحاسبية`)) {

        try {
            console.log('🗑️ بدء حذف الفاتورة:', invoice.invoiceNumber);

            // عكس تأثير الفاتورة على المخزون (إذا كانت مؤكدة)
            if (invoice.status === 'confirmed') {
                invoice.items.forEach(item => {
                    const product = appData.products.find(p => p.id === item.productId);
                    if (product) {
                        // عكس حركة المخزون
                        if (invoice.invoiceType === 'sale') {
                            product.quantity += item.quantity; // إرجاع الكمية
                        } else {
                            product.quantity -= item.quantity; // طرح الكمية
                        }
                        console.log(`📦 تم تعديل مخزون ${product.name}: ${product.quantity}`);
                    }
                });

                // حذف القيود المحاسبية المرتبطة
                if (appData.journalEntries) {
                    const entriesCountBefore = appData.journalEntries.length;
                    appData.journalEntries = appData.journalEntries.filter(entry => entry.invoiceId !== id);
                    const entriesCountAfter = appData.journalEntries.length;
                    console.log(`📊 تم حذف ${entriesCountBefore - entriesCountAfter} قيد محاسبي`);
                }

                // حذف حركات المخزون المرتبطة
                if (appData.inventoryMovements) {
                    const movementsCountBefore = appData.inventoryMovements.length;
                    appData.inventoryMovements = appData.inventoryMovements.filter(movement =>
                        movement.reference !== invoice.invoiceNumber
                    );
                    const movementsCountAfter = appData.inventoryMovements.length;
                    console.log(`📦 تم حذف ${movementsCountBefore - movementsCountAfter} حركة مخزون`);
                }
            }

            // عكس تأثير الفاتورة على أرصدة العملاء/الموردين
            const currency = invoice.currency || appData.settings.currency || 'SYP';
            if (invoice.invoiceType === 'sale' && invoice.customerId) {
                const customer = appData.customers.find(c => c.id === invoice.customerId);
                if (customer) {
                    // طرح المبلغ من إجمالي المبيعات
                    customer.totalSales = (customer.totalSales || 0) - invoice.totalAmount;
                    customer.transactionCount = Math.max(0, (customer.transactionCount || 1) - 1);

                    // تعديل الرصيد
                    if (customer.balances && customer.balances[currency]) {
                        customer.balances[currency] -= invoice.totalAmount;
                    }
                    if (currency === (appData.settings.currency || 'SYP')) {
                        customer.currentBalance = (customer.currentBalance || 0) - invoice.totalAmount;
                    }
                    console.log(`👤 تم تعديل رصيد العميل ${customer.name}`);
                }
            } else if (invoice.invoiceType === 'purchase' && invoice.supplierId) {
                const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
                if (supplier) {
                    // طرح المبلغ من إجمالي المشتريات
                    supplier.totalPurchases = (supplier.totalPurchases || 0) - invoice.totalAmount;
                    supplier.transactionCount = Math.max(0, (supplier.transactionCount || 1) - 1);

                    // تعديل الرصيد
                    if (supplier.balances && supplier.balances[currency]) {
                        supplier.balances[currency] -= invoice.totalAmount;
                    }
                    if (currency === (appData.settings.currency || 'SYP')) {
                        supplier.currentBalance = (supplier.currentBalance || 0) - invoice.totalAmount;
                    }
                    console.log(`🏢 تم تعديل رصيد المورد ${supplier.name}`);
                }
            }

            // حذف الفاتورة
            appData.invoices = appData.invoices.filter(inv => inv.id !== id);

            // حفظ البيانات
            saveData();

            console.log('✅ تم حذف الفاتورة بنجاح');
            alert('تم حذف الفاتورة بنجاح');

            // تحديث الصفحة الحالية
            const currentPage = document.querySelector('.nav-link.active')?.getAttribute('onclick')?.match(/showPage\('([^']+)'\)/)?.[1];
            if (currentPage) {
                showPage(currentPage);
            }

        } catch (error) {
            console.error('❌ خطأ في حذف الفاتورة:', error);
            alert('حدث خطأ أثناء حذف الفاتورة: ' + error.message);
        }
    }
}

/**
 * الحصول على اسم العميل/المورد من الفاتورة
 */
function getClientName(invoice) {
    if (invoice.invoiceType === 'sale' && invoice.customerId) {
        const customer = appData.customers.find(c => c.id === invoice.customerId);
        return customer ? customer.name : 'عميل محذوف';
    } else if (invoice.invoiceType === 'purchase' && invoice.supplierId) {
        const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
        return supplier ? supplier.name : 'مورد محذوف';
    }
    return 'غير محدد';
}

/**
 * حذف سند قبض أو دفع
 */
function deletePayment(id) {
    // التحقق من الصلاحيات
    if (!hasPermission('receipts') && !hasPermission('payments')) {
        alert('ليس لديك صلاحية لحذف السندات');
        return;
    }

    const payment = appData.payments.find(p => p.id === id);
    if (!payment) {
        alert('السند غير موجود');
        return;
    }

    const paymentTypeText = payment.type === 'receipt' ? 'القبض' : 'الدفع';
    const clientName = payment.type === 'receipt' ?
        (appData.customers.find(c => c.id === payment.customerId)?.name || 'عميل محذوف') :
        (appData.suppliers.find(s => s.id === payment.supplierId)?.name || 'مورد محذوف');

    if (confirm(`هل أنت متأكد من حذف سند ${paymentTypeText} رقم ${payment.number}؟\n\nالعميل/المورد: ${clientName}\nالمبلغ: ${formatCurrency(payment.amount)}\n\nهذا الإجراء لا يمكن التراجع عنه وسيؤثر على:\n- أرصدة العملاء/الموردين\n- القيود المحاسبية`)) {

        try {
            console.log('🗑️ بدء حذف السند:', payment.number);

            // عكس تأثير السند على أرصدة العملاء/الموردين
            const currency = payment.currency || appData.settings.currency || 'SYP';

            if (payment.type === 'receipt' && payment.customerId) {
                const customer = appData.customers.find(c => c.id === payment.customerId);
                if (customer) {
                    // طرح المبلغ من إجمالي المدفوعات وإضافته للرصيد
                    customer.totalPayments = (customer.totalPayments || 0) - payment.amount;
                    customer.transactionCount = Math.max(0, (customer.transactionCount || 1) - 1);

                    if (customer.balances && customer.balances[currency]) {
                        customer.balances[currency] += payment.amount; // إرجاع المبلغ للرصيد
                    }
                    if (currency === (appData.settings.currency || 'SYP')) {
                        customer.currentBalance = (customer.currentBalance || 0) + payment.amount;
                    }
                    console.log(`👤 تم تعديل رصيد العميل ${customer.name}`);
                }
            } else if (payment.type === 'payment' && payment.supplierId) {
                const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
                if (supplier) {
                    // طرح المبلغ من إجمالي المدفوعات وإضافته للرصيد
                    supplier.totalPayments = (supplier.totalPayments || 0) - payment.amount;
                    supplier.transactionCount = Math.max(0, (supplier.transactionCount || 1) - 1);

                    if (supplier.balances && supplier.balances[currency]) {
                        supplier.balances[currency] += payment.amount; // إرجاع المبلغ للرصيد
                    }
                    if (currency === (appData.settings.currency || 'SYP')) {
                        supplier.currentBalance = (supplier.currentBalance || 0) + payment.amount;
                    }
                    console.log(`🏢 تم تعديل رصيد المورد ${supplier.name}`);
                }
            }

            // حذف القيود المحاسبية المرتبطة
            if (appData.journalEntries) {
                const entriesCountBefore = appData.journalEntries.length;
                appData.journalEntries = appData.journalEntries.filter(entry => entry.paymentId !== id);
                const entriesCountAfter = appData.journalEntries.length;
                console.log(`📊 تم حذف ${entriesCountBefore - entriesCountAfter} قيد محاسبي`);
            }

            // حذف السند
            appData.payments = appData.payments.filter(p => p.id !== id);

            // حفظ البيانات
            saveData();

            console.log('✅ تم حذف السند بنجاح');
            alert('تم حذف السند بنجاح');

            // تحديث الصفحة الحالية
            const currentPage = document.querySelector('.nav-link.active')?.getAttribute('onclick')?.match(/showPage\('([^']+)'\)/)?.[1];
            if (currentPage) {
                showPage(currentPage);
            }

        } catch (error) {
            console.error('❌ خطأ في حذف السند:', error);
            alert('حدث خطأ أثناء حذف السند: ' + error.message);
        }
    }
}

/**
 * صفحة إضافة منتج
 */
function getAddProductHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">
                        <i class="fas fa-box-open me-2"></i>
                        إضافة منتج جديد
                    </h1>
                    <button class="btn btn-outline-secondary" onclick="showPage('products')">
                        <i class="fas fa-arrow-right me-2"></i>
                        العودة للقائمة
                    </button>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-box me-2"></i>
                            بيانات المنتج
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="addProductForm" onsubmit="addNewProduct(event)">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="productCode" class="form-label">
                                        <i class="fas fa-barcode me-1"></i>
                                        كود المنتج <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" class="form-control" id="productCode" required>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="productName" class="form-label">
                                        <i class="fas fa-tag me-1"></i>
                                        اسم المنتج <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" class="form-control" id="productName" required>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="productDescription" class="form-label">
                                    <i class="fas fa-align-left me-1"></i>
                                    الوصف
                                </label>
                                <textarea class="form-control" id="productDescription" rows="3"></textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="productUnit" class="form-label">
                                        <i class="fas fa-weight me-1"></i>
                                        الوحدة <span class="text-danger">*</span>
                                    </label>
                                    <select class="form-select" id="productUnit" required>
                                        <option value="">اختر الوحدة</option>
                                        <option value="قطعة">قطعة</option>
                                        <option value="كيلو">كيلو</option>
                                        <option value="متر">متر</option>
                                        <option value="لتر">لتر</option>
                                        <option value="علبة">علبة</option>
                                        <option value="كرتون">كرتون</option>
                                        <option value="طن">طن</option>
                                    </select>
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="productCategory" class="form-label">
                                        <i class="fas fa-list me-1"></i>
                                        الفئة
                                    </label>
                                    <select class="form-select" id="productCategory">
                                        <option value="">اختر الفئة</option>
                                        <option value="إلكترونيات">إلكترونيات</option>
                                        <option value="إكسسوارات">إكسسوارات</option>
                                        <option value="أجهزة">أجهزة</option>
                                        <option value="قطع غيار">قطع غيار</option>
                                        <option value="مواد غذائية">مواد غذائية</option>
                                        <option value="ملابس">ملابس</option>
                                        <option value="أخرى">أخرى</option>
                                    </select>
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="productWarehouse" class="form-label">
                                        <i class="fas fa-warehouse me-1"></i>
                                        المخزن <span class="text-danger">*</span>
                                    </label>
                                    <select class="form-select" id="productWarehouse" required>
                                        <option value="">اختر المخزن</option>
                                        ${appData.warehouses.map(w => `<option value="${w.id}">${w.name}</option>`).join('')}
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="productCostPrice" class="form-label">
                                        <i class="fas fa-dollar-sign me-1"></i>
                                        سعر التكلفة (ل.س) <span class="text-danger">*</span>
                                    </label>
                                    <input type="number" class="form-control" id="productCostPrice" min="0" step="0.01" required>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="productSellingPrice" class="form-label">
                                        <i class="fas fa-money-bill me-1"></i>
                                        سعر البيع (ل.س) <span class="text-danger">*</span>
                                    </label>
                                    <input type="number" class="form-control" id="productSellingPrice" min="0" step="0.01" required>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="productQuantity" class="form-label">
                                        <i class="fas fa-cubes me-1"></i>
                                        الكمية الحالية <span class="text-danger">*</span>
                                    </label>
                                    <input type="number" class="form-control" id="productQuantity" min="0" step="0.01" required>
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="productMinQuantity" class="form-label">
                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                        الحد الأدنى للكمية <span class="text-danger">*</span>
                                    </label>
                                    <input type="number" class="form-control" id="productMinQuantity" min="0" step="0.01" required>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="productBarcode" class="form-label">
                                    <i class="fas fa-qrcode me-1"></i>
                                    الباركود
                                </label>
                                <input type="text" class="form-control" id="productBarcode">
                            </div>

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" onclick="showPage('products')">
                                    <i class="fas fa-times me-2"></i>
                                    إلغاء
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ المنتج
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة تسجيل الدخول
 */
function getLoginHTML() {
    return `
        <div class="row justify-content-center">
            <div class="col-md-4">
                <div class="card shadow-lg">
                    <div class="card-body p-5">
                        <div class="text-center mb-4">
                            <i class="fas fa-calculator fa-3x text-primary mb-3"></i>
                            <h3>برنامج المحاسب الذكي</h3>
                            <h5 class="text-muted">SAM PRO</h5>
                        </div>

                        <form id="loginForm" onsubmit="login(event)">
                            <div class="mb-3">
                                <label for="loginUsername" class="form-label">
                                    <i class="fas fa-user me-1"></i>
                                    اسم المستخدم
                                </label>
                                <input type="text" class="form-control" id="loginUsername" required placeholder="أدخل اسم المستخدم">
                            </div>

                            <div class="mb-3">
                                <label for="loginPassword" class="form-label">
                                    <i class="fas fa-lock me-1"></i>
                                    كلمة المرور
                                </label>
                                <input type="password" class="form-control" id="loginPassword" required placeholder="أدخل كلمة المرور">
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    تسجيل الدخول
                                </button>
                            </div>
                        </form>

                        <div class="text-center mt-4">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                يرجى إدخال بيانات تسجيل الدخول الخاصة بك
                            </small>
                        </div>

                        <div class="text-center mt-4">
                            <small class="text-muted">
                                تطوير: <strong>MOHANNAD AHMAD</strong><br>
                                هاتف: +963-998-171-954
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * صفحة الإعدادات
 */
function getSettingsHTML() {
    const settings = appData.settings;
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-cog me-2"></i>
                    إعدادات النظام
                </h1>
            </div>
        </div>

        <div class="row">
            <!-- إعدادات الشركة -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-building me-2"></i>
                            معلومات الشركة
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="companySettingsForm" onsubmit="saveCompanySettings(event)">
                            <div class="mb-3">
                                <label for="companyName" class="form-label">اسم الشركة</label>
                                <input type="text" class="form-control" id="companyName" value="${settings.companyName || ''}">
                            </div>

                            <div class="mb-3">
                                <label for="companyAddress" class="form-label">عنوان الشركة</label>
                                <textarea class="form-control" id="companyAddress" rows="3">${settings.companyAddress || ''}</textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="companyPhone" class="form-label">هاتف الشركة</label>
                                    <input type="tel" class="form-control" id="companyPhone" value="${settings.companyPhone || ''}">
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="companyEmail" class="form-label">بريد الشركة</label>
                                    <input type="email" class="form-control" id="companyEmail" value="${settings.companyEmail || ''}">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="taxNumber" class="form-label">الرقم الضريبي</label>
                                    <input type="text" class="form-control" id="taxNumber" value="${settings.taxNumber || ''}">
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="currency" class="form-label">العملة الافتراضية</label>
                                    <select class="form-select" id="currency" onchange="updateCurrencySymbol()">
                                        <option value="SYP" ${settings.currency === 'SYP' ? 'selected' : ''}>الليرة السورية (ل.س)</option>
                                        <option value="USD" ${settings.currency === 'USD' ? 'selected' : ''}>الدولار الأمريكي ($)</option>
                                        <option value="EUR" ${settings.currency === 'EUR' ? 'selected' : ''}>اليورو (€)</option>
                                        <option value="SAR" ${settings.currency === 'SAR' ? 'selected' : ''}>الريال السعودي (ر.س)</option>
                                        <option value="AED" ${settings.currency === 'AED' ? 'selected' : ''}>الدرهم الإماراتي (د.إ)</option>
                                        <option value="EGP" ${settings.currency === 'EGP' ? 'selected' : ''}>الجنيه المصري (ج.م)</option>
                                        <option value="JOD" ${settings.currency === 'JOD' ? 'selected' : ''}>الدينار الأردني (د.أ)</option>
                                        <option value="LBP" ${settings.currency === 'LBP' ? 'selected' : ''}>الليرة اللبنانية (ل.ل)</option>
                                        <option value="TRY" ${settings.currency === 'TRY' ? 'selected' : ''}>الليرة التركية (₺)</option>
                                        <option value="GBP" ${settings.currency === 'GBP' ? 'selected' : ''}>الجنيه الإسترليني (£)</option>
                                    </select>
                                </div>
                            </div>

                            <!-- إعدادات العملات المتعددة -->
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="enableMultiCurrency" ${settings.enableMultiCurrency ? 'checked' : ''} onchange="toggleMultiCurrency()">
                                    <label class="form-check-label" for="enableMultiCurrency">
                                        <i class="fas fa-coins me-2"></i>
                                        تفعيل العملات المتعددة
                                    </label>
                                </div>
                                <small class="text-muted">يسمح بإدارة العملاء والموردين بعملات مختلفة</small>
                            </div>

                            <!-- جدول أسعار الصرف -->
                            <div id="exchangeRatesSection" style="display: ${settings.enableMultiCurrency ? 'block' : 'none'};">
                                <label class="form-label">أسعار الصرف (مقابل العملة الافتراضية)</label>
                                <div class="table-responsive">
                                    <table class="table table-sm table-bordered">
                                        <thead class="table-light">
                                            <tr>
                                                <th>العملة</th>
                                                <th>الرمز</th>
                                                <th>سعر الصرف</th>
                                                <th>آخر تحديث</th>
                                            </tr>
                                        </thead>
                                        <tbody id="exchangeRatesTable">
                                            ${getExchangeRatesHTML(settings)}
                                        </tbody>
                                    </table>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="updateExchangeRates()">
                                    <i class="fas fa-sync me-2"></i>تحديث أسعار الصرف
                                </button>
                            </div>

                            <div class="mb-3">
                                <label for="taxRate" class="form-label">معدل الضريبة (%)</label>
                                <input type="number" class="form-control" id="taxRate" min="0" max="100" step="0.01" value="${settings.taxRate || 0}">
                            </div>

                            <div class="d-flex justify-content-between">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-warning" onclick="diagnoseCurrencySettings()">
                                        <i class="fas fa-stethoscope me-2"></i>
                                        تشخيص المشاكل
                                    </button>
                                    <button type="button" class="btn btn-outline-success" onclick="fixCurrencySettings()">
                                        <i class="fas fa-wrench me-2"></i>
                                        إصلاح البيانات
                                    </button>
                                    <button type="button" class="btn btn-outline-info" onclick="testCurrencySettingsSave()">
                                        <i class="fas fa-vial me-2"></i>
                                        اختبار الحفظ
                                    </button>
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ إعدادات الشركة
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- إعدادات النظام -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-cogs me-2"></i>
                            إعدادات النظام
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="systemSettingsForm" onsubmit="saveSystemSettings(event)">
                            <div class="mb-3">
                                <label for="systemPassword" class="form-label">كلمة مرور النظام</label>
                                <input type="password" class="form-control" id="systemPassword" value="${settings.password || '123'}">
                            </div>

                            <div class="mb-3">
                                <label for="companyLogo" class="form-label">شعار الشركة</label>
                                <input type="file" class="form-control" id="companyLogo" accept="image/*" onchange="uploadLogo(this)">
                                <small class="text-muted">يُفضل صورة بحجم 200x100 بكسل</small>
                                ${settings.logoUrl ? `<div class="mt-2"><img src="${settings.logoUrl}" alt="شعار الشركة" style="max-height: 100px;"></div>` : ''}
                            </div>

                            <div class="mb-3">
                                <label for="autoBackup" class="form-label">النسخ الاحتياطي التلقائي</label>
                                <select class="form-select" id="autoBackup">
                                    <option value="disabled" ${settings.autoBackup === 'disabled' ? 'selected' : ''}>معطل</option>
                                    <option value="daily" ${settings.autoBackup === 'daily' ? 'selected' : ''}>يومي</option>
                                    <option value="weekly" ${settings.autoBackup === 'weekly' ? 'selected' : ''}>أسبوعي</option>
                                    <option value="monthly" ${settings.autoBackup === 'monthly' ? 'selected' : ''}>شهري</option>
                                </select>
                            </div>

                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>
                                حفظ إعدادات النظام
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- إعدادات الطباعة -->
        <div class="row">
            <div class="col-12 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-print me-2"></i>
                            إعدادات الطباعة
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="printSettingsForm" onsubmit="savePrintSettings(event)">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-eye me-2"></i>
                                        عرض المعلومات
                                    </h6>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showAppName" ${settings.printSettings?.showAppName !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showAppName">
                                                <i class="fas fa-tag me-2"></i>
                                                إظهار اسم التطبيق في الملفات المطبوعة
                                            </label>
                                        </div>
                                        <small class="text-muted">عرض "SAM PRO" في أسفل الملفات المطبوعة</small>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showCompanyLogo" ${settings.printSettings?.showCompanyLogo !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showCompanyLogo">
                                                <i class="fas fa-image me-2"></i>
                                                إظهار شعار الشركة
                                            </label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showPrintDate" ${settings.printSettings?.showPrintDate !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showPrintDate">
                                                <i class="fas fa-calendar me-2"></i>
                                                إظهار تاريخ الطباعة
                                            </label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showPageNumbers" ${settings.printSettings?.showPageNumbers !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showPageNumbers">
                                                <i class="fas fa-list-ol me-2"></i>
                                                إظهار أرقام الصفحات
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-cogs me-2"></i>
                                        إعدادات التخصيص
                                    </h6>

                                    <div class="mb-3">
                                        <label for="printHeaderText" class="form-label">نص رأس الصفحة (اختياري)</label>
                                        <input type="text" class="form-control" id="printHeaderText" value="${settings.printSettings?.headerText || ''}" placeholder="مثال: تقرير شهري">
                                    </div>

                                    <div class="mb-3">
                                        <label for="printFooterText" class="form-label">نص تذييل الصفحة (اختياري)</label>
                                        <input type="text" class="form-control" id="printFooterText" value="${settings.printSettings?.footerText || ''}" placeholder="مثال: شكراً لتعاملكم معنا">
                                    </div>

                                    <div class="mb-3">
                                        <label for="printOrientation" class="form-label">اتجاه الطباعة</label>
                                        <select class="form-select" id="printOrientation">
                                            <option value="portrait" ${settings.printSettings?.orientation === 'portrait' ? 'selected' : ''}>عمودي (Portrait)</option>
                                            <option value="landscape" ${settings.printSettings?.orientation === 'landscape' ? 'selected' : ''}>أفقي (Landscape)</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="printPageSize" class="form-label">حجم الورق</label>
                                        <select class="form-select" id="printPageSize">
                                            <option value="A4" ${settings.printSettings?.pageSize === 'A4' ? 'selected' : ''}>A4</option>
                                            <option value="A3" ${settings.printSettings?.pageSize === 'A3' ? 'selected' : ''}>A3</option>
                                            <option value="Letter" ${settings.printSettings?.pageSize === 'Letter' ? 'selected' : ''}>Letter</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-info" onclick="previewPrintSettings()">
                                    <i class="fas fa-eye me-2"></i>
                                    معاينة إعدادات الطباعة
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ إعدادات الطباعة
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- إعدادات الطباعة -->
        <div class="row">
            <div class="col-12 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-print me-2"></i>
                            إعدادات الطباعة
                        </h5>
                    </div>
                    <div class="card-body">
                        <form id="printSettingsForm" onsubmit="savePrintSettings(event)">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-eye me-2"></i>
                                        عرض المعلومات
                                    </h6>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showAppName" ${settings.printSettings?.showAppName !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showAppName">
                                                <i class="fas fa-tag me-2"></i>
                                                إظهار اسم التطبيق في الملفات المطبوعة
                                            </label>
                                        </div>
                                        <small class="text-muted">عرض "SAM PRO" في أسفل الملفات المطبوعة</small>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showCompanyLogo" ${settings.printSettings?.showCompanyLogo !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showCompanyLogo">
                                                <i class="fas fa-image me-2"></i>
                                                إظهار شعار الشركة
                                            </label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showPrintDate" ${settings.printSettings?.showPrintDate !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showPrintDate">
                                                <i class="fas fa-calendar me-2"></i>
                                                إظهار تاريخ الطباعة
                                            </label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="showPageNumbers" ${settings.printSettings?.showPageNumbers !== false ? 'checked' : ''}>
                                            <label class="form-check-label" for="showPageNumbers">
                                                <i class="fas fa-list-ol me-2"></i>
                                                إظهار أرقام الصفحات
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <h6 class="mb-3">
                                        <i class="fas fa-cogs me-2"></i>
                                        إعدادات التخصيص
                                    </h6>

                                    <div class="mb-3">
                                        <label for="printHeaderText" class="form-label">نص رأس الصفحة (اختياري)</label>
                                        <input type="text" class="form-control" id="printHeaderText" value="${settings.printSettings?.headerText || ''}" placeholder="مثال: تقرير شهري">
                                    </div>

                                    <div class="mb-3">
                                        <label for="printFooterText" class="form-label">نص تذييل الصفحة (اختياري)</label>
                                        <input type="text" class="form-control" id="printFooterText" value="${settings.printSettings?.footerText || ''}" placeholder="مثال: شكراً لتعاملكم معنا">
                                    </div>

                                    <div class="mb-3">
                                        <label for="printOrientation" class="form-label">اتجاه الطباعة</label>
                                        <select class="form-select" id="printOrientation">
                                            <option value="portrait" ${settings.printSettings?.orientation === 'portrait' ? 'selected' : ''}>عمودي (Portrait)</option>
                                            <option value="landscape" ${settings.printSettings?.orientation === 'landscape' ? 'selected' : ''}>أفقي (Landscape)</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label for="printPageSize" class="form-label">حجم الورق</label>
                                        <select class="form-select" id="printPageSize">
                                            <option value="A4" ${settings.printSettings?.pageSize === 'A4' ? 'selected' : ''}>A4</option>
                                            <option value="A3" ${settings.printSettings?.pageSize === 'A3' ? 'selected' : ''}>A3</option>
                                            <option value="Letter" ${settings.printSettings?.pageSize === 'Letter' ? 'selected' : ''}>Letter</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-info" onclick="previewPrintSettings()">
                                    <i class="fas fa-eye me-2"></i>
                                    معاينة إعدادات الطباعة
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    حفظ إعدادات الطباعة
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- معلومات المطور -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-user-tie me-2"></i>
                            معلومات المطور
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user me-2"></i>المطور</h6>
                                <p class="mb-2"><strong>MOHANNAD AHMAD</strong></p>

                                <h6><i class="fas fa-phone me-2"></i>رقم الهاتف</h6>
                                <p class="mb-2">+963-998-171-954</p>

                                <h6><i class="fas fa-code me-2"></i>التخصص</h6>
                                <p class="mb-2">تطوير تطبيقات الويب والمحاسبة</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-calendar me-2"></i>تاريخ الإصدار</h6>
                                <p class="mb-2">يناير 2025</p>

                                <h6><i class="fas fa-tag me-2"></i>إصدار البرنامج</h6>
                                <p class="mb-2">SAM PRO v1.0.0</p>

                                <h6><i class="fas fa-tools me-2"></i>التقنيات المستخدمة</h6>
                                <p class="mb-2">HTML5, CSS3, JavaScript, Bootstrap</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * الحصول على HTML أسعار الصرف
 */
function getExchangeRatesHTML(settings) {
    const currencies = [
        { code: 'USD', name: 'الدولار الأمريكي', symbol: '$' },
        { code: 'EUR', name: 'اليورو', symbol: '€' },
        { code: 'SAR', name: 'الريال السعودي', symbol: 'ر.س' },
        { code: 'AED', name: 'الدرهم الإماراتي', symbol: 'د.إ' },
        { code: 'EGP', name: 'الجنيه المصري', symbol: 'ج.م' },
        { code: 'JOD', name: 'الدينار الأردني', symbol: 'د.أ' },
        { code: 'LBP', name: 'الليرة اللبنانية', symbol: 'ل.ل' },
        { code: 'TRY', name: 'الليرة التركية', symbol: '₺' },
        { code: 'GBP', name: 'الجنيه الإسترليني', symbol: '£' }
    ];

    const baseCurrency = settings.currency || 'SYP';
    const exchangeRates = settings.exchangeRates || {};

    return currencies
        .filter(curr => curr.code !== baseCurrency)
        .map(currency => {
            const rate = exchangeRates[currency.code] || 1;
            const lastUpdate = exchangeRates[`${currency.code}_updated`] || 'لم يحدث';

            return `
                <tr>
                    <td>${currency.name}</td>
                    <td>${currency.symbol}</td>
                    <td>
                        <input type="number" class="form-control form-control-sm"
                               id="rate_${currency.code}"
                               value="${rate}"
                               min="0" step="0.0001"
                               onchange="updateSingleExchangeRate('${currency.code}', this.value)">
                    </td>
                    <td><small class="text-muted">${lastUpdate}</small></td>
                </tr>
            `;
        }).join('');
}

/**
 * تفعيل/إلغاء تفعيل العملات المتعددة
 */
function toggleMultiCurrency() {
    const checkbox = document.getElementById('enableMultiCurrency');
    const section = document.getElementById('exchangeRatesSection');

    if (checkbox.checked) {
        section.style.display = 'block';
    } else {
        section.style.display = 'none';
    }
}

/**
 * تحديث رمز العملة
 */
function updateCurrencySymbol() {
    const currencySelect = document.getElementById('currency');
    const selectedOption = currencySelect.options[currencySelect.selectedIndex];
    const currencyText = selectedOption.textContent;
    const symbol = currencyText.match(/\(([^)]+)\)/)?.[1] || '';

    // تحديث رمز العملة في الإعدادات مؤقتاً
    if (!appData.settings.currencySymbols) {
        appData.settings.currencySymbols = {};
    }
    appData.settings.currencySymbols[currencySelect.value] = symbol;
}

/**
 * تحديث سعر صرف واحد
 */
function updateSingleExchangeRate(currencyCode, rate) {
    if (!appData.settings.exchangeRates) {
        appData.settings.exchangeRates = {};
    }

    appData.settings.exchangeRates[currencyCode] = parseFloat(rate) || 1;
    appData.settings.exchangeRates[`${currencyCode}_updated`] = formatDateTime(new Date());

    console.log(`تم تحديث سعر صرف ${currencyCode}: ${rate}`);
}

/**
 * تحديث جميع أسعار الصرف
 */
function updateExchangeRates() {
    const currencies = ['USD', 'EUR', 'SAR', 'AED', 'EGP', 'JOD', 'LBP', 'TRY', 'GBP'];
    const baseCurrency = appData.settings.currency || 'SYP';

    if (!appData.settings.exchangeRates) {
        appData.settings.exchangeRates = {};
    }

    currencies.forEach(currency => {
        if (currency !== baseCurrency) {
            const input = document.getElementById(`rate_${currency}`);
            if (input) {
                const rate = parseFloat(input.value) || 1;
                appData.settings.exchangeRates[currency] = rate;
                appData.settings.exchangeRates[`${currency}_updated`] = formatDateTime(new Date());
            }
        }
    });

    saveData();
    alert('تم تحديث أسعار الصرف بنجاح');
}

/**
 * الحصول على رمز العملة
 */
function getCurrencySymbol(currencyCode) {
    const symbols = {
        'SYP': 'ل.س',
        'USD': '$',
        'EUR': '€',
        'SAR': 'ر.س',
        'AED': 'د.إ',
        'EGP': 'ج.م',
        'JOD': 'د.أ',
        'LBP': 'ل.ل',
        'TRY': '₺',
        'GBP': '£'
    };

    return symbols[currencyCode] || currencyCode;
}

/**
 * تحويل المبلغ بين العملات
 */
function convertCurrency(amount, fromCurrency, toCurrency) {
    if (fromCurrency === toCurrency) {
        return amount;
    }

    const baseCurrency = appData.settings.currency || 'SYP';
    const exchangeRates = appData.settings.exchangeRates || {};

    let amountInBase = amount;

    // تحويل إلى العملة الافتراضية أولاً
    if (fromCurrency !== baseCurrency) {
        const fromRate = exchangeRates[fromCurrency] || 1;
        amountInBase = amount / fromRate;
    }

    // تحويل من العملة الافتراضية إلى العملة المطلوبة
    if (toCurrency !== baseCurrency) {
        const toRate = exchangeRates[toCurrency] || 1;
        return amountInBase * toRate;
    }

    return amountInBase;
}

/**
 * تنسيق المبلغ مع العملة
 */
function formatCurrencyWithCode(amount, currencyCode) {
    const symbol = getCurrencySymbol(currencyCode);
    return `${parseFloat(amount).toFixed(2)} ${symbol}`;
}

/**
 * صفحة النسخ الاحتياطي
 */
function getBackupHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-database me-2"></i>
                    النسخ الاحتياطي والاستعادة
                </h1>
            </div>
        </div>

        <div class="row">
            <!-- إنشاء نسخة احتياطية -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-download me-2"></i>
                            إنشاء نسخة احتياطية
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">
                            قم بإنشاء نسخة احتياطية من جميع بيانات النظام لحفظها في مكان آمن.
                        </p>

                        <div class="mb-3">
                            <label for="backupName" class="form-label">اسم النسخة الاحتياطية</label>
                            <input type="text" class="form-control" id="backupName" value="backup_${new Date().toISOString().split('T')[0]}">
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeSettings" checked>
                                <label class="form-check-label" for="includeSettings">
                                    تضمين إعدادات النظام
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeData" checked>
                                <label class="form-check-label" for="includeData">
                                    تضمين جميع البيانات
                                </label>
                            </div>
                        </div>

                        <button type="button" class="btn btn-primary" onclick="createBackup()">
                            <i class="fas fa-download me-2"></i>
                            إنشاء وتحميل النسخة الاحتياطية
                        </button>

                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                سيتم تحميل ملف JSON يحتوي على جميع البيانات
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- استعادة نسخة احتياطية -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-upload me-2"></i>
                            استعادة نسخة احتياطية
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">
                            قم برفع ملف النسخة الاحتياطية لاستعادة البيانات.
                        </p>

                        <div class="mb-3">
                            <label for="backupFile" class="form-label">ملف النسخة الاحتياطية</label>
                            <input type="file" class="form-control" id="backupFile" accept=".json" onchange="validateBackupFile(this)">
                            <small class="text-muted">يجب أن يكون الملف بصيغة JSON</small>
                        </div>

                        <div class="mb-3" id="backupFileInfo" style="display: none;">
                            <div class="alert alert-info">
                                <h6><i class="fas fa-info-circle me-2"></i>معلومات النسخة الاحتياطية</h6>
                                <div id="backupDetails"></div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="confirmRestore">
                                <label class="form-check-label" for="confirmRestore">
                                    أؤكد أنني أريد استبدال البيانات الحالية
                                </label>
                            </div>
                        </div>

                        <button type="button" class="btn btn-warning" onclick="restoreBackup()" disabled id="restoreBtn">
                            <i class="fas fa-upload me-2"></i>
                            استعادة النسخة الاحتياطية
                        </button>

                        <div class="mt-3">
                            <small class="text-danger">
                                <i class="fas fa-exclamation-triangle me-1"></i>
                                تحذير: سيتم استبدال جميع البيانات الحالية
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- إحصائيات البيانات الحالية -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chart-pie me-2"></i>
                            إحصائيات البيانات الحالية
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-primary">${appData.customers.length}</h4>
                                    <small class="text-muted">العملاء</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-success">${appData.suppliers.length}</h4>
                                    <small class="text-muted">الموردين</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-info">${appData.products.length}</h4>
                                    <small class="text-muted">الأصناف</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-warning">${appData.warehouses.length}</h4>
                                    <small class="text-muted">المخازن</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-danger">${appData.invoices.length}</h4>
                                    <small class="text-muted">الفواتير</small>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="border p-3 rounded">
                                    <h4 class="text-secondary">${appData.payments.length}</h4>
                                    <small class="text-muted">السندات</small>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4 text-center">
                            <small class="text-muted">
                                آخر تحديث: ${formatDateTime(new Date())}
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * تصدير إلى PDF مع دعم اللغة العربية المحسن
 */
function exportToPDF(pageType, title) {
    console.log('📄 بدء تصدير PDF محسن:', title);

    try {
        // التحقق من وجود مكتبات PDF
        if (typeof window.jsPDF === 'undefined' && typeof html2canvas === 'undefined') {
            console.warn('⚠️ مكتبات PDF غير متوفرة - استخدام الطباعة كبديل');
            printContent(pageType, title);
            return;
        }

        // إنشاء محتوى محسن للتصدير
        const exportContent = document.createElement('div');
        exportContent.style.cssText = `
            font-family: 'Arial', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            direction: rtl;
            text-align: right;
            padding: 20px;
            background: white;
            color: black;
            width: 800px;
            max-width: 800px;
            margin: 0 auto;
            box-sizing: border-box;
        `;

        // إضافة رأس التقرير المحسن
        const header = document.createElement('div');
        header.innerHTML = `
            <div style="text-align: center; margin-bottom: 30px; border-bottom: 3px solid #007bff; padding-bottom: 20px;">
                <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h1 style="margin: 0; font-size: 28px; font-weight: bold;">${title}</h1>
                    <p style="margin: 5px 0; font-size: 16px; opacity: 0.9;">برنامج المحاسب الذكي - SAM PRO</p>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 15px;">
                    <p style="margin: 0; color: #666; font-size: 14px;">تاريخ التصدير: ${formatDateTime(new Date().toISOString())}</p>
                    <p style="margin: 0; color: #666; font-size: 14px;">الصفحة: 1</p>
                </div>
            </div>
        `;
        exportContent.appendChild(header);

        // إضافة محتوى الصفحة
        const mainContent = document.getElementById('main-content');
        if (mainContent) {
            const contentClone = mainContent.cloneNode(true);

            // إزالة الأزرار والعناصر غير المطلوبة
            const buttonsToRemove = contentClone.querySelectorAll('button, .btn, .dropdown, .pagination, .modal');
            buttonsToRemove.forEach(btn => btn.remove());

            // تحسين الجداول للطباعة مع تصميم أفضل
            const tables = contentClone.querySelectorAll('table');
            tables.forEach((table, index) => {
                table.style.cssText = `
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                    font-size: 11px;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                    border-radius: 8px;
                    overflow: hidden;
                `;

                const cells = table.querySelectorAll('th, td');
                cells.forEach(cell => {
                    cell.style.cssText = `
                        border: 1px solid #e0e0e0;
                        padding: 10px 8px;
                        text-align: right;
                        vertical-align: middle;
                        line-height: 1.4;
                    `;
                });

                const headers = table.querySelectorAll('th');
                headers.forEach(header => {
                    header.style.cssText += `
                        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                        font-weight: bold;
                        color: #495057;
                        font-size: 12px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    `;
                });

                // تلوين الصفوف بالتناوب
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach((row, rowIndex) => {
                    if (rowIndex % 2 === 1) {
                        row.style.backgroundColor = '#f8f9fa';
                    }
                });
            });

            exportContent.appendChild(contentClone);
        }

        // إضافة تذييل محسن
        const footer = document.createElement('div');
        footer.innerHTML = `
            <div style="text-align: center; margin-top: 40px; padding: 20px; border-top: 2px solid #007bff; background: #f8f9fa; border-radius: 8px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <div style="text-align: right;">
                        <p style="margin: 0; font-size: 12px; color: #666;">تطوير: MOHANNAD AHMAD</p>
                        <p style="margin: 0; font-size: 12px; color: #666;">هاتف: +963-998-171-954</p>
                    </div>
                    <div style="text-align: left;">
                        <p style="margin: 0; font-size: 12px; color: #666;">SAM PRO - برنامج المحاسب الذكي</p>
                        <p style="margin: 0; font-size: 12px; color: #666;">© 2025 جميع الحقوق محفوظة</p>
                    </div>
                </div>
                <div style="text-align: center; padding-top: 10px; border-top: 1px solid #dee2e6;">
                    <p style="margin: 0; font-size: 10px; color: #999;">تم إنشاء هذا التقرير تلقائياً بواسطة نظام SAM PRO</p>
                </div>
            </div>
        `;
        exportContent.appendChild(footer);

        // إضافة المحتوى للصفحة مؤقتاً
        exportContent.style.position = 'absolute';
        exportContent.style.left = '-9999px';
        document.body.appendChild(exportContent);

        // تصدير PDF باستخدام html2canvas و jsPDF مع إعدادات محسنة
        if (typeof html2canvas !== 'undefined' && typeof window.jsPDF !== 'undefined') {
            console.log('📸 بدء تحويل المحتوى إلى صورة...');

            html2canvas(exportContent, {
                scale: 2, // جودة أعلى
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                width: 800,
                height: exportContent.scrollHeight,
                scrollX: 0,
                scrollY: 0,
                windowWidth: 800,
                windowHeight: exportContent.scrollHeight,
                logging: false, // تقليل الرسائل
                imageTimeout: 15000, // مهلة زمنية أطول
                removeContainer: true
            }).then(canvas => {
                console.log('✅ تم تحويل المحتوى إلى صورة بنجاح');
                console.log('📄 بدء إنشاء ملف PDF...');

                const imgData = canvas.toDataURL('image/png', 0.95); // جودة أفضل
                const { jsPDF } = window.jsPDF;

                // إنشاء PDF بحجم A4
                const pdf = new jsPDF({
                    orientation: 'portrait',
                    unit: 'mm',
                    format: 'a4',
                    compress: true
                });

                const pageWidth = 210; // عرض A4
                const pageHeight = 297; // ارتفاع A4
                const margin = 10; // هامش
                const imgWidth = pageWidth - (margin * 2);
                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                let heightLeft = imgHeight;
                let position = margin;
                let pageNumber = 1;

                // إضافة الصفحة الأولى
                pdf.addImage(imgData, 'PNG', margin, position, imgWidth, imgHeight);
                heightLeft -= (pageHeight - margin * 2);

                // إضافة صفحات إضافية إذا لزم الأمر
                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight + margin;
                    pdf.addPage();
                    pageNumber++;
                    pdf.addImage(imgData, 'PNG', margin, position, imgWidth, imgHeight);
                    heightLeft -= (pageHeight - margin * 2);
                }

                console.log(`📄 تم إنشاء PDF بـ ${pageNumber} صفحة`);

                // حفظ الملف مع اسم محسن
                const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                const fileName = `${title.replace(/[^\w\u0600-\u06FF\s]/g, '').replace(/\s+/g, '_')}_${timestamp}.pdf`;

                try {
                    pdf.save(fileName);
                    console.log('✅ تم حفظ PDF بنجاح:', fileName);

                    // إزالة المحتوى المؤقت
                    if (document.body.contains(exportContent)) {
                        document.body.removeChild(exportContent);
                    }

                    showSuccessToast(`تم تصدير PDF بنجاح! الملف: ${fileName}`);

                } catch (saveError) {
                    console.error('❌ خطأ في حفظ PDF:', saveError);
                    throw saveError;
                }

            }).catch(error => {
                console.error('❌ خطأ في تصدير PDF:', error);

                // إزالة المحتوى المؤقت
                if (document.body.contains(exportContent)) {
                    document.body.removeChild(exportContent);
                }

                // عرض رسالة خطأ مفصلة
                const errorMessage = error.message || 'خطأ غير معروف';
                alert(`حدث خطأ أثناء تصدير PDF:\n${errorMessage}\n\nسيتم استخدام الطباعة كبديل.`);

                // استخدام الطباعة كبديل
                setTimeout(() => printContent(pageType, title), 500);
            });
        } else {
            // استخدام window.print كبديل
            console.warn('⚠️ مكتبات PDF غير متوفرة - استخدام الطباعة');
            if (document.body.contains(exportContent)) {
                document.body.removeChild(exportContent);
            }
            printContent(pageType, title);
        }

    } catch (error) {
        console.error('❌ خطأ في تصدير PDF:', error);
        alert('حدث خطأ أثناء تصدير PDF: ' + error.message);
    }
}

/**
 * تصدير إلى Excel مع دعم اللغة العربية
 */
function exportToExcel(pageType, title) {
    console.log('📊 بدء تصدير Excel:', title);

    try {
        // التحقق من وجود XLSX
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        let data = [];
        let headers = [];

        // جمع البيانات حسب نوع الصفحة
        if (pageType === 'journal') {
            headers = ['التاريخ', 'نوع العملية', 'الوصف', 'الحساب المدين', 'الحساب الدائن', 'المبلغ المدين', 'المبلغ الدائن', 'المرجع'];

            const entries = (appData.journalEntries || []).filter(entry => !entry.currency || entry.currency === (appData.settings.currency || 'SYP'));
            data = entries.map(entry => [
                formatDate(entry.entryDate || entry.date),
                getEntryTypeInfo(entry).text,
                entry.description || '',
                entry.debitAccount || '',
                entry.creditAccount || '',
                entry.debitAmount || 0,
                entry.creditAmount || 0,
                entry.reference || ''
            ]);
        } else if (pageType === 'currency-balances') {
            headers = ['العملة', 'الرمز', 'إدخالات العملاء', 'إخراجات العملاء', 'إدخالات الموردين', 'إخراجات الموردين', 'صافي الرصيد', 'الحالة'];

            const balanceData = calculateAccurateBalances();
            const currencySymbols = {
                'SYP': 'ل.س', 'USD': '$', 'EUR': '€', 'TRY': '₺', 'SAR': 'ر.س', 'AED': 'د.إ'
            };
            const currencyNames = {
                'SYP': 'الليرة السورية', 'USD': 'الدولار الأمريكي', 'EUR': 'اليورو',
                'TRY': 'الليرة التركية', 'SAR': 'الريال السعودي', 'AED': 'الدرهم الإماراتي'
            };

            data = Array.from(balanceData.currencies).map(currency => {
                const totals = balanceData.totals[currency];
                const symbol = currencySymbols[currency] || currency;
                const name = currencyNames[currency] || currency;
                const netBalance = totals.net;
                const statusText = netBalance > 0 ? 'موجب' : netBalance < 0 ? 'سالب' : 'متوازن';

                return [
                    name,
                    symbol,
                    totals.customerInflows,
                    totals.customerOutflows,
                    totals.supplierInflows,
                    totals.supplierOutflows,
                    netBalance,
                    statusText
                ];
            });
        } else if (pageType === 'sales-report') {
            headers = ['رقم الفاتورة', 'التاريخ', 'العميل', 'المبلغ الإجمالي', 'العملة', 'المبلغ المدفوع', 'المبلغ المتبقي', 'الحالة'];

            // الحصول على فواتير المبيعات المفلترة
            const fromDate = document.getElementById('salesReportFromDate')?.value;
            const toDate = document.getElementById('salesReportToDate')?.value;
            const customerId = document.getElementById('salesReportCustomer')?.value;

            let salesInvoices = (appData.invoices || []).filter(inv =>
                inv.invoiceType === 'sale' &&
                inv.status === 'confirmed'
            );

            if (fromDate && toDate) {
                salesInvoices = salesInvoices.filter(inv =>
                    inv.invoiceDate >= fromDate && inv.invoiceDate <= toDate
                );
            }

            if (customerId) {
                salesInvoices = salesInvoices.filter(inv => inv.customerId == customerId);
            }

            data = salesInvoices.map(invoice => {
                const customer = appData.customers?.find(c => c.id === invoice.customerId);
                const currency = invoice.currency || 'SYP';
                const total = invoice.totalAmount || 0;
                const paid = invoice.paidAmount || 0;
                const remaining = total - paid;
                const status = getInvoiceStatus(invoice);
                const statusText = status === 'paid' ? 'مدفوعة' : status === 'partial' ? 'جزئية' : 'معلقة';

                return [
                    invoice.invoiceNumber || '',
                    formatDate(invoice.invoiceDate),
                    customer ? customer.name : 'عميل محذوف',
                    total,
                    currency,
                    paid,
                    remaining,
                    statusText
                ];
            });
        } else if (pageType === 'purchase-report') {
            headers = ['رقم الفاتورة', 'التاريخ', 'المورد', 'المبلغ الإجمالي', 'العملة', 'المبلغ المدفوع', 'المبلغ المتبقي', 'الحالة'];

            // الحصول على فواتير المشتريات المفلترة
            const fromDate = document.getElementById('purchaseReportFromDate')?.value;
            const toDate = document.getElementById('purchaseReportToDate')?.value;
            const supplierId = document.getElementById('purchaseReportSupplier')?.value;

            let purchaseInvoices = (appData.invoices || []).filter(inv =>
                inv.invoiceType === 'purchase' &&
                inv.status === 'confirmed'
            );

            if (fromDate && toDate) {
                purchaseInvoices = purchaseInvoices.filter(inv =>
                    inv.invoiceDate >= fromDate && inv.invoiceDate <= toDate
                );
            }

            if (supplierId) {
                purchaseInvoices = purchaseInvoices.filter(inv => inv.supplierId == supplierId);
            }

            data = purchaseInvoices.map(invoice => {
                const supplier = appData.suppliers?.find(s => s.id === invoice.supplierId);
                const currency = invoice.currency || 'SYP';
                const total = invoice.totalAmount || 0;
                const paid = invoice.paidAmount || 0;
                const remaining = total - paid;
                const status = getInvoiceStatus(invoice);
                const statusText = status === 'paid' ? 'مدفوعة' : status === 'partial' ? 'جزئية' : 'معلقة';

                return [
                    invoice.invoiceNumber || '',
                    formatDate(invoice.invoiceDate),
                    supplier ? supplier.name : 'مورد محذوف',
                    total,
                    currency,
                    paid,
                    remaining,
                    statusText
                ];
            });
        }

        // إنشاء ورقة العمل
        const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);

        // تحسين عرض الأعمدة بناءً على المحتوى
        const colWidths = headers.map((header, index) => {
            let maxLength = header.length;

            // فحص طول البيانات في كل عمود
            data.forEach(row => {
                if (row[index] && row[index].toString().length > maxLength) {
                    maxLength = row[index].toString().length;
                }
            });

            // تحديد عرض مناسب (بحد أدنى 10 وحد أقصى 30)
            return { wch: Math.min(Math.max(maxLength + 2, 10), 30) };
        });
        worksheet['!cols'] = colWidths;

        // تنسيق الخلايا
        const range = XLSX.utils.decode_range(worksheet['!ref']);

        // تنسيق رأس الجدول
        for (let col = range.s.c; col <= range.e.c; col++) {
            const headerCell = XLSX.utils.encode_cell({ r: 0, c: col });
            if (!worksheet[headerCell]) continue;

            worksheet[headerCell].s = {
                font: { bold: true, color: { rgb: "FFFFFF" } },
                fill: { fgColor: { rgb: "366092" } },
                alignment: { horizontal: "center", vertical: "center" },
                border: {
                    top: { style: "thin", color: { rgb: "000000" } },
                    bottom: { style: "thin", color: { rgb: "000000" } },
                    left: { style: "thin", color: { rgb: "000000" } },
                    right: { style: "thin", color: { rgb: "000000" } }
                }
            };
        }

        // تنسيق خلايا البيانات
        for (let row = range.s.r + 1; row <= range.e.r; row++) {
            for (let col = range.s.c; col <= range.e.c; col++) {
                const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
                if (!worksheet[cellAddress]) continue;

                worksheet[cellAddress].s = {
                    alignment: { horizontal: "center", vertical: "center" },
                    border: {
                        top: { style: "thin", color: { rgb: "CCCCCC" } },
                        bottom: { style: "thin", color: { rgb: "CCCCCC" } },
                        left: { style: "thin", color: { rgb: "CCCCCC" } },
                        right: { style: "thin", color: { rgb: "CCCCCC" } }
                    }
                };

                // تنسيق خاص للأرقام
                if (typeof worksheet[cellAddress].v === 'number') {
                    worksheet[cellAddress].s.numFmt = '#,##0.00';
                }
            }
        }

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, title);

        // إضافة معلومات إضافية
        const infoSheet = XLSX.utils.aoa_to_sheet([
            ['معلومات التقرير'],
            ['العنوان', title],
            ['تاريخ التصدير', formatDateTime(new Date().toISOString())],
            ['عدد السجلات', data.length],
            [''],
            ['معلومات المطور'],
            ['الاسم', 'MOHANNAD AHMAD'],
            ['الهاتف', '+963-998-171-954'],
            ['البرنامج', 'SAM PRO - برنامج المحاسب الذكي'],
            ['السنة', '© 2025']
        ]);
        XLSX.utils.book_append_sheet(workbook, infoSheet, 'معلومات');

        // حفظ الملف
        const fileName = `${title.replace(/\s+/g, '_')}_${new Date().getTime()}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير Excel بنجاح:', fileName);
        showSuccessToast('تم تصدير Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * عرض رسالة خطأ محسنة
 */
function showErrorToast(message) {
    console.error('❌ خطأ:', message);

    // إنشاء عنصر التنبيه
    const toast = document.createElement('div');
    toast.className = 'toast align-items-center text-white bg-danger border-0 position-fixed';
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');

    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-exclamation-circle me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    document.body.appendChild(toast);

    // إظهار التنبيه
    const bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: 5000
    });
    bsToast.show();

    // إزالة العنصر بعد الإخفاء
    toast.addEventListener('hidden.bs.toast', function() {
        document.body.removeChild(toast);
    });
}

/**
 * عرض رسالة تحذير محسنة
 */
function showWarningToast(message) {
    console.warn('⚠️ تحذير:', message);

    // إنشاء عنصر التنبيه
    const toast = document.createElement('div');
    toast.className = 'toast align-items-center text-dark bg-warning border-0 position-fixed';
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');

    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-exclamation-triangle me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    document.body.appendChild(toast);

    // إظهار التنبيه
    const bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: 4000
    });
    bsToast.show();

    // إزالة العنصر بعد الإخفاء
    toast.addEventListener('hidden.bs.toast', function() {
        document.body.removeChild(toast);
    });
}

/**
 * إظهار رسالة نجاح محسنة
 */
function showSuccessToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed top-0 end-0 m-3';
    toast.style.zIndex = '9999';
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    document.body.appendChild(toast);

    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    setTimeout(() => {
        if (document.body.contains(toast)) {
            document.body.removeChild(toast);
        }
    }, 5000);
}

/**
 * إظهار رسالة معلومات محسنة
 */
function showInfoToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast align-items-center text-white bg-info border-0 position-fixed top-0 end-0 m-3';
    toast.style.zIndex = '9999';
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-info-circle me-2"></i>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    document.body.appendChild(toast);

    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    setTimeout(() => {
        if (document.body.contains(toast)) {
            document.body.removeChild(toast);
        }
    }, 5000);
}

/**
 * تحديث خيارات العملة في تقرير المبيعات
 */
function updateSalesReportCurrency() {
    const currencySelect = document.getElementById('salesReportCurrency');
    const conversionOptions = document.getElementById('currencyConversionOptions');

    if (!currencySelect || !conversionOptions) return;

    const selectedCurrency = currencySelect.value;

    if (selectedCurrency === 'ALL') {
        // إظهار خيارات التحويل عند اختيار جميع العملات
        conversionOptions.style.display = 'block';
    } else {
        // إخفاء خيارات التحويل عند اختيار عملة محددة
        conversionOptions.style.display = 'none';

        // مسح خيارات التحويل
        const convertToCurrency = document.getElementById('convertToCurrency');
        const conversionRate = document.getElementById('conversionRate');
        if (convertToCurrency) convertToCurrency.value = '';
        if (conversionRate) conversionRate.value = '';
    }
}

/**
 * تحديث سعر الصرف للتحويل
 */
function updateConversionRate() {
    const convertToCurrency = document.getElementById('convertToCurrency');
    const conversionRate = document.getElementById('conversionRate');
    const salesReportCurrency = document.getElementById('salesReportCurrency');

    if (!convertToCurrency || !conversionRate || !salesReportCurrency) return;

    const targetCurrency = convertToCurrency.value;
    const sourceCurrency = salesReportCurrency.value;

    if (!targetCurrency || sourceCurrency !== 'ALL') {
        conversionRate.value = '';
        return;
    }

    // الحصول على سعر الصرف من الليرة السورية إلى العملة المستهدفة
    const rate = getExchangeRate('SYP', targetCurrency);
    conversionRate.value = rate;
}

/**
 * إنشاء تقرير المبيعات المتقدم
 */
function generateAdvancedSalesReport() {
    console.log('📊 إنشاء تقرير المبيعات المتقدم...');

    // جمع معايير الفلترة
    const fromDate = document.getElementById('salesReportFromDate')?.value;
    const toDate = document.getElementById('salesReportToDate')?.value;
    const currency = document.getElementById('salesReportCurrency')?.value;
    const customerId = document.getElementById('salesReportCustomer')?.value;
    const productId = document.getElementById('salesReportProduct')?.value;
    const status = document.getElementById('salesReportStatus')?.value;
    const convertToCurrency = document.getElementById('convertToCurrency')?.value;
    const conversionRate = parseFloat(document.getElementById('conversionRate')?.value) || 1;

    // التحقق من البيانات المطلوبة
    if (!fromDate || !toDate || !currency) {
        alert('يرجى تحديد التاريخ والعملة');
        return;
    }

    if (new Date(fromDate) > new Date(toDate)) {
        alert('تاريخ البداية يجب أن يكون قبل تاريخ النهاية');
        return;
    }

    // فلترة الفواتير
    let filteredInvoices = [];

    if (appData.invoices) {
        filteredInvoices = appData.invoices.filter(invoice => {
            // فلترة بالتاريخ
            const invoiceDate = new Date(invoice.invoiceDate);
            const from = new Date(fromDate);
            const to = new Date(toDate);

            if (invoiceDate < from || invoiceDate > to) return false;

            // فلترة بنوع الفاتورة (مبيعات فقط)
            if (invoice.invoiceType !== 'sale') return false;

            // فلترة بالعملة
            if (currency !== 'ALL' && invoice.currency !== currency) return false;

            // فلترة بالعميل
            if (customerId && invoice.customerId !== parseInt(customerId)) return false;

            // فلترة بالصنف
            if (productId) {
                const hasProduct = invoice.items && invoice.items.some(item =>
                    item.productId === parseInt(productId)
                );
                if (!hasProduct) return false;
            }

            // فلترة بالحالة
            if (status) {
                const invoiceStatus = getInvoiceStatus(invoice);
                if (invoiceStatus !== status) return false;
            }

            return true;
        });
    }

    console.log(`📋 تم العثور على ${filteredInvoices.length} فاتورة`);

    // حساب الإحصائيات
    const stats = calculateSalesStatistics(filteredInvoices, convertToCurrency, conversionRate);

    // عرض النتائج
    displaySalesReport(filteredInvoices, stats, {
        fromDate, toDate, currency, convertToCurrency, conversionRate
    });

    console.log('✅ تم إنشاء تقرير المبيعات المتقدم');
}

/**
 * حساب إحصائيات المبيعات
 */
function calculateSalesStatistics(invoices, convertToCurrency, conversionRate) {
    const stats = {
        totalAmount: 0,
        totalPaid: 0,
        totalRemaining: 0,
        totalInvoices: invoices.length,
        currencyBreakdown: {},
        statusBreakdown: { paid: 0, partial: 0, pending: 0 },
        convertedTotals: { total: 0, paid: 0, remaining: 0 }
    };

    invoices.forEach(invoice => {
        const currency = invoice.currency || 'SYP';
        const total = invoice.totalAmount || 0;
        const paid = invoice.paidAmount || 0;
        const remaining = total - paid;

        // تجميع حسب العملة
        if (!stats.currencyBreakdown[currency]) {
            stats.currencyBreakdown[currency] = {
                total: 0, paid: 0, remaining: 0, count: 0
            };
        }

        stats.currencyBreakdown[currency].total += total;
        stats.currencyBreakdown[currency].paid += paid;
        stats.currencyBreakdown[currency].remaining += remaining;
        stats.currencyBreakdown[currency].count++;

        // تجميع حسب الحالة
        const status = getInvoiceStatus(invoice);
        stats.statusBreakdown[status]++;

        // التحويل إذا كان مطلوباً
        if (convertToCurrency && conversionRate > 0) {
            let convertedTotal = total;
            let convertedPaid = paid;
            let convertedRemaining = remaining;

            if (currency !== convertToCurrency) {
                // تحويل من العملة الأصلية إلى الليرة السورية ثم إلى العملة المستهدفة
                const toSyp = getExchangeRate(currency, 'SYP');
                const toTarget = getExchangeRate('SYP', convertToCurrency);
                const finalRate = toSyp * toTarget;

                convertedTotal = total * finalRate;
                convertedPaid = paid * finalRate;
                convertedRemaining = remaining * finalRate;
            }

            stats.convertedTotals.total += convertedTotal;
            stats.convertedTotals.paid += convertedPaid;
            stats.convertedTotals.remaining += convertedRemaining;
        }
    });

    // حساب الإجماليات العامة
    Object.values(stats.currencyBreakdown).forEach(breakdown => {
        stats.totalAmount += breakdown.total;
        stats.totalPaid += breakdown.paid;
        stats.totalRemaining += breakdown.remaining;
    });

    return stats;
}

/**
 * عرض تقرير المبيعات
 */
function displaySalesReport(invoices, stats, filters) {
    // إظهار قسم التقرير
    const summarySection = document.getElementById('salesReportSummary');
    const noDataSection = document.getElementById('noSalesData');

    if (summarySection) summarySection.style.display = 'block';
    if (noDataSection) noDataSection.style.display = 'none';

    // تحديث ملخص العملات
    updateSalesCurrencySummary(stats.currencyBreakdown);

    // تحديث الإحصائيات الرئيسية
    updateSalesMainStats(stats, filters);

    // تحديث جدول التفاصيل
    updateSalesReportTable(invoices, filters);

    // تحديث معلومات التقرير
    updateSalesReportInfo(filters, stats);
}

/**
 * تحديث ملخص العملات في تقرير المبيعات
 */
function updateSalesCurrencySummary(currencyBreakdown) {
    const container = document.getElementById('salesCurrencySummary');
    if (!container) return;

    const currencies = Object.keys(currencyBreakdown);
    if (currencies.length === 0) {
        container.innerHTML = '<div class="col-12"><div class="alert alert-info">لا توجد بيانات للعرض</div></div>';
        return;
    }

    let html = '';
    currencies.forEach(currency => {
        const data = currencyBreakdown[currency];
        const symbol = getCurrencySymbol(currency);
        const name = getCurrencyName(currency);

        html += `
            <div class="col-md-3">
                <div class="card border-primary shadow-sm">
                    <div class="card-body text-center">
                        <h6 class="card-title text-primary">${name}</h6>
                        <div class="row">
                            <div class="col-6">
                                <small class="text-muted">إجمالي</small>
                                <div class="fw-bold">${formatCurrency(data.total)} ${symbol}</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">فواتير</small>
                                <div class="fw-bold text-primary">${data.count}</div>
                            </div>
                        </div>
                        <hr class="my-2">
                        <div class="row">
                            <div class="col-6">
                                <small class="text-success">مدفوع: ${formatCurrency(data.paid)} ${symbol}</small>
                            </div>
                            <div class="col-6">
                                <small class="text-danger">متبقي: ${formatCurrency(data.remaining)} ${symbol}</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
}

/**
 * تحديث الإحصائيات الرئيسية
 */
function updateSalesMainStats(stats, filters) {
    // تحديث إجمالي المبيعات
    const totalSalesElement = document.getElementById('totalSalesAmount');
    const totalCurrencyElement = document.getElementById('totalSalesCurrency');

    if (filters.convertToCurrency && stats.convertedTotals.total > 0) {
        if (totalSalesElement) totalSalesElement.textContent = formatCurrency(stats.convertedTotals.total);
        if (totalCurrencyElement) totalCurrencyElement.textContent = getCurrencySymbol(filters.convertToCurrency);
    } else if (filters.currency !== 'ALL') {
        const currencyData = stats.currencyBreakdown[filters.currency];
        if (currencyData && totalSalesElement) {
            totalSalesElement.textContent = formatCurrency(currencyData.total);
            if (totalCurrencyElement) totalCurrencyElement.textContent = getCurrencySymbol(filters.currency);
        }
    } else {
        if (totalSalesElement) totalSalesElement.textContent = 'متعدد العملات';
        if (totalCurrencyElement) totalCurrencyElement.textContent = 'متعدد';
    }

    // تحديث عدد الفواتير
    const invoicesCountElement = document.getElementById('totalInvoicesCount');
    const invoicesDateRangeElement = document.getElementById('invoicesDateRange');
    if (invoicesCountElement) invoicesCountElement.textContent = stats.totalInvoices;
    if (invoicesDateRangeElement) {
        invoicesDateRangeElement.textContent = `${filters.fromDate} - ${filters.toDate}`;
    }

    // تحديث متوسط الفاتورة
    const averageElement = document.getElementById('averageInvoiceAmount');
    const averageCurrencyElement = document.getElementById('averageCurrency');
    if (stats.totalInvoices > 0) {
        if (filters.convertToCurrency && stats.convertedTotals.total > 0) {
            const average = stats.convertedTotals.total / stats.totalInvoices;
            if (averageElement) averageElement.textContent = formatCurrency(average);
            if (averageCurrencyElement) averageCurrencyElement.textContent = getCurrencySymbol(filters.convertToCurrency);
        } else {
            if (averageElement) averageElement.textContent = 'متعدد العملات';
            if (averageCurrencyElement) averageCurrencyElement.textContent = '-';
        }
    }

    // تحديث المبلغ المعلق والمدفوع
    const pendingElement = document.getElementById('pendingSalesAmount');
    const paidElement = document.getElementById('paidSalesAmount');
    const pendingCurrencyElement = document.getElementById('pendingCurrency');
    const paidCurrencyElement = document.getElementById('paidCurrency');

    if (filters.convertToCurrency && stats.convertedTotals.total > 0) {
        if (pendingElement) pendingElement.textContent = formatCurrency(stats.convertedTotals.remaining);
        if (paidElement) paidElement.textContent = formatCurrency(stats.convertedTotals.paid);
        if (pendingCurrencyElement) pendingCurrencyElement.textContent = getCurrencySymbol(filters.convertToCurrency);
        if (paidCurrencyElement) paidCurrencyElement.textContent = getCurrencySymbol(filters.convertToCurrency);
    } else {
        if (pendingElement) pendingElement.textContent = 'متعدد';
        if (paidElement) paidElement.textContent = 'متعدد';
        if (pendingCurrencyElement) pendingCurrencyElement.textContent = 'عملات';
        if (paidCurrencyElement) paidCurrencyElement.textContent = 'عملات';
    }

    // تحديث عدد العملات
    const currenciesCountElement = document.getElementById('currenciesCount');
    if (currenciesCountElement) {
        currenciesCountElement.textContent = Object.keys(stats.currencyBreakdown).length;
    }
}

/**
 * تحديث جدول تفاصيل المبيعات
 */
function updateSalesReportTable(invoices, filters) {
    const tableBody = document.getElementById('salesReportTable');
    if (!tableBody) return;

    if (invoices.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="9" class="text-center text-muted py-4">لا توجد فواتير في الفترة المحددة</td></tr>';
        return;
    }

    let html = '';
    let totalAmount = 0;
    let totalPaid = 0;
    let totalRemaining = 0;
    let totalConverted = 0;

    invoices.forEach(invoice => {
        const customer = appData.customers?.find(c => c.id === invoice.customerId);
        const currency = invoice.currency || 'SYP';
        const total = invoice.totalAmount || 0;
        const paid = invoice.paidAmount || 0;
        const remaining = total - paid;
        const status = getInvoiceStatus(invoice);

        // حساب المبلغ المحول
        let convertedAmount = total;
        if (filters.convertToCurrency && currency !== filters.convertToCurrency) {
            const rate = getExchangeRate(currency, filters.convertToCurrency);
            convertedAmount = total * rate;
        }

        totalAmount += total;
        totalPaid += paid;
        totalRemaining += remaining;
        totalConverted += convertedAmount;

        const statusClass = status === 'paid' ? 'success' : status === 'partial' ? 'warning' : 'danger';
        const statusText = status === 'paid' ? 'مدفوعة' : status === 'partial' ? 'جزئية' : 'معلقة';

        html += `
            <tr>
                <td><strong>${invoice.invoiceNumber}</strong></td>
                <td>${formatDate(invoice.invoiceDate)}</td>
                <td>${customer ? customer.name : 'عميل محذوف'}</td>
                <td>${formatCurrency(total)}</td>
                <td><span class="badge bg-primary">${getCurrencySymbol(currency)}</span></td>
                <td class="text-success">${formatCurrency(paid)}</td>
                <td class="text-danger">${formatCurrency(remaining)}</td>
                <td><span class="badge bg-${statusClass}">${statusText}</span></td>
                <td class="text-info">${filters.convertToCurrency ? formatCurrency(convertedAmount) + ' ' + getCurrencySymbol(filters.convertToCurrency) : '-'}</td>
            </tr>
        `;
    });

    tableBody.innerHTML = html;

    // تحديث الإجماليات في التذييل
    const totalAmountElement = document.getElementById('salesTableTotalAmount');
    const totalPaidElement = document.getElementById('salesTableTotalPaid');
    const totalRemainingElement = document.getElementById('salesTableTotalRemaining');
    const convertedTotalElement = document.getElementById('salesTableConvertedTotal');
    const currencyMixElement = document.getElementById('salesTableCurrencyMix');
    const statusSummaryElement = document.getElementById('salesTableStatusSummary');

    if (totalAmountElement) totalAmountElement.textContent = formatCurrency(totalAmount);
    if (totalPaidElement) totalPaidElement.textContent = formatCurrency(totalPaid);
    if (totalRemainingElement) totalRemainingElement.textContent = formatCurrency(totalRemaining);
    if (convertedTotalElement) {
        convertedTotalElement.textContent = filters.convertToCurrency ?
            formatCurrency(totalConverted) + ' ' + getCurrencySymbol(filters.convertToCurrency) : '-';
    }
    if (currencyMixElement) {
        const currencies = [...new Set(invoices.map(inv => inv.currency || 'SYP'))];
        currencyMixElement.textContent = currencies.length === 1 ? getCurrencySymbol(currencies[0]) : 'متعدد';
    }
    if (statusSummaryElement) {
        statusSummaryElement.textContent = `${invoices.length} فاتورة`;
    }
}

/**
 * تحديث معلومات التقرير
 */
function updateSalesReportInfo(filters, stats) {
    // تحديث معلومات الفترة
    const reportPeriodElement = document.getElementById('reportPeriod');
    if (reportPeriodElement) {
        reportPeriodElement.textContent = `${filters.fromDate} إلى ${filters.toDate}`;
    }

    // تحديث العملة المحددة
    const selectedCurrencyElement = document.getElementById('selectedCurrency');
    if (selectedCurrencyElement) {
        if (filters.currency === 'ALL') {
            selectedCurrencyElement.textContent = 'جميع العملات';
        } else {
            selectedCurrencyElement.textContent = getCurrencyName(filters.currency);
        }
    }

    // تحديث عدد الفواتير
    const reportInvoicesCountElement = document.getElementById('reportInvoicesCount');
    if (reportInvoicesCountElement) {
        reportInvoicesCountElement.textContent = stats.totalInvoices;
    }

    // تحديث وقت التحديث
    const reportLastUpdateElement = document.getElementById('reportLastUpdate');
    if (reportLastUpdateElement) {
        reportLastUpdateElement.textContent = formatDateTime(new Date());
    }

    // تحديث معلومات التحويل
    const conversionInfo = document.getElementById('conversionInfo');
    const targetCurrencyInfo = document.getElementById('targetCurrencyInfo');
    const exchangeRateInfo = document.getElementById('exchangeRateInfo');
    const rateDate = document.getElementById('rateDate');

    if (filters.convertToCurrency && conversionInfo) {
        conversionInfo.style.display = 'block';
        if (targetCurrencyInfo) {
            targetCurrencyInfo.textContent = getCurrencyName(filters.convertToCurrency);
        }
        if (exchangeRateInfo) {
            exchangeRateInfo.textContent = filters.conversionRate;
        }
        if (rateDate) {
            rateDate.textContent = formatDate(new Date());
        }
    } else if (conversionInfo) {
        conversionInfo.style.display = 'none';
    }
}

/**
 * الحصول على حالة الفاتورة
 */
function getInvoiceStatus(invoice) {
    const total = invoice.totalAmount || 0;
    const paid = invoice.paidAmount || 0;

    if (paid >= total) return 'paid';
    if (paid > 0) return 'partial';
    return 'pending';
}

/**
 * مسح فلاتر تقرير المبيعات
 */
function clearSalesReportFilters() {
    const elements = [
        'salesReportFromDate', 'salesReportToDate', 'salesReportCurrency',
        'salesReportCustomer', 'salesReportProduct', 'salesReportStatus',
        'convertToCurrency', 'conversionRate'
    ];

    elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.value = '';
        }
    });

    // إخفاء خيارات التحويل
    const conversionOptions = document.getElementById('currencyConversionOptions');
    if (conversionOptions) {
        conversionOptions.style.display = 'none';
    }

    // إخفاء التقرير
    const summarySection = document.getElementById('salesReportSummary');
    const noDataSection = document.getElementById('noSalesData');

    if (summarySection) summarySection.style.display = 'none';
    if (noDataSection) noDataSection.style.display = 'block';
}

/**
 * معاينة تقرير المبيعات
 */
function previewSalesReport() {
    const summarySection = document.getElementById('salesReportSummary');
    if (!summarySection || summarySection.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    // إنشاء نافذة معاينة
    const previewWindow = window.open('', '_blank', 'width=1200,height=800');
    const reportContent = summarySection.innerHTML;

    previewWindow.document.write(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>معاينة تقرير المبيعات</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                .print-header { text-align: center; margin-bottom: 30px; }
                @media print {
                    .no-print { display: none !important; }
                }
            </style>
        </head>
        <body>
            <div class="container-fluid">
                <div class="print-header">
                    <h2>تقرير المبيعات المتقدم</h2>
                    <p class="text-muted">تم إنشاؤه في: ${formatDateTime(new Date())}</p>
                </div>
                ${reportContent}
                <div class="no-print mt-4 text-center">
                    <button class="btn btn-primary" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>
                    <button class="btn btn-secondary" onclick="window.close()">
                        <i class="fas fa-times me-2"></i>إغلاق
                    </button>
                </div>
            </div>
        </body>
        </html>
    `);

    previewWindow.document.close();
}

/**
 * طباعة تقرير المبيعات
 */
function printSalesReport() {
    previewSalesReport();
}

/**
 * تصدير تقرير المبيعات
 */
function exportSalesReport(format) {
    const summarySection = document.getElementById('salesReportSummary');
    if (!summarySection || summarySection.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    if (format === 'excel') {
        exportSalesReportToExcel();
    } else if (format === 'pdf') {
        exportSalesReportToPDF();
    } else if (format === 'print') {
        printSalesReport();
    }
}



/**
 * تحديث خيارات العملة في تقرير المشتريات
 */
function updatePurchaseReportCurrency() {
    const currencySelect = document.getElementById('purchaseReportCurrency');
    const conversionOptions = document.getElementById('purchaseCurrencyConversionOptions');

    if (!currencySelect || !conversionOptions) return;

    const selectedCurrency = currencySelect.value;

    if (selectedCurrency === 'ALL') {
        conversionOptions.style.display = 'block';
    } else {
        conversionOptions.style.display = 'none';

        const convertToCurrency = document.getElementById('purchaseConvertToCurrency');
        const conversionRate = document.getElementById('purchaseConversionRate');
        if (convertToCurrency) convertToCurrency.value = '';
        if (conversionRate) conversionRate.value = '';
    }
}

/**
 * تحديث سعر الصرف للتحويل في تقرير المشتريات
 */
function updatePurchaseConversionRate() {
    const convertToCurrency = document.getElementById('purchaseConvertToCurrency');
    const conversionRate = document.getElementById('purchaseConversionRate');
    const purchaseReportCurrency = document.getElementById('purchaseReportCurrency');

    if (!convertToCurrency || !conversionRate || !purchaseReportCurrency) return;

    const targetCurrency = convertToCurrency.value;
    const sourceCurrency = purchaseReportCurrency.value;

    if (!targetCurrency || sourceCurrency !== 'ALL') {
        conversionRate.value = '';
        return;
    }

    const rate = getExchangeRate('SYP', targetCurrency);
    conversionRate.value = rate;
}

/**
 * إنشاء تقرير المشتريات المتقدم
 */
function generateAdvancedPurchaseReport() {
    console.log('📊 إنشاء تقرير المشتريات المتقدم...');

    // جمع معايير الفلترة
    const fromDate = document.getElementById('purchaseReportFromDate')?.value;
    const toDate = document.getElementById('purchaseReportToDate')?.value;
    const currency = document.getElementById('purchaseReportCurrency')?.value;
    const supplierId = document.getElementById('purchaseReportSupplier')?.value;
    const productId = document.getElementById('purchaseReportProduct')?.value;
    const status = document.getElementById('purchaseReportStatus')?.value;
    const convertToCurrency = document.getElementById('purchaseConvertToCurrency')?.value;
    const conversionRate = parseFloat(document.getElementById('purchaseConversionRate')?.value) || 1;

    // التحقق من البيانات المطلوبة
    if (!fromDate || !toDate || !currency) {
        alert('يرجى تحديد التاريخ والعملة');
        return;
    }

    if (new Date(fromDate) > new Date(toDate)) {
        alert('تاريخ البداية يجب أن يكون قبل تاريخ النهاية');
        return;
    }

    // فلترة الفواتير
    let filteredInvoices = [];

    if (appData.invoices) {
        filteredInvoices = appData.invoices.filter(invoice => {
            // فلترة بالتاريخ
            const invoiceDate = new Date(invoice.invoiceDate);
            const from = new Date(fromDate);
            const to = new Date(toDate);

            if (invoiceDate < from || invoiceDate > to) return false;

            // فلترة بنوع الفاتورة (مشتريات فقط)
            if (invoice.invoiceType !== 'purchase') return false;

            // فلترة بالعملة
            if (currency !== 'ALL' && invoice.currency !== currency) return false;

            // فلترة بالمورد
            if (supplierId && invoice.supplierId !== parseInt(supplierId)) return false;

            // فلترة بالصنف
            if (productId) {
                const hasProduct = invoice.items && invoice.items.some(item =>
                    item.productId === parseInt(productId)
                );
                if (!hasProduct) return false;
            }

            // فلترة بالحالة
            if (status) {
                const invoiceStatus = getInvoiceStatus(invoice);
                if (invoiceStatus !== status) return false;
            }

            return true;
        });
    }

    console.log(`📋 تم العثور على ${filteredInvoices.length} فاتورة مشتريات`);

    // حساب الإحصائيات
    const stats = calculatePurchaseStatistics(filteredInvoices, convertToCurrency, conversionRate);

    // عرض النتائج
    displayPurchaseReport(filteredInvoices, stats, {
        fromDate, toDate, currency, convertToCurrency, conversionRate
    });

    console.log('✅ تم إنشاء تقرير المشتريات المتقدم');
}

/**
 * حساب إحصائيات المشتريات
 */
function calculatePurchaseStatistics(invoices, convertToCurrency, conversionRate) {
    const stats = {
        totalAmount: 0,
        totalPaid: 0,
        totalRemaining: 0,
        totalInvoices: invoices.length,
        currencyBreakdown: {},
        statusBreakdown: { paid: 0, partial: 0, pending: 0 },
        convertedTotals: { total: 0, paid: 0, remaining: 0 }
    };

    invoices.forEach(invoice => {
        const currency = invoice.currency || 'SYP';
        const total = invoice.totalAmount || 0;
        const paid = invoice.paidAmount || 0;
        const remaining = total - paid;

        // تجميع حسب العملة
        if (!stats.currencyBreakdown[currency]) {
            stats.currencyBreakdown[currency] = {
                total: 0, paid: 0, remaining: 0, count: 0
            };
        }

        stats.currencyBreakdown[currency].total += total;
        stats.currencyBreakdown[currency].paid += paid;
        stats.currencyBreakdown[currency].remaining += remaining;
        stats.currencyBreakdown[currency].count++;

        // تجميع حسب الحالة
        const status = getInvoiceStatus(invoice);
        stats.statusBreakdown[status]++;

        // التحويل إذا كان مطلوباً
        if (convertToCurrency && conversionRate > 0) {
            let convertedTotal = total;
            let convertedPaid = paid;
            let convertedRemaining = remaining;

            if (currency !== convertToCurrency) {
                const toSyp = getExchangeRate(currency, 'SYP');
                const toTarget = getExchangeRate('SYP', convertToCurrency);
                const finalRate = toSyp * toTarget;

                convertedTotal = total * finalRate;
                convertedPaid = paid * finalRate;
                convertedRemaining = remaining * finalRate;
            }

            stats.convertedTotals.total += convertedTotal;
            stats.convertedTotals.paid += convertedPaid;
            stats.convertedTotals.remaining += convertedRemaining;
        }
    });

    // حساب الإجماليات العامة
    Object.values(stats.currencyBreakdown).forEach(breakdown => {
        stats.totalAmount += breakdown.total;
        stats.totalPaid += breakdown.paid;
        stats.totalRemaining += breakdown.remaining;
    });

    return stats;
}

/**
 * إضافة مخزن جديد مع التحقق من البيانات
 */
function addWarehouseWithValidation() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'addWarehouseModal';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-warehouse me-2"></i>
                        إضافة مخزن جديد
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addWarehouseForm">
                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-tag me-2"></i>
                                اسم المخزن *
                            </label>
                            <input type="text" class="form-control" id="newWarehouseName" required>
                            <div class="form-text">يجب أن يكون الاسم فريداً</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                الموقع
                            </label>
                            <input type="text" class="form-control" id="newWarehouseLocation">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-user me-2"></i>
                                المدير
                            </label>
                            <input type="text" class="form-control" id="newWarehouseManager">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-phone me-2"></i>
                                رقم الهاتف
                            </label>
                            <input type="tel" class="form-control" id="newWarehousePhone">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-sticky-note me-2"></i>
                                ملاحظات
                            </label>
                            <textarea class="form-control" id="newWarehouseNotes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                    <button type="button" class="btn btn-primary" onclick="saveNewWarehouse()">
                        <i class="fas fa-save me-2"></i>حفظ المخزن
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * حفظ المخزن الجديد
 */
function saveNewWarehouse() {
    const name = document.getElementById('newWarehouseName').value.trim();
    const location = document.getElementById('newWarehouseLocation').value.trim();
    const manager = document.getElementById('newWarehouseManager').value.trim();
    const phone = document.getElementById('newWarehousePhone').value.trim();
    const notes = document.getElementById('newWarehouseNotes').value.trim();

    // التحقق من البيانات المطلوبة
    if (!name) {
        alert('يرجى إدخال اسم المخزن');
        return;
    }

    // التحقق من عدم تكرار الاسم
    const existingWarehouse = appData.warehouses.find(w => w.name.toLowerCase() === name.toLowerCase());
    if (existingWarehouse) {
        alert('يوجد مخزن آخر بنفس الاسم');
        return;
    }

    // إنشاء المخزن الجديد
    const newWarehouse = {
        id: Date.now(),
        name: name,
        location: location,
        manager: manager,
        phone: phone,
        notes: notes,
        isActive: true,
        createdAt: new Date().toISOString()
    };

    // إضافة المخزن
    if (!appData.warehouses) {
        appData.warehouses = [];
    }
    appData.warehouses.push(newWarehouse);

    // حفظ البيانات
    saveData();

    // إغلاق النافذة
    const modal = bootstrap.Modal.getInstance(document.getElementById('addWarehouseModal'));
    modal.hide();

    // تحديث الصفحة
    showPage('warehouses');

    // رسالة نجاح
    alert(`✅ تم إضافة المخزن "${name}" بنجاح!`);
    console.log(`📦 تم إضافة مخزن جديد: ${name} (ID: ${newWarehouse.id})`);
}

/**
 * عرض تفاصيل المخزن
 */
function viewWarehouseDetails(warehouseId) {
    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) {
        alert('لم يتم العثور على المخزن');
        return;
    }

    const relatedProducts = appData.products ? appData.products.filter(p => p.warehouseId === warehouseId) : [];
    const relatedMovements = appData.inventoryMovements ?
        appData.inventoryMovements.filter(mov => mov.warehouseId === warehouseId) : [];

    const totalValue = relatedProducts.reduce((sum, product) =>
        sum + ((product.quantity || 0) * (product.costPrice || 0)), 0);

    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'warehouseDetailsModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-warehouse me-2"></i>
                        تفاصيل المخزن: ${warehouse.name}
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6><i class="fas fa-info-circle me-2"></i>المعلومات الأساسية</h6>
                            <table class="table table-sm">
                                <tr><td><strong>الاسم:</strong></td><td>${warehouse.name}</td></tr>
                                <tr><td><strong>الموقع:</strong></td><td>${warehouse.location || 'غير محدد'}</td></tr>
                                <tr><td><strong>المدير:</strong></td><td>${warehouse.manager || 'غير محدد'}</td></tr>
                                <tr><td><strong>الهاتف:</strong></td><td>${warehouse.phone || 'غير محدد'}</td></tr>
                                <tr><td><strong>تاريخ الإنشاء:</strong></td><td>${formatDate(warehouse.createdAt)}</td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-chart-bar me-2"></i>الإحصائيات</h6>
                            <div class="row text-center">
                                <div class="col-6">
                                    <div class="card border-primary">
                                        <div class="card-body">
                                            <i class="fas fa-boxes fa-2x text-primary mb-2"></i>
                                            <h5 class="text-primary">${relatedProducts.length}</h5>
                                            <small>صنف</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card border-success">
                                        <div class="card-body">
                                            <i class="fas fa-dollar-sign fa-2x text-success mb-2"></i>
                                            <h5 class="text-success">${formatCurrency(totalValue)}</h5>
                                            <small>قيمة المخزون</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    ${warehouse.notes ? `
                    <div class="mb-3">
                        <h6><i class="fas fa-sticky-note me-2"></i>الملاحظات</h6>
                        <div class="alert alert-light">${warehouse.notes}</div>
                    </div>
                    ` : ''}

                    <div class="mb-3">
                        <h6><i class="fas fa-boxes me-2"></i>الأصناف في المخزن (${relatedProducts.length})</h6>
                        ${relatedProducts.length > 0 ? `
                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                            <table class="table table-sm table-striped">
                                <thead class="table-dark">
                                    <tr>
                                        <th>الصنف</th>
                                        <th>الكمية</th>
                                        <th>الوحدة</th>
                                        <th>سعر التكلفة</th>
                                        <th>القيمة</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${relatedProducts.map(product => `
                                    <tr>
                                        <td>${product.name}</td>
                                        <td>${product.quantity || 0}</td>
                                        <td>${product.unit || 'قطعة'}</td>
                                        <td>${formatCurrency(product.costPrice || 0)}</td>
                                        <td>${formatCurrency((product.quantity || 0) * (product.costPrice || 0))}</td>
                                    </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                        ` : '<div class="alert alert-info">لا توجد أصناف في هذا المخزن</div>'}
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إغلاق
                    </button>
                    <button type="button" class="btn btn-primary" onclick="editWarehouse(${warehouseId}); bootstrap.Modal.getInstance(document.getElementById('warehouseDetailsModal')).hide();">
                        <i class="fas fa-edit me-2"></i>تعديل
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * تهيئة صفحة إنشاء الفاتورة الخاصة
 */
function initializeCreateCustomInvoicePage() {
    console.log('🚀 تهيئة صفحة إنشاء الفاتورة الخاصة...');

    // تعيين التاريخ الحالي
    const today = new Date().toISOString().split('T')[0];
    const invoiceDateInput = document.getElementById('customInvoiceDate');
    if (invoiceDateInput) {
        invoiceDateInput.value = today;
    }

    // تعيين تاريخ الاستحقاق (30 يوم من اليوم)
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30);
    const dueDateInput = document.getElementById('customDueDate');
    if (dueDateInput) {
        dueDateInput.value = dueDate.toISOString().split('T')[0];
    }

    // تحديث عرض العملة
    updateCustomCurrencyDisplay();

    console.log('✅ تم تهيئة صفحة إنشاء الفاتورة الخاصة');
}

/**
 * تبديل نوع إدخال العميل/المورد
 */
function toggleClientInputType() {
    const existingClientRadio = document.getElementById('existingClient');
    const manualClientRadio = document.getElementById('manualClient');
    const existingClientSection = document.getElementById('existingClientSection');
    const manualClientSection = document.getElementById('manualClientSection');

    if (existingClientRadio && existingClientRadio.checked) {
        existingClientSection.style.display = 'block';
        manualClientSection.style.display = 'none';

        // مسح البيانات اليدوية
        clearManualClientData();
    } else if (manualClientRadio && manualClientRadio.checked) {
        existingClientSection.style.display = 'none';
        manualClientSection.style.display = 'block';

        // مسح اختيار العميل من القائمة
        const customClientSelect = document.getElementById('customClientSelect');
        if (customClientSelect) {
            customClientSelect.value = '';
        }

        // مسح معلومات العميل
        const customClientInfo = document.getElementById('customClientInfo');
        if (customClientInfo) {
            customClientInfo.innerHTML = 'سيتم استخدام البيانات المدخلة يدوياً';
        }
    }
}

/**
 * مسح البيانات اليدوية للعميل
 */
function clearManualClientData() {
    const fields = [
        'manualClientName', 'manualClientPhone', 'manualClientEmail',
        'manualClientAddress', 'manualClientTaxNumber'
    ];

    fields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';
        }
    });

    // إعادة تعيين العملة إلى الافتراضية
    const manualClientCurrency = document.getElementById('manualClientCurrency');
    if (manualClientCurrency) {
        manualClientCurrency.value = 'SYP';
    }
}

/**
 * تحديث خيارات العميل/المورد للفاتورة الخاصة
 */
function updateCustomClientOptions() {
    const invoiceType = document.getElementById('customInvoiceType')?.value;
    const clientSelect = document.getElementById('customClientSelect');
    const clientLabel = document.getElementById('customClientLabel');

    if (!clientSelect || !clientLabel) return;

    // تحديث التسمية
    if (invoiceType === 'sale') {
        clientLabel.textContent = 'العميل';
    } else if (invoiceType === 'purchase') {
        clientLabel.textContent = 'المورد';
    } else {
        clientLabel.textContent = 'العميل/المورد';
    }

    // مسح الخيارات الحالية
    clientSelect.innerHTML = '<option value="">اختر العميل/المورد</option>';

    // إضافة الخيارات المناسبة
    if (invoiceType === 'sale' && appData.customers) {
        appData.customers.forEach(customer => {
            const option = document.createElement('option');
            option.value = customer.id;
            option.textContent = customer.name;
            clientSelect.appendChild(option);
        });
    } else if (invoiceType === 'purchase' && appData.suppliers) {
        appData.suppliers.forEach(supplier => {
            const option = document.createElement('option');
            option.value = supplier.id;
            option.textContent = supplier.name;
            clientSelect.appendChild(option);
        });
    }

    // تحديث رقم الفاتورة
    updateCustomInvoiceNumber();
}

/**
 * تحديث رقم الفاتورة الخاصة
 */
function updateCustomInvoiceNumber() {
    const invoiceType = document.getElementById('customInvoiceType')?.value;
    const invoiceNumberInput = document.getElementById('customInvoiceNumber');

    if (!invoiceNumberInput || !invoiceType) return;

    // إنشاء رقم فاتورة خاص
    const prefix = invoiceType === 'sale' ? 'CS' : 'CP'; // Custom Sale / Custom Purchase
    const timestamp = Date.now();
    const randomNum = Math.floor(Math.random() * 1000);

    const invoiceNumber = `${prefix}-${timestamp}-${randomNum}`;
    invoiceNumberInput.value = invoiceNumber;
}

/**
 * تحديث معلومات العميل/المورد للفاتورة الخاصة
 */
function updateCustomClientInfo() {
    const invoiceType = document.getElementById('customInvoiceType')?.value;
    const clientSelect = document.getElementById('customClientSelect');
    const clientInfo = document.getElementById('customClientInfo');
    const customInvoiceCurrency = document.getElementById('customInvoiceCurrency');

    if (!clientSelect || !clientInfo) return;

    const clientId = parseInt(clientSelect.value);
    if (!clientId) {
        clientInfo.innerHTML = 'اختر العميل/المورد لعرض المعلومات';
        return;
    }

    // البحث عن العميل/المورد
    let client = null;
    if (invoiceType === 'sale') {
        client = appData.customers?.find(c => c.id === clientId);
    } else if (invoiceType === 'purchase') {
        client = appData.suppliers?.find(s => s.id === clientId);
    }

    if (!client) {
        clientInfo.innerHTML = '<span class="text-danger">العميل/المورد غير موجود</span>';
        return;
    }

    // تحديث عملة الفاتورة إلى عملة العميل/المورد الافتراضية
    if (client.currency && customInvoiceCurrency) {
        customInvoiceCurrency.value = client.currency;
        updateCustomCurrencyDisplay();
    }

    // عرض معلومات العميل/المورد
    const balance = client.currentBalance || 0;
    const balanceText = balance > 0 ?
        `<span class="text-danger">${formatCurrency(Math.abs(balance))} ${getCurrencySymbol(client.currency || 'SYP')} (مدين)</span>` :
        balance < 0 ?
        `<span class="text-success">${formatCurrency(Math.abs(balance))} ${getCurrencySymbol(client.currency || 'SYP')} (دائن)</span>` :
        `<span class="text-muted">${formatCurrency(0)} ${getCurrencySymbol(client.currency || 'SYP')} (متوازن)</span>`;

    const creditLimit = client.creditLimit || 0;
    const creditLimitText = creditLimit > 0 ?
        `<span class="text-info">حد الائتمان: ${formatCurrency(creditLimit)} ${getCurrencySymbol(client.currency || 'SYP')}</span>` : '';

    clientInfo.innerHTML = `
        <div class="row">
            <div class="col-md-6">
                <small class="text-muted">الهاتف:</small> ${client.phone || 'غير محدد'}<br>
                <small class="text-muted">البريد:</small> ${client.email || 'غير محدد'}
            </div>
            <div class="col-md-6">
                <small class="text-muted">الرصيد الحالي:</small> ${balanceText}<br>
                ${creditLimitText}
            </div>
        </div>
        ${client.currency && client.currency !== 'SYP' ?
            `<div class="mt-2"><span class="badge bg-info">العملة الافتراضية: ${getCurrencyName(client.currency)} (${getCurrencySymbol(client.currency)})</span></div>` :
            ''
        }
    `;

    console.log(`✅ تم تحديث معلومات ${invoiceType === 'sale' ? 'العميل' : 'المورد'}:`, client.name);
}

/**
 * تحديث عرض العملة للفاتورة الخاصة
 */
function updateCustomCurrencyDisplay() {
    const currencySelect = document.getElementById('customInvoiceCurrency');
    const exchangeRateInput = document.getElementById('customExchangeRate');
    const defaultRateDisplay = document.getElementById('defaultExchangeRateDisplay');
    const usedRateDisplay = document.getElementById('usedExchangeRateDisplay');

    if (!currencySelect) return;

    const selectedCurrency = currencySelect.value;
    const currencySymbol = getCurrencySymbol(selectedCurrency);

    // تحديث placeholder لسعر الصرف
    if (exchangeRateInput) {
        if (selectedCurrency !== 'SYP') {
            const defaultRate = getExchangeRate('SYP', selectedCurrency);
            exchangeRateInput.placeholder = `السعر الافتراضي: ${defaultRate}`;

            // عرض السعر الافتراضي
            if (defaultRateDisplay) {
                defaultRateDisplay.value = `${defaultRate} ${currencySymbol}`;
            }
        } else {
            exchangeRateInput.placeholder = 'غير مطلوب للعملة الأساسية';
            if (defaultRateDisplay) {
                defaultRateDisplay.value = '1.00 ل.س';
            }
        }
    }

    // تحديث السعر المستخدم
    updateCustomInvoiceExchangeRate();

    // إعادة حساب الإجماليات
    calculateCustomInvoiceTotals();
}

/**
 * تحديث سعر الصرف المخصص للفاتورة الخاصة
 */
function updateCustomInvoiceExchangeRate() {
    const currencySelect = document.getElementById('customInvoiceCurrency');
    const exchangeRateInput = document.getElementById('customExchangeRate');
    const usedRateDisplay = document.getElementById('usedExchangeRateDisplay');

    if (!currencySelect || !usedRateDisplay) return;

    const selectedCurrency = currencySelect.value;
    const currencySymbol = getCurrencySymbol(selectedCurrency);
    const customRate = parseFloat(exchangeRateInput?.value);

    let usedRate;
    if (customRate && customRate > 0) {
        usedRate = customRate;
        // حفظ السعر المخصص
        if (!window.customInvoiceExchangeRates) {
            window.customInvoiceExchangeRates = {};
        }
        window.customInvoiceExchangeRates[selectedCurrency] = customRate;
    } else {
        // استخدام السعر الافتراضي
        usedRate = selectedCurrency !== 'SYP' ? getExchangeRate('SYP', selectedCurrency) : 1;
        // إزالة السعر المخصص
        if (window.customInvoiceExchangeRates && window.customInvoiceExchangeRates[selectedCurrency]) {
            delete window.customInvoiceExchangeRates[selectedCurrency];
        }
    }

    usedRateDisplay.value = `${usedRate} ${currencySymbol}`;

    // إعادة حساب الإجماليات
    calculateCustomInvoiceTotals();
}

/**
 * إضافة عنصر جديد للفاتورة الخاصة
 */
function addCustomInvoiceItem() {
    const tableBody = document.getElementById('customInvoiceItemsTable');
    if (!tableBody) return;

    const itemId = Date.now();
    const row = document.createElement('tr');
    row.id = `customItem_${itemId}`;

    row.innerHTML = `
        <td>
            <input type="text" class="form-control form-control-sm"
                   placeholder="اسم الصنف"
                   onchange="calculateCustomItemTotal(${itemId})">
        </td>
        <td>
            <textarea class="form-control form-control-sm"
                      rows="2"
                      placeholder="المواصفات والتفاصيل"></textarea>
        </td>
        <td>
            <input type="number" class="form-control form-control-sm"
                   min="0" step="0.01" value="1"
                   onchange="calculateCustomItemTotal(${itemId})">
        </td>
        <td>
            <input type="number" class="form-control form-control-sm"
                   min="0" step="0.01" value="0"
                   onchange="calculateCustomItemTotal(${itemId})">
        </td>
        <td>
            <input type="number" class="form-control form-control-sm"
                   min="0" max="100" step="0.01" value="0"
                   onchange="calculateCustomItemTotal(${itemId})">
        </td>
        <td>
            <input type="text" class="form-control form-control-sm"
                   readonly id="customItemTotal_${itemId}" value="0.00">
        </td>
        <td>
            <button type="button" class="btn btn-danger btn-sm"
                    onclick="removeCustomInvoiceItem(${itemId})"
                    title="حذف العنصر">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;

    tableBody.appendChild(row);
    console.log(`➕ تم إضافة عنصر جديد للفاتورة الخاصة (ID: ${itemId})`);
}

/**
 * حذف عنصر من الفاتورة الخاصة
 */
function removeCustomInvoiceItem(itemId) {
    const row = document.getElementById(`customItem_${itemId}`);
    if (row) {
        row.remove();
        calculateCustomInvoiceTotals();
        console.log(`🗑️ تم حذف عنصر من الفاتورة الخاصة (ID: ${itemId})`);
    }
}

/**
 * حساب إجمالي عنصر في الفاتورة الخاصة
 */
function calculateCustomItemTotal(itemId) {
    const row = document.getElementById(`customItem_${itemId}`);
    if (!row) return;

    const inputs = row.querySelectorAll('input');
    const quantity = parseFloat(inputs[2].value) || 0;
    const unitPrice = parseFloat(inputs[3].value) || 0;
    const discountPercent = parseFloat(inputs[4].value) || 0;

    // حساب المجموع قبل الخصم
    const subtotal = quantity * unitPrice;

    // حساب الخصم
    const discountAmount = subtotal * (discountPercent / 100);

    // المجموع النهائي
    const total = subtotal - discountAmount;

    // تحديث عرض المجموع
    const totalInput = document.getElementById(`customItemTotal_${itemId}`);
    if (totalInput) {
        const currencySymbol = getCurrencySymbol(document.getElementById('customInvoiceCurrency')?.value || 'SYP');
        totalInput.value = `${formatNumber(total)} ${currencySymbol}`;
    }

    // إعادة حساب إجماليات الفاتورة
    calculateCustomInvoiceTotals();
}

/**
 * حساب إجماليات الفاتورة الخاصة بدقة محسنة
 */
function calculateCustomInvoiceTotals() {
    const tableBody = document.getElementById('customInvoiceItemsTable');
    const currencySelect = document.getElementById('customInvoiceCurrency');

    if (!tableBody || !currencySelect) return;

    const currency = currencySelect.value || 'SYP';
    const currencySymbol = getCurrencySymbol(currency);

    let subtotalItems = [];

    // حساب المجموع الفرعي من جميع العناصر باستخدام حسابات دقيقة
    const rows = tableBody.querySelectorAll('tr');
    rows.forEach(row => {
        const inputs = row.querySelectorAll('input');
        if (inputs.length >= 5) {
            const quantity = parseFloat(inputs[2].value) || 0;
            const unitPrice = parseFloat(inputs[3].value) || 0;
            const discountPercent = parseFloat(inputs[4].value) || 0;

            // حساب دقيق لكل عنصر
            const itemSubtotal = preciseMultiply(quantity, unitPrice);
            const itemDiscountAmount = calculateDiscount(itemSubtotal, discountPercent);
            const itemTotal = preciseSubtract(itemSubtotal, itemDiscountAmount);

            subtotalItems.push(itemTotal);

            // تحديث عرض المجموع للعنصر
            const totalInput = inputs[5]; // حقل المجموع
            if (totalInput) {
                totalInput.value = `${formatCurrency(itemTotal)} ${currencySymbol}`;
            }
        }
    });

    // حساب المجموع الفرعي الإجمالي
    const subtotal = preciseAdd(...subtotalItems);

    // حساب الخصم العام والضريبة باستخدام الوظائف الدقيقة
    const discountPercentage = parseFloat(document.getElementById('customDiscountPercentage')?.value) || 0;
    const discountAmount = calculateDiscount(subtotal, discountPercentage);

    const taxPercentage = parseFloat(document.getElementById('customTaxPercentage')?.value) || 0;
    const taxableAmount = preciseSubtract(subtotal, discountAmount);
    const taxAmount = calculateTax(taxableAmount, taxPercentage);

    // المجموع النهائي
    const totalAmount = preciseAdd(taxableAmount, taxAmount);

    // تحديث العروض مع التنسيق المحسن
    const subtotalElement = document.getElementById('customSubtotalAmount');
    const discountElement = document.getElementById('customDiscountAmount');
    const taxElement = document.getElementById('customTaxAmount');
    const totalElement = document.getElementById('customTotalAmount');

    if (subtotalElement) {
        subtotalElement.textContent = formatCurrency(subtotal, currency);
    }
    if (discountElement) {
        discountElement.textContent = formatCurrency(discountAmount, currency);
    }
    if (taxElement) {
        taxElement.textContent = formatCurrency(taxAmount, currency);
    }
    if (totalElement) {
        totalElement.textContent = formatCurrency(totalAmount, currency);
    }

    console.log(`💰 تم حساب إجماليات الفاتورة الخاصة بدقة:`, {
        subtotal: formatNumber(subtotal),
        discountAmount: formatNumber(discountAmount),
        taxAmount: formatNumber(taxAmount),
        totalAmount: formatNumber(totalAmount),
        currency,
        itemsCount: subtotalItems.length
    });

    return {
        subtotal,
        discountAmount,
        taxAmount,
        totalAmount,
        currency,
        itemsCount: subtotalItems.length
    };
}

/**
 * إنشاء الفاتورة الخاصة
 */
function createCustomInvoice(event) {
    event.preventDefault();

    console.log('💾 إنشاء فاتورة خاصة...');

    // جمع البيانات الأساسية
    const invoiceData = collectCustomInvoiceData();

    if (!invoiceData) {
        return; // خطأ في البيانات
    }

    try {
        // إضافة الفاتورة إلى قاعدة البيانات
        if (!appData.invoices) {
            appData.invoices = [];
        }

        // تعيين معرف فريد
        invoiceData.id = Date.now();
        invoiceData.createdAt = new Date().toISOString();
        invoiceData.isCustomInvoice = true; // علامة للفواتير الخاصة

        appData.invoices.push(invoiceData);

        // حفظ البيانات
        saveData();

        // رسالة نجاح مع عرض رمز العملة بوضوح
        const currencyName = getCurrencyName(invoiceData.currency);
        const currencySymbol = getCurrencySymbol(invoiceData.currency);
        alert(`✅ تم إنشاء الفاتورة الخاصة بنجاح!

📄 رقم الفاتورة: ${invoiceData.invoiceNumber}
💰 المبلغ الإجمالي: ${formatCurrency(invoiceData.totalAmount, invoiceData.currency)}
💱 العملة: ${currencyName} (${currencySymbol})
👤 ${invoiceData.invoiceType === 'sale' ? 'العميل' : 'المورد'}: ${invoiceData.clientName}`);

        // الانتقال إلى صفحة الفواتير
        if (invoiceData.invoiceType === 'sale') {
            showPage('sales-invoices');
        } else {
            showPage('purchase-invoices');
        }

        console.log('✅ تم إنشاء الفاتورة الخاصة بنجاح:', invoiceData);

    } catch (error) {
        console.error('❌ خطأ في إنشاء الفاتورة الخاصة:', error);
        alert('حدث خطأ أثناء إنشاء الفاتورة. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * جمع بيانات الفاتورة الخاصة
 */
function collectCustomInvoiceData() {
    // البيانات الأساسية
    const invoiceType = document.getElementById('customInvoiceType')?.value;
    const invoiceNumber = document.getElementById('customInvoiceNumber')?.value;
    const invoiceDate = document.getElementById('customInvoiceDate')?.value;
    const dueDate = document.getElementById('customDueDate')?.value;
    const currency = document.getElementById('customInvoiceCurrency')?.value;
    const notes = document.getElementById('customInvoiceNotes')?.value;

    // التحقق من البيانات المطلوبة
    if (!invoiceType || !invoiceNumber || !invoiceDate || !currency) {
        alert('يرجى ملء جميع البيانات المطلوبة');
        return null;
    }

    // بيانات العميل/المورد
    const clientInputType = document.querySelector('input[name="clientInputType"]:checked')?.value;
    let clientData = {};

    if (clientInputType === 'existing') {
        // عميل/مورد من القائمة
        const clientId = parseInt(document.getElementById('customClientSelect')?.value);
        if (!clientId) {
            alert('يرجى اختيار العميل/المورد');
            return null;
        }

        let client = null;
        if (invoiceType === 'sale') {
            client = appData.customers?.find(c => c.id === clientId);
        } else {
            client = appData.suppliers?.find(s => s.id === clientId);
        }

        if (!client) {
            alert('العميل/المورد المحدد غير موجود');
            return null;
        }

        clientData = {
            clientId: clientId,
            clientName: client.name,
            clientPhone: client.phone,
            clientEmail: client.email,
            clientAddress: client.address,
            clientTaxNumber: client.taxNumber,
            isExistingClient: true
        };

    } else if (clientInputType === 'manual') {
        // بيانات يدوية
        const clientName = document.getElementById('manualClientName')?.value?.trim();
        if (!clientName) {
            alert('يرجى إدخال اسم العميل/المورد');
            return null;
        }

        clientData = {
            clientId: null,
            clientName: clientName,
            clientPhone: document.getElementById('manualClientPhone')?.value?.trim(),
            clientEmail: document.getElementById('manualClientEmail')?.value?.trim(),
            clientAddress: document.getElementById('manualClientAddress')?.value?.trim(),
            clientTaxNumber: document.getElementById('manualClientTaxNumber')?.value?.trim(),
            clientCurrency: document.getElementById('manualClientCurrency')?.value,
            isExistingClient: false
        };
    } else {
        alert('يرجى تحديد نوع إدخال العميل/المورد');
        return null;
    }

    // جمع عناصر الفاتورة
    const items = collectCustomInvoiceItems();
    if (!items || items.length === 0) {
        alert('يرجى إضافة عنصر واحد على الأقل للفاتورة');
        return null;
    }

    // حساب الإجماليات
    const totals = calculateCustomInvoiceFinalTotals(items);

    // سعر الصرف المستخدم
    const customExchangeRate = parseFloat(document.getElementById('customExchangeRate')?.value);
    const exchangeRate = customExchangeRate && customExchangeRate > 0 ?
        customExchangeRate :
        (currency !== 'SYP' ? getExchangeRate('SYP', currency) : 1);

    // إنشاء كائن الفاتورة
    const invoiceData = {
        invoiceType: invoiceType,
        invoiceNumber: invoiceNumber,
        invoiceDate: invoiceDate,
        dueDate: dueDate,
        currency: currency,
        exchangeRate: exchangeRate,
        isCustomExchangeRate: !!(customExchangeRate && customExchangeRate > 0),

        // بيانات العميل/المورد
        ...clientData,

        // العناصر
        items: items,

        // الإجماليات
        subtotal: totals.subtotal,
        discountRate: totals.discountRate,
        discountAmount: totals.discountAmount,
        taxRate: totals.taxRate,
        taxAmount: totals.taxAmount,
        totalAmount: totals.totalAmount,

        // حالة الدفع
        paidAmount: 0,
        remainingAmount: totals.totalAmount,
        paymentStatus: 'pending',

        // ملاحظات
        notes: notes,

        // معلومات إضافية
        status: 'active',
        createdBy: 'system', // يمكن تحديثها لاحقاً لنظام المستخدمين
        lastModified: new Date().toISOString()
    };

    return invoiceData;
}

/**
 * جمع عناصر الفاتورة الخاصة
 */
function collectCustomInvoiceItems() {
    const tableBody = document.getElementById('customInvoiceItemsTable');
    if (!tableBody) return [];

    const items = [];
    const rows = tableBody.querySelectorAll('tr');

    rows.forEach((row, index) => {
        const inputs = row.querySelectorAll('input, textarea');
        if (inputs.length >= 5) {
            const productName = inputs[0].value?.trim();
            const description = inputs[1].value?.trim();
            const quantity = parseFloat(inputs[2].value) || 0;
            const unitPrice = parseFloat(inputs[3].value) || 0;
            const discountPercent = parseFloat(inputs[4].value) || 0;

            if (productName && quantity > 0 && unitPrice >= 0) {
                const itemSubtotal = quantity * unitPrice;
                const itemDiscountAmount = itemSubtotal * (discountPercent / 100);
                const itemTotal = itemSubtotal - itemDiscountAmount;

                items.push({
                    id: Date.now() + index,
                    productName: productName,
                    description: description,
                    quantity: quantity,
                    unitPrice: unitPrice,
                    discountPercent: discountPercent,
                    discountAmount: itemDiscountAmount,
                    totalAmount: itemTotal,
                    isCustomItem: true // علامة للعناصر المخصصة
                });
            }
        }
    });

    return items;
}

/**
 * حساب الإجماليات النهائية للفاتورة الخاصة
 */
function calculateCustomInvoiceFinalTotals(items) {
    // المجموع الفرعي
    const subtotal = items.reduce((sum, item) => sum + item.totalAmount, 0);

    // الخصم العام
    const discountRate = parseFloat(document.getElementById('customDiscountPercentage')?.value) || 0;
    const discountAmount = subtotal * (discountRate / 100);

    // الضريبة
    const taxRate = parseFloat(document.getElementById('customTaxPercentage')?.value) || 0;
    const taxableAmount = subtotal - discountAmount;
    const taxAmount = taxableAmount * (taxRate / 100);

    // المجموع النهائي
    const totalAmount = taxableAmount + taxAmount;

    return {
        subtotal,
        discountRate,
        discountAmount,
        taxRate,
        taxAmount,
        totalAmount
    };
}

/**
 * حفظ الفاتورة الخاصة كمسودة
 */
function saveCustomInvoiceAsDraft() {
    console.log('📝 حفظ الفاتورة الخاصة كمسودة...');

    const invoiceData = collectCustomInvoiceData();
    if (!invoiceData) {
        return;
    }

    try {
        // تعديل حالة الفاتورة إلى مسودة
        invoiceData.status = 'draft';
        invoiceData.isDraft = true;

        // إضافة إلى قاعدة البيانات
        if (!appData.invoices) {
            appData.invoices = [];
        }

        invoiceData.id = Date.now();
        invoiceData.createdAt = new Date().toISOString();
        invoiceData.isCustomInvoice = true;

        appData.invoices.push(invoiceData);
        saveData();

        // رسالة نجاح مع عرض رمز العملة بوضوح
        const currencyName = getCurrencyName(invoiceData.currency);
        const currencySymbol = getCurrencySymbol(invoiceData.currency);
        alert(`✅ تم حفظ الفاتورة كمسودة بنجاح!

📄 رقم الفاتورة: ${invoiceData.invoiceNumber}
💰 المبلغ الإجمالي: ${formatCurrency(invoiceData.totalAmount, invoiceData.currency)}
💱 العملة: ${currencyName} (${currencySymbol})

يمكنك العودة لتعديلها وتأكيدها لاحقاً.`);

        // الانتقال إلى صفحة الفواتير
        if (invoiceData.invoiceType === 'sale') {
            showPage('sales-invoices');
        } else {
            showPage('purchase-invoices');
        }

        console.log('✅ تم حفظ الفاتورة الخاصة كمسودة:', invoiceData);

    } catch (error) {
        console.error('❌ خطأ في حفظ المسودة:', error);
        alert('حدث خطأ أثناء حفظ المسودة. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * معاينة الفاتورة الخاصة
 */
function previewCustomInvoice() {
    console.log('👁️ معاينة الفاتورة الخاصة...');

    const invoiceData = collectCustomInvoiceData();
    if (!invoiceData) {
        return;
    }

    // إنشاء نافذة معاينة
    const previewWindow = window.open('', '_blank', 'width=800,height=600');

    const currencySymbol = getCurrencySymbol(invoiceData.currency);
    const invoiceTypeText = invoiceData.invoiceType === 'sale' ? 'فاتورة مبيعات خاصة' : 'فاتورة مشتريات خاصة';
    const clientTypeText = invoiceData.invoiceType === 'sale' ? 'العميل' : 'المورد';

    previewWindow.document.write(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>معاينة ${invoiceTypeText}</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                .invoice-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                .custom-badge { background: linear-gradient(45deg, #ff6b6b, #feca57); }
                @media print {
                    .no-print { display: none !important; }
                    body { margin: 0; }
                }
            </style>
        </head>
        <body>
            <div class="container-fluid p-4">
                <!-- رأس الفاتورة -->
                <div class="invoice-header p-4 rounded mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-1">
                                <i class="fas fa-star me-2"></i>
                                ${invoiceTypeText}
                            </h2>
                            <span class="badge custom-badge fs-6">فاتورة خاصة</span>
                        </div>
                        <div class="col-md-4 text-end">
                            <h4>رقم الفاتورة</h4>
                            <p class="mb-0 fs-5">${invoiceData.invoiceNumber}</p>
                        </div>
                    </div>
                </div>

                <!-- معلومات الفاتورة -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-user me-2"></i>
                                    بيانات ${clientTypeText}
                                </h6>
                            </div>
                            <div class="card-body">
                                <p><strong>الاسم:</strong> ${invoiceData.clientName}</p>
                                ${invoiceData.clientPhone ? `<p><strong>الهاتف:</strong> ${invoiceData.clientPhone}</p>` : ''}
                                ${invoiceData.clientEmail ? `<p><strong>البريد:</strong> ${invoiceData.clientEmail}</p>` : ''}
                                ${invoiceData.clientAddress ? `<p><strong>العنوان:</strong> ${invoiceData.clientAddress}</p>` : ''}
                                ${invoiceData.clientTaxNumber ? `<p><strong>الرقم الضريبي:</strong> ${invoiceData.clientTaxNumber}</p>` : ''}
                                ${!invoiceData.isExistingClient ? '<span class="badge bg-info">بيانات مدخلة يدوياً</span>' : ''}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-calendar me-2"></i>
                                    تفاصيل الفاتورة
                                </h6>
                            </div>
                            <div class="card-body">
                                <p><strong>تاريخ الفاتورة:</strong> ${formatDate(invoiceData.invoiceDate)}</p>
                                ${invoiceData.dueDate ? `<p><strong>تاريخ الاستحقاق:</strong> ${formatDate(invoiceData.dueDate)}</p>` : ''}
                                <p><strong>العملة:</strong> ${getCurrencyName(invoiceData.currency)} (${currencySymbol})</p>
                                ${invoiceData.isCustomExchangeRate ?
                                    `<p><strong>سعر الصرف:</strong> ${invoiceData.exchangeRate} <span class="badge bg-warning">مخصص</span></p>` :
                                    invoiceData.currency !== 'SYP' ? `<p><strong>سعر الصرف:</strong> ${invoiceData.exchangeRate} <span class="badge bg-secondary">افتراضي</span></p>` : ''
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- عناصر الفاتورة -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            عناصر الفاتورة
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>#</th>
                                        <th>الصنف</th>
                                        <th>المواصفات</th>
                                        <th>الكمية</th>
                                        <th>سعر الوحدة</th>
                                        <th>خصم %</th>
                                        <th>المجموع</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${invoiceData.items.map((item, index) => `
                                    <tr>
                                        <td>${index + 1}</td>
                                        <td><strong>${item.productName}</strong></td>
                                        <td>${item.description || '-'}</td>
                                        <td>${formatNumber(item.quantity)}</td>
                                        <td>${formatNumber(item.unitPrice)} ${currencySymbol}</td>
                                        <td>${item.discountPercent}%</td>
                                        <td><strong>${formatNumber(item.totalAmount)} ${currencySymbol}</strong></td>
                                    </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- إجماليات الفاتورة -->
                <div class="row">
                    <div class="col-md-8"></div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-dark text-white">
                                <h6 class="mb-0">إجماليات الفاتورة</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>المجموع الفرعي:</span>
                                    <span>${formatNumber(invoiceData.subtotal)} ${currencySymbol}</span>
                                </div>
                                ${invoiceData.discountRate > 0 ? `
                                <div class="d-flex justify-content-between mb-2">
                                    <span>الخصم (${invoiceData.discountRate}%):</span>
                                    <span class="text-danger">-${formatNumber(invoiceData.discountAmount)} ${currencySymbol}</span>
                                </div>
                                ` : ''}
                                ${invoiceData.taxRate > 0 ? `
                                <div class="d-flex justify-content-between mb-2">
                                    <span>الضريبة (${invoiceData.taxRate}%):</span>
                                    <span class="text-info">+${formatNumber(invoiceData.taxAmount)} ${currencySymbol}</span>
                                </div>
                                ` : ''}
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <strong>المجموع النهائي:</strong>
                                    <strong class="text-primary fs-5">${formatNumber(invoiceData.totalAmount)} ${currencySymbol}</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                ${invoiceData.notes ? `
                <!-- الملاحظات -->
                <div class="card mt-4">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-sticky-note me-2"></i>
                            ملاحظات
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="mb-0">${invoiceData.notes}</p>
                    </div>
                </div>
                ` : ''}

                <!-- أزرار الطباعة -->
                <div class="text-center mt-4 no-print">
                    <button class="btn btn-primary me-2" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>
                    <button class="btn btn-secondary" onclick="window.close()">
                        <i class="fas fa-times me-2"></i>إغلاق
                    </button>
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://kit.fontawesome.com/your-fontawesome-kit.js"></script>
        </body>
        </html>
    `);

    previewWindow.document.close();
    console.log('✅ تم فتح معاينة الفاتورة الخاصة');
}

/**
 * صفحة أرصدة العملاء والموردين
 */
function getCustomerSupplierBalancesHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-balance-scale me-2 text-primary"></i>
                    أرصدة العملاء والموردين
                </h1>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>عرض شامل:</strong> جميع أرصدة العملاء والموردين مفصلة حسب العملة مع إمكانية الفلترة والبحث.
                </div>
            </div>
        </div>

        <!-- فلاتر البحث -->
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white">
                <h6 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر البحث والعرض
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label for="balanceFilterCurrency" class="form-label">فلترة حسب العملة</label>
                        <select class="form-select" id="balanceFilterCurrency" onchange="filterBalancesByCurrency()">
                            <option value="ALL">جميع العملات</option>
                            <option value="SYP">ليرة سورية (ل.س)</option>
                            <option value="USD">دولار أمريكي ($)</option>
                            <option value="EUR">يورو (€)</option>
                            <option value="TRY">ليرة تركية (₺)</option>
                            <option value="SAR">ريال سعودي (ر.س)</option>
                            <option value="AED">درهم إماراتي (د.إ)</option>
                            <option value="EGP">جنيه مصري (ج.م)</option>
                            <option value="JOD">دينار أردني (د.أ)</option>
                            <option value="LBP">ليرة لبنانية (ل.ل)</option>
                            <option value="GBP">جنيه إسترليني (£)</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="balanceFilterType" class="form-label">نوع الحساب</label>
                        <select class="form-select" id="balanceFilterType" onchange="filterBalancesByType()">
                            <option value="ALL">العملاء والموردين</option>
                            <option value="customers">العملاء فقط</option>
                            <option value="suppliers">الموردين فقط</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="balanceFilterStatus" class="form-label">حالة الرصيد</label>
                        <select class="form-select" id="balanceFilterStatus" onchange="filterBalancesByStatus()">
                            <option value="ALL">جميع الأرصدة</option>
                            <option value="positive">أرصدة موجبة (مدين)</option>
                            <option value="negative">أرصدة سالبة (دائن)</option>
                            <option value="zero">أرصدة متوازنة</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="balanceSearchInput" class="form-label">البحث</label>
                        <input type="text" class="form-control" id="balanceSearchInput"
                               placeholder="ابحث بالاسم..." onkeyup="searchInBalances()">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <button type="button" class="btn btn-success me-2" onclick="refreshAllBalances()">
                            <i class="fas fa-sync-alt me-2"></i>تحديث الأرصدة
                        </button>
                        <button type="button" class="btn btn-info me-2" onclick="exportBalancesToExcel()">
                            <i class="fas fa-file-excel me-2"></i>تصدير Excel
                        </button>
                        <button type="button" class="btn btn-danger me-2" onclick="exportBalancesToPDF()">
                            <i class="fas fa-file-pdf me-2"></i>تصدير PDF
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="printBalancesReport()">
                            <i class="fas fa-print me-2"></i>طباعة التقرير
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص الأرصدة -->
        <div class="row mb-4" id="balancesSummarySection">
            <!-- سيتم ملؤها ديناميكياً -->
        </div>

        <!-- جداول الأرصدة -->
        <div class="row">
            <!-- أرصدة العملاء -->
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-users me-2"></i>
                            أرصدة العملاء
                            <span class="badge bg-light text-dark ms-2" id="customersCount">0</span>
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th>العميل</th>
                                        <th>العملة</th>
                                        <th>الرصيد</th>
                                        <th>الحالة</th>
                                        <th>إجراءات</th>
                                    </tr>
                                </thead>
                                <tbody id="customersBalancesTable">
                                    <!-- سيتم ملؤها ديناميكياً -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- أرصدة الموردين -->
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="mb-0">
                            <i class="fas fa-truck me-2"></i>
                            أرصدة الموردين
                            <span class="badge bg-dark text-light ms-2" id="suppliersCount">0</span>
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th>المورد</th>
                                        <th>العملة</th>
                                        <th>الرصيد</th>
                                        <th>الحالة</th>
                                        <th>إجراءات</th>
                                    </tr>
                                </thead>
                                <tbody id="suppliersBalancesTable">
                                    <!-- سيتم ملؤها ديناميكياً -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- تفاصيل إضافية -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-chart-pie me-2"></i>
                            تحليل الأرصدة حسب العملة
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="currencyAnalysisSection">
                            <!-- سيتم ملؤها ديناميكياً -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- نافذة تفاصيل الرصيد -->
        <div class="modal fade" id="balanceDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            <i class="fas fa-info-circle me-2"></i>
                            تفاصيل الرصيد
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" id="balanceDetailsContent">
                        <!-- سيتم ملؤها ديناميكياً -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>إغلاق
                        </button>
                        <button type="button" class="btn btn-primary" onclick="printBalanceDetails()">
                            <i class="fas fa-print me-2"></i>طباعة
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * تهيئة صفحة أرصدة العملاء والموردين
 */
function initializeCustomerSupplierBalancesPage() {
    console.log('🚀 تهيئة صفحة أرصدة العملاء والموردين...');

    // تحديث جميع الأرصدة
    refreshAllBalances();

    console.log('✅ تم تهيئة صفحة أرصدة العملاء والموردين');
}

/**
 * تحديث جميع الأرصدة
 */
function refreshAllBalances() {
    console.log('🔄 تحديث جميع الأرصدة...');

    // إعادة حساب أرصدة العملاء
    if (appData.customers) {
        appData.customers.forEach(customer => {
            recalculateCustomerBalance(customer.id);
        });
    }

    // إعادة حساب أرصدة الموردين
    if (appData.suppliers) {
        appData.suppliers.forEach(supplier => {
            recalculateSupplierBalance(supplier.id);
        });
    }

    // عرض الأرصدة المحدثة
    displayCustomerSupplierBalances();

    console.log('✅ تم تحديث جميع الأرصدة');
}

/**
 * عرض أرصدة العملاء والموردين
 */
function displayCustomerSupplierBalances() {
    console.log('📊 عرض أرصدة العملاء والموردين...');

    // عرض ملخص الأرصدة
    displayBalancesSummary();

    // عرض أرصدة العملاء
    displayCustomersBalances();

    // عرض أرصدة الموردين
    displaySuppliersBalances();

    // عرض تحليل العملات
    displayCurrencyAnalysis();

    console.log('✅ تم عرض جميع الأرصدة');
}

/**
 * عرض ملخص الأرصدة
 */
function displayBalancesSummary() {
    const summarySection = document.getElementById('balancesSummarySection');
    if (!summarySection) return;

    // حساب الإحصائيات
    const stats = calculateBalancesStatistics();

    summarySection.innerHTML = `
        <div class="col-md-3">
            <div class="card border-primary">
                <div class="card-body text-center">
                    <i class="fas fa-users fa-2x text-primary mb-2"></i>
                    <h4 class="text-primary">${stats.totalCustomers}</h4>
                    <p class="mb-0">إجمالي العملاء</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning">
                <div class="card-body text-center">
                    <i class="fas fa-truck fa-2x text-warning mb-2"></i>
                    <h4 class="text-warning">${stats.totalSuppliers}</h4>
                    <p class="mb-0">إجمالي الموردين</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-success">
                <div class="card-body text-center">
                    <i class="fas fa-arrow-up fa-2x text-success mb-2"></i>
                    <h4 class="text-success">${stats.totalPositiveBalances}</h4>
                    <p class="mb-0">أرصدة موجبة</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-danger">
                <div class="card-body text-center">
                    <i class="fas fa-arrow-down fa-2x text-danger mb-2"></i>
                    <h4 class="text-danger">${stats.totalNegativeBalances}</h4>
                    <p class="mb-0">أرصدة سالبة</p>
                </div>
            </div>
        </div>
    `;
}

/**
 * حساب إحصائيات الأرصدة
 */
function calculateBalancesStatistics() {
    let totalCustomers = 0;
    let totalSuppliers = 0;
    let totalPositiveBalances = 0;
    let totalNegativeBalances = 0;

    // إحصائيات العملاء
    if (appData.customers) {
        totalCustomers = appData.customers.length;
        appData.customers.forEach(customer => {
            const balance = customer.currentBalance || 0;
            if (balance > 0) totalPositiveBalances++;
            else if (balance < 0) totalNegativeBalances++;
        });
    }

    // إحصائيات الموردين
    if (appData.suppliers) {
        totalSuppliers = appData.suppliers.length;
        appData.suppliers.forEach(supplier => {
            const balance = supplier.currentBalance || 0;
            if (balance > 0) totalPositiveBalances++;
            else if (balance < 0) totalNegativeBalances++;
        });
    }

    return {
        totalCustomers,
        totalSuppliers,
        totalPositiveBalances,
        totalNegativeBalances
    };
}

/**
 * عرض أرصدة العملاء
 */
function displayCustomersBalances() {
    const tableBody = document.getElementById('customersBalancesTable');
    const countElement = document.getElementById('customersCount');

    if (!tableBody || !countElement) return;

    let html = '';
    let count = 0;

    if (appData.customers && appData.customers.length > 0) {
        appData.customers.forEach(customer => {
            // عرض رصيد لكل عملة منفصلة
            if (customer.balances && Object.keys(customer.balances).length > 0) {
                Object.keys(customer.balances).forEach(currency => {
                    const balance = customer.balances[currency] || 0;
                    if (balance !== 0) { // عرض الأرصدة غير الصفرية فقط
                        const currencySymbol = getCurrencySymbol(currency);

                        let balanceClass = 'text-muted';
                        let balanceStatus = 'متوازن';

                        if (balance > 0) {
                            balanceClass = 'text-danger';
                            balanceStatus = 'مدين';
                        } else if (balance < 0) {
                            balanceClass = 'text-success';
                            balanceStatus = 'دائن';
                        }

                        html += `
                            <tr data-customer-id="${customer.id}" data-currency="${currency}" data-balance="${balance}">
                                <td>
                                    <strong>${customer.name}</strong>
                                    ${customer.phone ? `<br><small class="text-muted">${customer.phone}</small>` : ''}
                                </td>
                                <td>
                                    <span class="badge bg-info">${getCurrencyName(currency)}</span>
                                </td>
                                <td class="${balanceClass}">
                                    <strong>${formatCurrency(Math.abs(balance))} ${currencySymbol}</strong>
                                </td>
                                <td>
                                    <span class="badge bg-${balance > 0 ? 'danger' : balance < 0 ? 'success' : 'secondary'}">
                                        ${balanceStatus}
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-info"
                                                onclick="showBalanceDetails('customer', ${customer.id})"
                                                title="تفاصيل الرصيد">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                onclick="showCustomerStatement(${customer.id})"
                                                title="كشف الحساب">
                                            <i class="fas fa-file-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                        count++;
                    }
                });
            } else {
                // عرض الرصيد الحالي إذا لم تكن هناك أرصدة متعددة العملات
                const balance = customer.currentBalance || 0;
                if (balance !== 0) {
                    const currency = 'SYP';
                    const currencySymbol = getCurrencySymbol(currency);

                    let balanceClass = 'text-muted';
                    let balanceStatus = 'متوازن';

                    if (balance > 0) {
                        balanceClass = 'text-danger';
                        balanceStatus = 'مدين';
                    } else if (balance < 0) {
                        balanceClass = 'text-success';
                        balanceStatus = 'دائن';
                    }

                    html += `
                        <tr data-customer-id="${customer.id}" data-currency="${currency}" data-balance="${balance}">
                            <td>
                                <strong>${customer.name}</strong>
                                ${customer.phone ? `<br><small class="text-muted">${customer.phone}</small>` : ''}
                            </td>
                            <td>
                                <span class="badge bg-info">${getCurrencyName(currency)}</span>
                            </td>
                            <td class="${balanceClass}">
                                <strong>${formatCurrency(Math.abs(balance))} ${currencySymbol}</strong>
                            </td>
                            <td>
                                <span class="badge bg-${balance > 0 ? 'danger' : balance < 0 ? 'success' : 'secondary'}">
                                    ${balanceStatus}
                                </span>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-info"
                                            onclick="showBalanceDetails('customer', ${customer.id})"
                                            title="تفاصيل الرصيد">
                                        <i class="fas fa-info-circle"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary"
                                            onclick="showCustomerStatement(${customer.id})"
                                            title="كشف الحساب">
                                        <i class="fas fa-file-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    count++;
                }
            }
        });
    }

    if (html === '') {
        html = `
            <tr>
                <td colspan="5" class="text-center text-muted py-4">
                    <i class="fas fa-users fa-2x mb-2"></i>
                    <br>لا توجد عملاء
                </td>
            </tr>
        `;
    }

    tableBody.innerHTML = html;
    countElement.textContent = count;
}

/**
 * عرض أرصدة الموردين
 */
function displaySuppliersBalances() {
    const tableBody = document.getElementById('suppliersBalancesTable');
    const countElement = document.getElementById('suppliersCount');

    if (!tableBody || !countElement) return;

    let html = '';
    let count = 0;

    if (appData.suppliers && appData.suppliers.length > 0) {
        appData.suppliers.forEach(supplier => {
            // عرض رصيد لكل عملة منفصلة
            if (supplier.balances && Object.keys(supplier.balances).length > 0) {
                Object.keys(supplier.balances).forEach(currency => {
                    const balance = supplier.balances[currency] || 0;
                    if (balance !== 0) { // عرض الأرصدة غير الصفرية فقط
                        const currencySymbol = getCurrencySymbol(currency);

                        let balanceClass = 'text-muted';
                        let balanceStatus = 'متوازن';

                        if (balance > 0) {
                            balanceClass = 'text-success';
                            balanceStatus = 'دائن';
                        } else if (balance < 0) {
                            balanceClass = 'text-danger';
                            balanceStatus = 'مدين';
                        }

                        html += `
                            <tr data-supplier-id="${supplier.id}" data-currency="${currency}" data-balance="${balance}">
                                <td>
                                    <strong>${supplier.name}</strong>
                                    ${supplier.phone ? `<br><small class="text-muted">${supplier.phone}</small>` : ''}
                                </td>
                                <td>
                                    <span class="badge bg-info">${getCurrencyName(currency)}</span>
                                </td>
                                <td class="${balanceClass}">
                                    <strong>${formatCurrency(Math.abs(balance))} ${currencySymbol}</strong>
                                </td>
                                <td>
                                    <span class="badge bg-${balance > 0 ? 'success' : balance < 0 ? 'danger' : 'secondary'}">
                                        ${balanceStatus}
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-info"
                                                onclick="showBalanceDetails('supplier', ${supplier.id})"
                                                title="تفاصيل الرصيد">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                onclick="showSupplierStatement(${supplier.id})"
                                                title="كشف الحساب">
                                            <i class="fas fa-file-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                        count++;
                    }
                });
            } else {
                // عرض الرصيد الحالي إذا لم تكن هناك أرصدة متعددة العملات
                const balance = supplier.currentBalance || 0;
                if (balance !== 0) {
                    const currency = 'SYP';
                    const currencySymbol = getCurrencySymbol(currency);

                    let balanceClass = 'text-muted';
                    let balanceStatus = 'متوازن';

                    if (balance > 0) {
                        balanceClass = 'text-success';
                        balanceStatus = 'دائن';
                    } else if (balance < 0) {
                        balanceClass = 'text-danger';
                        balanceStatus = 'مدين';
                    }

                    html += `
                        <tr data-supplier-id="${supplier.id}" data-currency="${currency}" data-balance="${balance}">
                            <td>
                                <strong>${supplier.name}</strong>
                                ${supplier.phone ? `<br><small class="text-muted">${supplier.phone}</small>` : ''}
                            </td>
                            <td>
                                <span class="badge bg-info">${getCurrencyName(currency)}</span>
                            </td>
                            <td class="${balanceClass}">
                                <strong>${formatCurrency(Math.abs(balance))} ${currencySymbol}</strong>
                            </td>
                            <td>
                                <span class="badge bg-${balance > 0 ? 'success' : balance < 0 ? 'danger' : 'secondary'}">
                                    ${balanceStatus}
                                </span>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-info"
                                            onclick="showBalanceDetails('supplier', ${supplier.id})"
                                            title="تفاصيل الرصيد">
                                        <i class="fas fa-info-circle"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary"
                                            onclick="showSupplierStatement(${supplier.id})"
                                            title="كشف الحساب">
                                        <i class="fas fa-file-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    count++;
                }
            }
        });
    }

    if (html === '') {
        html = `
            <tr>
                <td colspan="5" class="text-center text-muted py-4">
                    <i class="fas fa-truck fa-2x mb-2"></i>
                    <br>لا توجد موردين
                </td>
            </tr>
        `;
    }

    tableBody.innerHTML = html;
    countElement.textContent = count;
}

/**
 * عرض تحليل العملات - محسن مع دعم الفلترة
 */
function displayCurrencyAnalysis(filterCurrency = null) {
    const analysisSection = document.getElementById('currencyAnalysisSection');
    if (!analysisSection) return;

    console.log(`📊 عرض تحليل العملات${filterCurrency ? ` للعملة: ${filterCurrency}` : ''}`);

    const currencyStats = calculateCurrencyStatistics(filterCurrency);

    let html = '<div class="row">';

    // إذا كان هناك فلتر عملة محدد، عرض تلك العملة فقط
    const currenciesToShow = filterCurrency && filterCurrency !== 'ALL'
        ? [filterCurrency]
        : Object.keys(currencyStats);

    if (currenciesToShow.length === 0) {
        html += `
            <div class="col-12">
                <div class="alert alert-info text-center">
                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                    <h5>لا توجد أرصدة للعملة المحددة</h5>
                    <p class="mb-0">اختر عملة أخرى أو اختر "جميع العملات" لعرض جميع الأرصدة</p>
                </div>
            </div>
        `;
    } else {
        currenciesToShow.forEach(currency => {
            const stats = currencyStats[currency];
            if (!stats) return;

            const currencySymbol = getCurrencySymbol(currency);
            const currencyName = getCurrencyName(currency);

            html += `
                <div class="col-md-${currenciesToShow.length === 1 ? '12' : '4'} mb-3">
                    <div class="card border-info shadow-sm">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-coins me-2"></i>
                                ${currencyName} (${currencySymbol})
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col-6">
                                    <div class="border-end">
                                        <h6 class="text-success">
                                            <i class="fas fa-users me-1"></i>العملاء
                                        </h6>
                                        <p class="mb-1"><strong>${stats.customersCount}</strong> عميل</p>
                                        <small class="text-muted">${formatCurrency(Math.abs(stats.customersTotal))} ${currencySymbol}</small>
                                        <br><small class="badge bg-${stats.customersTotal >= 0 ? 'success' : 'danger'} mt-1">
                                            ${stats.customersTotal >= 0 ? 'مدين' : 'دائن'}
                                        </small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <h6 class="text-warning">
                                        <i class="fas fa-truck me-1"></i>الموردين
                                    </h6>
                                    <p class="mb-1"><strong>${stats.suppliersCount}</strong> مورد</p>
                                    <small class="text-muted">${formatCurrency(Math.abs(stats.suppliersTotal))} ${currencySymbol}</small>
                                    <br><small class="badge bg-${stats.suppliersTotal >= 0 ? 'danger' : 'success'} mt-1">
                                        ${stats.suppliersTotal >= 0 ? 'مدين' : 'دائن'}
                                    </small>
                                </div>
                            </div>
                            <hr>
                            <div class="text-center">
                                <h6 class="text-primary">
                                    <i class="fas fa-balance-scale me-1"></i>الرصيد الصافي
                                </h6>
                                <h5 class="mb-2 ${stats.netBalance >= 0 ? 'text-success' : 'text-danger'}">
                                    ${formatCurrency(Math.abs(stats.netBalance))} ${currencySymbol}
                                </h5>
                                <span class="badge bg-${stats.netBalance >= 0 ? 'success' : 'danger'} fs-6">
                                    ${stats.netBalance >= 0 ? 'رصيد موجب' : 'رصيد سالب'}
                                </span>
                            </div>
                            ${currenciesToShow.length === 1 ? `
                                <hr>
                                <div class="row text-center">
                                    <div class="col-4">
                                        <small class="text-muted">إجمالي المعاملات</small>
                                        <br><strong>${stats.totalTransactions || 0}</strong>
                                    </div>
                                    <div class="col-4">
                                        <small class="text-muted">متوسط الرصيد</small>
                                        <br><strong>${formatCurrency(stats.averageBalance || 0)} ${currencySymbol}</strong>
                                    </div>
                                    <div class="col-4">
                                        <small class="text-muted">أعلى رصيد</small>
                                        <br><strong>${formatCurrency(stats.maxBalance || 0)} ${currencySymbol}</strong>
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        });
    }

    html += '</div>';

    if (Object.keys(currencyStats).length === 0) {
        html = `
            <div class="text-center py-4">
                <i class="fas fa-chart-pie fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">لا توجد بيانات للتحليل</h5>
                <p class="text-muted">أضف عملاء وموردين لعرض تحليل العملات</p>
            </div>
        `;
    }

    analysisSection.innerHTML = html;
}

/**
 * حساب إحصائيات العملات - محسن مع دعم الفلترة والعملات المتعددة
 */
function calculateCurrencyStatistics(filterCurrency = null) {
    const stats = {};

    console.log(`📊 حساب إحصائيات العملات${filterCurrency ? ` للعملة: ${filterCurrency}` : ''}`);

    // إحصائيات العملاء
    if (appData.customers) {
        appData.customers.forEach(customer => {
            // التعامل مع الأرصدة متعددة العملات
            if (customer.balances && Object.keys(customer.balances).length > 0) {
                Object.keys(customer.balances).forEach(currency => {
                    const balance = customer.balances[currency] || 0;

                    // تطبيق الفلتر إذا كان محدد
                    if (filterCurrency && filterCurrency !== 'ALL' && currency !== filterCurrency) {
                        return;
                    }

                    if (balance !== 0) { // عرض الأرصدة غير الصفرية فقط
                        if (!stats[currency]) {
                            stats[currency] = {
                                customersCount: 0,
                                customersTotal: 0,
                                suppliersCount: 0,
                                suppliersTotal: 0,
                                netBalance: 0,
                                totalTransactions: 0,
                                averageBalance: 0,
                                maxBalance: 0,
                                minBalance: 0
                            };
                        }

                        stats[currency].customersCount++;
                        stats[currency].customersTotal += balance;
                        stats[currency].totalTransactions++;

                        // تحديث أعلى وأقل رصيد
                        if (Math.abs(balance) > Math.abs(stats[currency].maxBalance)) {
                            stats[currency].maxBalance = balance;
                        }
                        if (stats[currency].minBalance === 0 || Math.abs(balance) < Math.abs(stats[currency].minBalance)) {
                            stats[currency].minBalance = balance;
                        }
                    }
                });
            } else {
                // التعامل مع الرصيد الحالي (العملة الافتراضية)
                const currency = customer.currency || 'SYP';
                const balance = customer.currentBalance || 0;

                // تطبيق الفلتر إذا كان محدد
                if (filterCurrency && filterCurrency !== 'ALL' && currency !== filterCurrency) {
                    return;
                }

                if (balance !== 0) {
                    if (!stats[currency]) {
                        stats[currency] = {
                            customersCount: 0,
                            customersTotal: 0,
                            suppliersCount: 0,
                            suppliersTotal: 0,
                            netBalance: 0,
                            totalTransactions: 0,
                            averageBalance: 0,
                            maxBalance: 0,
                            minBalance: 0
                        };
                    }

                    stats[currency].customersCount++;
                    stats[currency].customersTotal += balance;
                    stats[currency].totalTransactions++;

                    // تحديث أعلى وأقل رصيد
                    if (Math.abs(balance) > Math.abs(stats[currency].maxBalance)) {
                        stats[currency].maxBalance = balance;
                    }
                    if (stats[currency].minBalance === 0 || Math.abs(balance) < Math.abs(stats[currency].minBalance)) {
                        stats[currency].minBalance = balance;
                    }
                }
            }
        });
    }

    // إحصائيات الموردين
    if (appData.suppliers) {
        appData.suppliers.forEach(supplier => {
            // التعامل مع الأرصدة متعددة العملات
            if (supplier.balances && Object.keys(supplier.balances).length > 0) {
                Object.keys(supplier.balances).forEach(currency => {
                    const balance = supplier.balances[currency] || 0;

                    // تطبيق الفلتر إذا كان محدد
                    if (filterCurrency && filterCurrency !== 'ALL' && currency !== filterCurrency) {
                        return;
                    }

                    if (balance !== 0) { // عرض الأرصدة غير الصفرية فقط
                        if (!stats[currency]) {
                            stats[currency] = {
                                customersCount: 0,
                                customersTotal: 0,
                                suppliersCount: 0,
                                suppliersTotal: 0,
                                netBalance: 0,
                                totalTransactions: 0,
                                averageBalance: 0,
                                maxBalance: 0,
                                minBalance: 0
                            };
                        }

                        stats[currency].suppliersCount++;
                        stats[currency].suppliersTotal += balance;
                        stats[currency].totalTransactions++;

                        // تحديث أعلى وأقل رصيد
                        if (Math.abs(balance) > Math.abs(stats[currency].maxBalance)) {
                            stats[currency].maxBalance = balance;
                        }
                        if (stats[currency].minBalance === 0 || Math.abs(balance) < Math.abs(stats[currency].minBalance)) {
                            stats[currency].minBalance = balance;
                        }
                    }
                });
            } else {
                // التعامل مع الرصيد الحالي (العملة الافتراضية)
                const currency = supplier.currency || 'SYP';
                const balance = supplier.currentBalance || 0;

                // تطبيق الفلتر إذا كان محدد
                if (filterCurrency && filterCurrency !== 'ALL' && currency !== filterCurrency) {
                    return;
                }

                if (balance !== 0) {
                    if (!stats[currency]) {
                        stats[currency] = {
                            customersCount: 0,
                            customersTotal: 0,
                            suppliersCount: 0,
                            suppliersTotal: 0,
                            netBalance: 0,
                            totalTransactions: 0,
                            averageBalance: 0,
                            maxBalance: 0,
                            minBalance: 0
                        };
                    }

                    stats[currency].suppliersCount++;
                    stats[currency].suppliersTotal += balance;
                    stats[currency].totalTransactions++;

                    // تحديث أعلى وأقل رصيد
                    if (Math.abs(balance) > Math.abs(stats[currency].maxBalance)) {
                        stats[currency].maxBalance = balance;
                    }
                    if (stats[currency].minBalance === 0 || Math.abs(balance) < Math.abs(stats[currency].minBalance)) {
                        stats[currency].minBalance = balance;
                    }
                }
            }
        });
    }

    // حساب الصافي والمتوسط لكل عملة
    Object.keys(stats).forEach(currency => {
        const currencyStats = stats[currency];
        currencyStats.netBalance = currencyStats.customersTotal + currencyStats.suppliersTotal;

        // حساب المتوسط
        const totalAccounts = currencyStats.customersCount + currencyStats.suppliersCount;
        if (totalAccounts > 0) {
            currencyStats.averageBalance = (currencyStats.customersTotal + currencyStats.suppliersTotal) / totalAccounts;
        }
    });

    console.log(`✅ تم حساب إحصائيات ${Object.keys(stats).length} عملة`);
    return stats;
}

/**
 * فلترة الأرصدة حسب العملة
 */
function filterBalancesByCurrency() {
    const selectedCurrency = document.getElementById('balanceFilterCurrency')?.value;
    if (!selectedCurrency) return;

    const customerRows = document.querySelectorAll('#customersBalancesTable tr[data-customer-id]');
    const supplierRows = document.querySelectorAll('#suppliersBalancesTable tr[data-supplier-id]');

    let visibleCustomers = 0;
    let visibleSuppliers = 0;

    // فلترة أرصدة العملاء مع دقة أكبر
    customerRows.forEach(row => {
        const customer = appData.customers.find(c => c.id == row.getAttribute('data-customer-id'));
        let showRow = false;

        if (selectedCurrency === 'ALL') {
            showRow = true;
        } else if (customer && customer.balances) {
            // البحث في جميع أرصدة العملات للعميل
            showRow = customer.balances[selectedCurrency] && customer.balances[selectedCurrency] !== 0;
        } else if (customer && selectedCurrency === 'SYP') {
            // إظهار العملاء الذين لديهم رصيد بالليرة السورية
            showRow = customer.currentBalance && customer.currentBalance !== 0;
        }

        if (showRow) {
            row.style.display = '';
            visibleCustomers++;
        } else {
            row.style.display = 'none';
        }
    });

    // فلترة أرصدة الموردين مع دقة أكبر
    supplierRows.forEach(row => {
        const supplier = appData.suppliers.find(s => s.id == row.getAttribute('data-supplier-id'));
        let showRow = false;

        if (selectedCurrency === 'ALL') {
            showRow = true;
        } else if (supplier && supplier.balances) {
            // البحث في جميع أرصدة العملات للمورد
            showRow = supplier.balances[selectedCurrency] && supplier.balances[selectedCurrency] !== 0;
        } else if (supplier && selectedCurrency === 'SYP') {
            // إظهار الموردين الذين لديهم رصيد بالليرة السورية
            showRow = supplier.currentBalance && supplier.currentBalance !== 0;
        }

        if (showRow) {
            row.style.display = '';
            visibleSuppliers++;
        } else {
            row.style.display = 'none';
        }
    });

    // تحديث عدادات النتائج
    const customersCount = document.getElementById('customersCount');
    const suppliersCount = document.getElementById('suppliersCount');

    if (customersCount) customersCount.textContent = visibleCustomers;
    if (suppliersCount) suppliersCount.textContent = visibleSuppliers;

    console.log(`🔍 تم فلترة الأرصدة حسب العملة: ${selectedCurrency} - عملاء: ${visibleCustomers}, موردين: ${visibleSuppliers}`);
}

/**
 * فلترة الأرصدة حسب النوع
 */
function filterBalancesByType() {
    const selectedType = document.getElementById('balanceFilterType')?.value;
    if (!selectedType) return;

    const customersCard = document.querySelector('#customersBalancesTable').closest('.card');
    const suppliersCard = document.querySelector('#suppliersBalancesTable').closest('.card');

    if (selectedType === 'ALL') {
        customersCard.style.display = '';
        suppliersCard.style.display = '';
        // إعادة تعيين العرض للأعمدة
        customersCard.parentElement.className = 'col-md-6';
        suppliersCard.parentElement.className = 'col-md-6';
    } else if (selectedType === 'customers') {
        customersCard.style.display = '';
        suppliersCard.style.display = 'none';
        customersCard.parentElement.className = 'col-12';
    } else if (selectedType === 'suppliers') {
        customersCard.style.display = 'none';
        suppliersCard.style.display = '';
        suppliersCard.parentElement.className = 'col-12';
    }

    console.log(`🔍 تم فلترة الأرصدة حسب النوع: ${selectedType}`);
}

/**
 * فلترة الأرصدة حسب الحالة
 */
function filterBalancesByStatus() {
    const selectedStatus = document.getElementById('balanceFilterStatus')?.value;
    if (!selectedStatus) return;

    const customerRows = document.querySelectorAll('#customersBalancesTable tr[data-customer-id]');
    const supplierRows = document.querySelectorAll('#suppliersBalancesTable tr[data-supplier-id]');

    // فلترة أرصدة العملاء
    customerRows.forEach(row => {
        const balance = parseFloat(row.getAttribute('data-balance'));
        let showRow = false;

        if (selectedStatus === 'ALL') {
            showRow = true;
        } else if (selectedStatus === 'positive' && balance > 0) {
            showRow = true;
        } else if (selectedStatus === 'negative' && balance < 0) {
            showRow = true;
        } else if (selectedStatus === 'zero' && balance === 0) {
            showRow = true;
        }

        row.style.display = showRow ? '' : 'none';
    });

    // فلترة أرصدة الموردين
    supplierRows.forEach(row => {
        const balance = parseFloat(row.getAttribute('data-balance'));
        let showRow = false;

        if (selectedStatus === 'ALL') {
            showRow = true;
        } else if (selectedStatus === 'positive' && balance > 0) {
            showRow = true;
        } else if (selectedStatus === 'negative' && balance < 0) {
            showRow = true;
        } else if (selectedStatus === 'zero' && balance === 0) {
            showRow = true;
        }

        row.style.display = showRow ? '' : 'none';
    });

    console.log(`🔍 تم فلترة الأرصدة حسب الحالة: ${selectedStatus}`);
}

/**
 * البحث في الأرصدة
 */
function searchInBalances() {
    const searchTerm = document.getElementById('balanceSearchInput')?.value?.toLowerCase() || '';

    const customerRows = document.querySelectorAll('#customersBalancesTable tr[data-customer-id]');
    const supplierRows = document.querySelectorAll('#suppliersBalancesTable tr[data-supplier-id]');

    // البحث في أرصدة العملاء
    customerRows.forEach(row => {
        const customerName = row.querySelector('td:first-child strong')?.textContent?.toLowerCase() || '';
        const customerPhone = row.querySelector('td:first-child small')?.textContent?.toLowerCase() || '';

        if (searchTerm === '' || customerName.includes(searchTerm) || customerPhone.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });

    // البحث في أرصدة الموردين
    supplierRows.forEach(row => {
        const supplierName = row.querySelector('td:first-child strong')?.textContent?.toLowerCase() || '';
        const supplierPhone = row.querySelector('td:first-child small')?.textContent?.toLowerCase() || '';

        if (searchTerm === '' || supplierName.includes(searchTerm) || supplierPhone.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });

    console.log(`🔍 تم البحث في الأرصدة: "${searchTerm}"`);
}

/**
 * عرض تفاصيل الرصيد
 */
function showBalanceDetails(type, id) {
    console.log(`📋 عرض تفاصيل الرصيد: ${type} - ${id}`);

    let entity = null;
    let entityType = '';

    if (type === 'customer') {
        entity = appData.customers?.find(c => c.id === id);
        entityType = 'العميل';
    } else if (type === 'supplier') {
        entity = appData.suppliers?.find(s => s.id === id);
        entityType = 'المورد';
    }

    if (!entity) {
        alert('لم يتم العثور على البيانات');
        return;
    }

    // حساب تفاصيل الرصيد
    const balanceDetails = calculateDetailedBalance(type, id);

    const modal = document.getElementById('balanceDetailsModal');
    const content = document.getElementById('balanceDetailsContent');

    if (!modal || !content) return;

    const balance = entity.currentBalance || 0;
    const currency = entity.currency || 'SYP';
    const currencySymbol = getCurrencySymbol(currency);

    content.innerHTML = `
        <div class="row mb-4">
            <div class="col-md-6">
                <h6><i class="fas fa-user me-2"></i>معلومات ${entityType}</h6>
                <table class="table table-sm">
                    <tr><td><strong>الاسم:</strong></td><td>${entity.name}</td></tr>
                    <tr><td><strong>الهاتف:</strong></td><td>${entity.phone || 'غير محدد'}</td></tr>
                    <tr><td><strong>البريد:</strong></td><td>${entity.email || 'غير محدد'}</td></tr>
                    <tr><td><strong>العملة:</strong></td><td>${getCurrencyName(currency)} (${currencySymbol})</td></tr>
                </table>
            </div>
            <div class="col-md-6">
                <h6><i class="fas fa-calculator me-2"></i>تفاصيل الرصيد</h6>
                <div class="card">
                    <div class="card-body">
                        <div class="text-center">
                            <h4 class="${balance >= 0 ? 'text-success' : 'text-danger'}">
                                ${formatCurrency(Math.abs(balance))} ${currencySymbol}
                            </h4>
                            <p class="mb-0">
                                <span class="badge bg-${balance > 0 ? (type === 'customer' ? 'danger' : 'success') : balance < 0 ? (type === 'customer' ? 'success' : 'danger') : 'secondary'}">
                                    ${balance > 0 ? (type === 'customer' ? 'مدين' : 'دائن') : balance < 0 ? (type === 'customer' ? 'دائن' : 'مدين') : 'متوازن'}
                                </span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <h6><i class="fas fa-list me-2"></i>تفاصيل الحركات</h6>
                <div class="table-responsive">
                    <table class="table table-striped table-sm">
                        <thead class="table-dark">
                            <tr>
                                <th>النوع</th>
                                <th>العدد</th>
                                <th>المبلغ الإجمالي</th>
                                <th>المدفوع</th>
                                <th>المتبقي</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><i class="fas fa-file-invoice me-2"></i>الفواتير</td>
                                <td>${balanceDetails.invoicesCount}</td>
                                <td>${formatCurrency(balanceDetails.invoicesTotal)} ${currencySymbol}</td>
                                <td>${formatCurrency(balanceDetails.invoicesPaid)} ${currencySymbol}</td>
                                <td>${formatCurrency(balanceDetails.invoicesRemaining)} ${currencySymbol}</td>
                            </tr>
                            <tr>
                                <td><i class="fas fa-money-bill me-2"></i>الدفعات</td>
                                <td>${balanceDetails.paymentsCount}</td>
                                <td colspan="3">${formatCurrency(balanceDetails.paymentsTotal)} ${currencySymbol}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;

    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();
}

/**
 * حساب تفاصيل الرصيد
 */
function calculateDetailedBalance(type, id) {
    let invoicesCount = 0;
    let invoicesTotal = 0;
    let invoicesPaid = 0;
    let invoicesRemaining = 0;
    let paymentsCount = 0;
    let paymentsTotal = 0;

    // حساب الفواتير
    if (appData.invoices) {
        const relevantInvoices = appData.invoices.filter(invoice => {
            if (type === 'customer') {
                return invoice.invoiceType === 'sale' && invoice.customerId === id;
            } else {
                return invoice.invoiceType === 'purchase' && invoice.supplierId === id;
            }
        });

        invoicesCount = relevantInvoices.length;
        relevantInvoices.forEach(invoice => {
            invoicesTotal += invoice.totalAmount || 0;
            invoicesPaid += invoice.paidAmount || 0;
            invoicesRemaining += invoice.remainingAmount || 0;
        });
    }

    // حساب الدفعات
    if (appData.payments) {
        const relevantPayments = appData.payments.filter(payment => {
            if (type === 'customer') {
                return payment.paymentType === 'receipt' && payment.customerId === id;
            } else {
                return payment.paymentType === 'payment' && payment.supplierId === id;
            }
        });

        paymentsCount = relevantPayments.length;
        relevantPayments.forEach(payment => {
            paymentsTotal += payment.amount || 0;
        });
    }

    return {
        invoicesCount,
        invoicesTotal,
        invoicesPaid,
        invoicesRemaining,
        paymentsCount,
        paymentsTotal
    };
}

/**
 * تصدير الأرصدة إلى Excel
 */
function exportBalancesToExcel() {
    console.log('📊 تصدير الأرصدة إلى Excel...');

    try {
        const workbook = XLSX.utils.book_new();

        // ورقة أرصدة العملاء
        const customersData = [];
        customersData.push(['اسم العميل', 'الهاتف', 'البريد الإلكتروني', 'العملة', 'الرصيد', 'الحالة']);

        if (appData.customers) {
            appData.customers.forEach(customer => {
                const balance = customer.currentBalance || 0;
                const currency = customer.currency || 'SYP';
                const status = balance > 0 ? 'مدين' : balance < 0 ? 'دائن' : 'متوازن';

                customersData.push([
                    customer.name,
                    customer.phone || '',
                    customer.email || '',
                    getCurrencyName(currency),
                    balance,
                    status
                ]);
            });
        }

        const customersSheet = XLSX.utils.aoa_to_sheet(customersData);
        XLSX.utils.book_append_sheet(workbook, customersSheet, 'أرصدة العملاء');

        // ورقة أرصدة الموردين
        const suppliersData = [];
        suppliersData.push(['اسم المورد', 'الهاتف', 'البريد الإلكتروني', 'العملة', 'الرصيد', 'الحالة']);

        if (appData.suppliers) {
            appData.suppliers.forEach(supplier => {
                const balance = supplier.currentBalance || 0;
                const currency = supplier.currency || 'SYP';
                const status = balance > 0 ? 'دائن' : balance < 0 ? 'مدين' : 'متوازن';

                suppliersData.push([
                    supplier.name,
                    supplier.phone || '',
                    supplier.email || '',
                    getCurrencyName(currency),
                    balance,
                    status
                ]);
            });
        }

        const suppliersSheet = XLSX.utils.aoa_to_sheet(suppliersData);
        XLSX.utils.book_append_sheet(workbook, suppliersSheet, 'أرصدة الموردين');

        // ورقة ملخص العملات
        const currencyStats = calculateCurrencyStatistics();
        const summaryData = [];
        summaryData.push(['العملة', 'عدد العملاء', 'إجمالي أرصدة العملاء', 'عدد الموردين', 'إجمالي أرصدة الموردين', 'الصافي']);

        Object.keys(currencyStats).forEach(currency => {
            const stats = currencyStats[currency];
            summaryData.push([
                getCurrencyName(currency),
                stats.customersCount,
                stats.customersTotal,
                stats.suppliersCount,
                stats.suppliersTotal,
                stats.netBalance
            ]);
        });

        const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص العملات');

        // حفظ الملف
        const fileName = `أرصدة_العملاء_والموردين_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        alert('✅ تم تصدير الأرصدة إلى Excel بنجاح!');
        console.log('✅ تم تصدير الأرصدة إلى Excel');

    } catch (error) {
        console.error('❌ خطأ في تصدير الأرصدة:', error);
        alert('حدث خطأ أثناء تصدير الأرصدة. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * تصدير الأرصدة إلى PDF
 */
function exportBalancesToPDF() {
    console.log('📄 تصدير الأرصدة إلى PDF...');

    try {
        // الحصول على العملة المحددة في الفلتر
        const selectedCurrency = document.getElementById('balanceFilterCurrency')?.value || 'ALL';

        // إنشاء URL للتصدير
        const exportUrl = `/api/export/balances-pdf?currency=${selectedCurrency}`;

        // فتح رابط التحميل
        window.open(exportUrl, '_blank');

        console.log('✅ تم بدء تصدير الأرصدة إلى PDF');

    } catch (error) {
        console.error('❌ خطأ في تصدير الأرصدة إلى PDF:', error);
        alert('حدث خطأ أثناء تصدير الأرصدة إلى PDF. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * صفحة تقرير أرصدة الدولار
 */
function getUSDBalancesReportHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-dollar-sign me-2 text-success"></i>
                    تقرير أرصدة الدولار الأمريكي
                </h1>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>تقرير شامل:</strong> جميع حركات الدولار الأمريكي في النظام من فواتير وسندات قبض ودفع.
                </div>
            </div>
        </div>

        <!-- فلاتر التقرير -->
        <div class="card shadow mb-4">
            <div class="card-header bg-success text-white">
                <h6 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    فلاتر التقرير
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label for="usdFromDate" class="form-label">من تاريخ</label>
                        <input type="date" class="form-control" id="usdFromDate">
                    </div>
                    <div class="col-md-3">
                        <label for="usdToDate" class="form-label">إلى تاريخ</label>
                        <input type="date" class="form-control" id="usdToDate">
                    </div>
                    <div class="col-md-3">
                        <label for="usdTransactionType" class="form-label">نوع المعاملة</label>
                        <select class="form-select" id="usdTransactionType">
                            <option value="">جميع المعاملات</option>
                            <option value="sales">فواتير مبيعات</option>
                            <option value="purchases">فواتير مشتريات</option>
                            <option value="receipts">سندات قبض</option>
                            <option value="payments">سندات دفع</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <div>
                            <button class="btn btn-success" onclick="generateUSDReport()">
                                <i class="fas fa-chart-line me-2"></i>
                                إنشاء التقرير
                            </button>
                            <button class="btn btn-outline-secondary ms-2" onclick="clearUSDFilters()">
                                <i class="fas fa-times me-2"></i>
                                مسح
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ملخص الأرصدة -->
        <div class="row mb-4" id="usdSummaryCards" style="display: none;">
            <div class="col-md-3">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">إجمالي الإيرادات</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalUSDRevenue">$0.00</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-arrow-up fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-danger shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">إجمالي المصروفات</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalUSDExpenses">$0.00</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-arrow-down fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">صافي الرصيد</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="netUSDBalance">$0.00</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-balance-scale fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-left-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col me-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">عدد المعاملات</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalUSDTransactions">0</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-list fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- جدول التفاصيل -->
        <div class="card shadow" id="usdDetailsCard" style="display: none;">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-table me-2"></i>
                    تفاصيل حركات الدولار
                </h6>
                <div>
                    <button class="btn btn-sm btn-light" onclick="exportUSDReport('excel')">
                        <i class="fas fa-file-excel me-1"></i>
                        Excel
                    </button>
                    <button class="btn btn-sm btn-light ms-2" onclick="printUSDReport()">
                        <i class="fas fa-print me-1"></i>
                        طباعة
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>التاريخ</th>
                                <th>نوع المعاملة</th>
                                <th>رقم المستند</th>
                                <th>العميل/المورد</th>
                                <th>المبلغ</th>
                                <th>نوع الحركة</th>
                                <th>الوصف</th>
                            </tr>
                        </thead>
                        <tbody id="usdTransactionsTable">
                            <!-- سيتم ملؤها ديناميكياً -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- رسالة عدم وجود بيانات -->
        <div class="card shadow text-center py-5" id="noUSDData">
            <div class="card-body">
                <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">لا توجد بيانات</h5>
                <p class="text-muted">يرجى تحديد الفلاتر وإنشاء التقرير لعرض النتائج</p>
            </div>
        </div>
    `;
}

/**
 * تهيئة تقرير أرصدة الدولار
 */
function initializeUSDBalancesReport() {
    console.log('🚀 تهيئة تقرير أرصدة الدولار...');

    // تعيين التاريخ الافتراضي (آخر 30 يوم)
    const today = new Date();
    const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));

    document.getElementById('usdFromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
    document.getElementById('usdToDate').value = today.toISOString().split('T')[0];

    console.log('✅ تم تهيئة تقرير أرصدة الدولار');
}

/**
 * إنشاء تقرير أرصدة الدولار
 */
function generateUSDReport() {
    console.log('📊 إنشاء تقرير أرصدة الدولار...');

    const fromDate = document.getElementById('usdFromDate').value;
    const toDate = document.getElementById('usdToDate').value;
    const transactionType = document.getElementById('usdTransactionType').value;

    if (!fromDate || !toDate) {
        alert('يرجى تحديد الفترة الزمنية');
        return;
    }

    if (new Date(fromDate) > new Date(toDate)) {
        alert('تاريخ البداية يجب أن يكون قبل تاريخ النهاية');
        return;
    }

    // جمع جميع المعاملات بالدولار
    const usdTransactions = collectUSDTransactions(fromDate, toDate, transactionType);

    // حساب الإحصائيات
    const stats = calculateUSDStats(usdTransactions);

    // عرض النتائج
    displayUSDReport(usdTransactions, stats);

    console.log('✅ تم إنشاء تقرير أرصدة الدولار');
}

/**
 * جمع المعاملات بالدولار
 */
function collectUSDTransactions(fromDate, toDate, transactionType) {
    const transactions = [];

    // فواتير المبيعات
    if (!transactionType || transactionType === 'sales') {
        const salesInvoices = (appData.invoices || []).filter(inv =>
            inv.invoiceType === 'sale' &&
            inv.currency === 'USD' &&
            inv.status === 'confirmed' &&
            inv.invoiceDate >= fromDate &&
            inv.invoiceDate <= toDate
        );

        salesInvoices.forEach(invoice => {
            const customer = appData.customers.find(c => c.id === invoice.customerId);
            transactions.push({
                date: invoice.invoiceDate,
                type: 'sales',
                typeText: 'فاتورة مبيعات',
                documentNumber: invoice.invoiceNumber,
                clientName: customer ? customer.name : 'عميل محذوف',
                amount: invoice.totalAmount,
                movementType: 'in',
                movementText: 'إيراد',
                description: `فاتورة مبيعات رقم ${invoice.invoiceNumber}`
            });
        });
    }

    // فواتير المشتريات
    if (!transactionType || transactionType === 'purchases') {
        const purchaseInvoices = (appData.invoices || []).filter(inv =>
            inv.invoiceType === 'purchase' &&
            inv.currency === 'USD' &&
            inv.status === 'confirmed' &&
            inv.invoiceDate >= fromDate &&
            inv.invoiceDate <= toDate
        );

        purchaseInvoices.forEach(invoice => {
            const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
            transactions.push({
                date: invoice.invoiceDate,
                type: 'purchases',
                typeText: 'فاتورة مشتريات',
                documentNumber: invoice.invoiceNumber,
                clientName: supplier ? supplier.name : 'مورد محذوف',
                amount: invoice.totalAmount,
                movementType: 'out',
                movementText: 'مصروف',
                description: `فاتورة مشتريات رقم ${invoice.invoiceNumber}`
            });
        });
    }

    // سندات القبض
    if (!transactionType || transactionType === 'receipts') {
        const receipts = (appData.payments || []).filter(payment =>
            payment.paymentType === 'receipt' &&
            payment.currency === 'USD' &&
            payment.status === 'confirmed' &&
            payment.paymentDate >= fromDate &&
            payment.paymentDate <= toDate
        );

        receipts.forEach(receipt => {
            const customer = appData.customers.find(c => c.id === receipt.customerId);
            transactions.push({
                date: receipt.paymentDate,
                type: 'receipts',
                typeText: 'سند قبض',
                documentNumber: receipt.paymentNumber,
                clientName: customer ? customer.name : 'عميل محذوف',
                amount: receipt.amount,
                movementType: 'in',
                movementText: 'إيراد',
                description: `سند قبض رقم ${receipt.paymentNumber}`
            });
        });
    }

    // سندات الدفع
    if (!transactionType || transactionType === 'payments') {
        const payments = (appData.payments || []).filter(payment =>
            payment.paymentType === 'payment' &&
            payment.currency === 'USD' &&
            payment.status === 'confirmed' &&
            payment.paymentDate >= fromDate &&
            payment.paymentDate <= toDate
        );

        payments.forEach(payment => {
            const supplier = appData.suppliers.find(s => s.id === payment.supplierId);
            transactions.push({
                date: payment.paymentDate,
                type: 'payments',
                typeText: 'سند دفع',
                documentNumber: payment.paymentNumber,
                clientName: supplier ? supplier.name : 'مورد محذوف',
                amount: payment.amount,
                movementType: 'out',
                movementText: 'مصروف',
                description: `سند دفع رقم ${payment.paymentNumber}`
            });
        });
    }

    // ترتيب المعاملات حسب التاريخ
    return transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
}

/**
 * حساب إحصائيات الدولار
 */
function calculateUSDStats(transactions) {
    let totalRevenue = 0;
    let totalExpenses = 0;

    transactions.forEach(transaction => {
        if (transaction.movementType === 'in') {
            totalRevenue += transaction.amount;
        } else {
            totalExpenses += transaction.amount;
        }
    });

    return {
        totalRevenue,
        totalExpenses,
        netBalance: totalRevenue - totalExpenses,
        totalTransactions: transactions.length
    };
}

/**
 * عرض تقرير أرصدة الدولار
 */
function displayUSDReport(transactions, stats) {
    // إخفاء رسالة عدم وجود بيانات
    document.getElementById('noUSDData').style.display = 'none';

    // إظهار الملخص والتفاصيل
    document.getElementById('usdSummaryCards').style.display = 'flex';
    document.getElementById('usdDetailsCard').style.display = 'block';

    // تحديث بطاقات الملخص
    document.getElementById('totalUSDRevenue').textContent = `$${formatCurrency(stats.totalRevenue)}`;
    document.getElementById('totalUSDExpenses').textContent = `$${formatCurrency(stats.totalExpenses)}`;
    document.getElementById('netUSDBalance').textContent = `$${formatCurrency(stats.netBalance)}`;
    document.getElementById('totalUSDTransactions').textContent = stats.totalTransactions;

    // تحديث جدول التفاصيل
    const tableBody = document.getElementById('usdTransactionsTable');
    let html = '';

    if (transactions.length === 0) {
        html = `
            <tr>
                <td colspan="7" class="text-center text-muted py-4">
                    <i class="fas fa-search fa-2x mb-2"></i>
                    <br>لا توجد معاملات بالدولار في الفترة المحددة
                </td>
            </tr>
        `;
    } else {
        transactions.forEach(transaction => {
            const amountClass = transaction.movementType === 'in' ? 'text-success' : 'text-danger';
            const movementIcon = transaction.movementType === 'in' ? 'fa-arrow-up' : 'fa-arrow-down';

            html += `
                <tr>
                    <td>${transaction.date}</td>
                    <td>
                        <span class="badge bg-${transaction.type === 'sales' || transaction.type === 'receipts' ? 'success' : 'danger'}">
                            ${transaction.typeText}
                        </span>
                    </td>
                    <td><strong>${transaction.documentNumber}</strong></td>
                    <td>${transaction.clientName}</td>
                    <td class="${amountClass}">
                        <i class="fas ${movementIcon} me-1"></i>
                        <strong>$${formatCurrency(transaction.amount)}</strong>
                    </td>
                    <td>
                        <span class="badge bg-${transaction.movementType === 'in' ? 'success' : 'danger'}">
                            ${transaction.movementText}
                        </span>
                    </td>
                    <td>${transaction.description}</td>
                </tr>
            `;
        });
    }

    tableBody.innerHTML = html;
}

/**
 * مسح فلاتر تقرير الدولار
 */
function clearUSDFilters() {
    document.getElementById('usdFromDate').value = '';
    document.getElementById('usdToDate').value = '';
    document.getElementById('usdTransactionType').value = '';

    // إخفاء النتائج
    document.getElementById('usdSummaryCards').style.display = 'none';
    document.getElementById('usdDetailsCard').style.display = 'none';
    document.getElementById('noUSDData').style.display = 'block';
}

/**
 * تصدير تقرير الدولار إلى Excel
 */
function exportUSDReport(format) {
    const summaryCards = document.getElementById('usdSummaryCards');
    if (!summaryCards || summaryCards.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    try {
        const fromDate = document.getElementById('usdFromDate').value;
        const toDate = document.getElementById('usdToDate').value;
        const transactionType = document.getElementById('usdTransactionType').value;

        // جمع البيانات
        const transactions = collectUSDTransactions(fromDate, toDate, transactionType);
        const stats = calculateUSDStats(transactions);

        const workbook = XLSX.utils.book_new();

        // ورقة الملخص
        const summaryData = [
            ['تقرير أرصدة الدولار الأمريكي'],
            ['الفترة:', `من ${fromDate} إلى ${toDate}`],
            ['نوع المعاملة:', transactionType ? getTransactionTypeText(transactionType) : 'جميع المعاملات'],
            [''],
            ['الملخص المالي'],
            ['إجمالي الإيرادات', `$${formatCurrency(stats.totalRevenue)}`],
            ['إجمالي المصروفات', `$${formatCurrency(stats.totalExpenses)}`],
            ['صافي الرصيد', `$${formatCurrency(stats.netBalance)}`],
            ['عدد المعاملات', stats.totalTransactions]
        ];

        const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص');

        // ورقة التفاصيل
        const detailsData = [
            ['التاريخ', 'نوع المعاملة', 'رقم المستند', 'العميل/المورد', 'المبلغ', 'نوع الحركة', 'الوصف']
        ];

        transactions.forEach(transaction => {
            detailsData.push([
                transaction.date,
                transaction.typeText,
                transaction.documentNumber,
                transaction.clientName,
                transaction.amount,
                transaction.movementText,
                transaction.description
            ]);
        });

        const detailsSheet = XLSX.utils.aoa_to_sheet(detailsData);
        XLSX.utils.book_append_sheet(workbook, detailsSheet, 'التفاصيل');

        // حفظ الملف
        const fileName = `تقرير_أرصدة_الدولار_${fromDate}_${toDate}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        alert('✅ تم تصدير التقرير إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير التقرير:', error);
        alert('حدث خطأ أثناء تصدير التقرير. يرجى المحاولة مرة أخرى.');
    }
}

/**
 * طباعة تقرير الدولار
 */
function printUSDReport() {
    const summaryCards = document.getElementById('usdSummaryCards');
    if (!summaryCards || summaryCards.style.display === 'none') {
        alert('يرجى إنشاء التقرير أولاً');
        return;
    }

    const fromDate = document.getElementById('usdFromDate').value;
    const toDate = document.getElementById('usdToDate').value;
    const transactionType = document.getElementById('usdTransactionType').value;

    // جمع البيانات
    const transactions = collectUSDTransactions(fromDate, toDate, transactionType);
    const stats = calculateUSDStats(transactions);

    // إنشاء نافذة الطباعة
    const printWindow = window.open('', '_blank', 'width=1200,height=800');

    printWindow.document.write(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>تقرير أرصدة الدولار الأمريكي</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                .report-header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; }
                @media print {
                    .no-print { display: none !important; }
                    body { margin: 0; }
                }
            </style>
        </head>
        <body>
            <div class="container-fluid p-4">
                <div class="report-header p-4 rounded mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-1">
                                <i class="fas fa-dollar-sign me-2"></i>
                                تقرير أرصدة الدولار الأمريكي
                            </h2>
                            <p class="mb-0">الفترة: من ${fromDate} إلى ${toDate}</p>
                            ${transactionType ? `<p class="mb-0">نوع المعاملة: ${getTransactionTypeText(transactionType)}</p>` : ''}
                        </div>
                        <div class="col-md-4 text-end">
                            <h4>SAM PRO</h4>
                            <p class="mb-0">برنامج المحاسب الذكي</p>
                        </div>
                    </div>
                </div>

                <!-- الملخص المالي -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <h5 class="card-title text-success">إجمالي الإيرادات</h5>
                                <h3 class="text-success">$${formatCurrency(stats.totalRevenue)}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <h5 class="card-title text-danger">إجمالي المصروفات</h5>
                                <h3 class="text-danger">$${formatCurrency(stats.totalExpenses)}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-info">
                            <div class="card-body text-center">
                                <h5 class="card-title text-info">صافي الرصيد</h5>
                                <h3 class="${stats.netBalance >= 0 ? 'text-success' : 'text-danger'}">$${formatCurrency(stats.netBalance)}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <h5 class="card-title text-warning">عدد المعاملات</h5>
                                <h3 class="text-warning">${stats.totalTransactions}</h3>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- جدول التفاصيل -->
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0">تفاصيل المعاملات</h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>#</th>
                                        <th>التاريخ</th>
                                        <th>نوع المعاملة</th>
                                        <th>رقم المستند</th>
                                        <th>العميل/المورد</th>
                                        <th>المبلغ</th>
                                        <th>نوع الحركة</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${transactions.map((transaction, index) => `
                                        <tr>
                                            <td>${index + 1}</td>
                                            <td>${transaction.date}</td>
                                            <td>${transaction.typeText}</td>
                                            <td>${transaction.documentNumber}</td>
                                            <td>${transaction.clientName}</td>
                                            <td class="${transaction.movementType === 'in' ? 'text-success' : 'text-danger'}">
                                                $${formatCurrency(transaction.amount)}
                                            </td>
                                            <td>${transaction.movementText}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4 no-print">
                    <button class="btn btn-primary" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>
                        طباعة
                    </button>
                    <button class="btn btn-secondary ms-2" onclick="window.close()">
                        <i class="fas fa-times me-2"></i>
                        إغلاق
                    </button>
                </div>
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();
    console.log('✅ تم فتح معاينة طباعة تقرير الدولار');
}

/**
 * الحصول على نص نوع المعاملة
 */
function getTransactionTypeText(type) {
    const types = {
        'sales': 'فواتير مبيعات',
        'purchases': 'فواتير مشتريات',
        'receipts': 'سندات قبض',
        'payments': 'سندات دفع'
    };
    return types[type] || type;
}

/**
 * طباعة تقرير الأرصدة
 */
function printBalancesReport() {
    console.log('🖨️ طباعة تقرير الأرصدة...');

    const printWindow = window.open('', '_blank', 'width=800,height=600');

    const currencyStats = calculateCurrencyStatistics();
    const balanceStats = calculateBalancesStatistics();

    printWindow.document.write(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>تقرير أرصدة العملاء والموردين</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                .report-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                @media print {
                    .no-print { display: none !important; }
                    body { margin: 0; }
                }
            </style>
        </head>
        <body>
            <div class="container-fluid p-4">
                <!-- رأس التقرير -->
                <div class="report-header p-4 rounded mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-1">
                                <i class="fas fa-balance-scale me-2"></i>
                                تقرير أرصدة العملاء والموردين
                            </h2>
                            <p class="mb-0">تاريخ التقرير: ${formatDate(new Date())}</p>
                        </div>
                        <div class="col-md-4 text-end">
                            <h4>SAM PRO</h4>
                            <p class="mb-0">برنامج المحاسب الذكي</p>
                        </div>
                    </div>
                </div>

                <!-- ملخص الإحصائيات -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card border-primary">
                            <div class="card-body text-center">
                                <i class="fas fa-users fa-2x text-primary mb-2"></i>
                                <h4 class="text-primary">${balanceStats.totalCustomers}</h4>
                                <p class="mb-0">إجمالي العملاء</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-warning">
                            <div class="card-body text-center">
                                <i class="fas fa-truck fa-2x text-warning mb-2"></i>
                                <h4 class="text-warning">${balanceStats.totalSuppliers}</h4>
                                <p class="mb-0">إجمالي الموردين</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <i class="fas fa-arrow-up fa-2x text-success mb-2"></i>
                                <h4 class="text-success">${balanceStats.totalPositiveBalances}</h4>
                                <p class="mb-0">أرصدة موجبة</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-danger">
                            <div class="card-body text-center">
                                <i class="fas fa-arrow-down fa-2x text-danger mb-2"></i>
                                <h4 class="text-danger">${balanceStats.totalNegativeBalances}</h4>
                                <p class="mb-0">أرصدة سالبة</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- أرصدة العملاء -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-users me-2"></i>
                            أرصدة العملاء
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>#</th>
                                        <th>اسم العميل</th>
                                        <th>الهاتف</th>
                                        <th>العملة</th>
                                        <th>الرصيد</th>
                                        <th>الحالة</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${appData.customers ? appData.customers.map((customer, index) => {
                                        const balance = customer.currentBalance || 0;
                                        const currency = customer.currency || 'SYP';
                                        const currencySymbol = getCurrencySymbol(currency);
                                        const status = balance > 0 ? 'مدين' : balance < 0 ? 'دائن' : 'متوازن';

                                        return `
                                        <tr>
                                            <td>${index + 1}</td>
                                            <td><strong>${customer.name}</strong></td>
                                            <td>${customer.phone || '-'}</td>
                                            <td>${getCurrencyName(currency)}</td>
                                            <td>${formatCurrency(Math.abs(balance))} ${currencySymbol}</td>
                                            <td><span class="badge bg-${balance > 0 ? 'danger' : balance < 0 ? 'success' : 'secondary'}">${status}</span></td>
                                        </tr>
                                        `;
                                    }).join('') : '<tr><td colspan="6" class="text-center">لا توجد عملاء</td></tr>'}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- أرصدة الموردين -->
                <div class="card mb-4">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="mb-0">
                            <i class="fas fa-truck me-2"></i>
                            أرصدة الموردين
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>#</th>
                                        <th>اسم المورد</th>
                                        <th>الهاتف</th>
                                        <th>العملة</th>
                                        <th>الرصيد</th>
                                        <th>الحالة</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${appData.suppliers ? appData.suppliers.map((supplier, index) => {
                                        const balance = supplier.currentBalance || 0;
                                        const currency = supplier.currency || 'SYP';
                                        const currencySymbol = getCurrencySymbol(currency);
                                        const status = balance > 0 ? 'دائن' : balance < 0 ? 'مدين' : 'متوازن';

                                        return `
                                        <tr>
                                            <td>${index + 1}</td>
                                            <td><strong>${supplier.name}</strong></td>
                                            <td>${supplier.phone || '-'}</td>
                                            <td>${getCurrencyName(currency)}</td>
                                            <td>${formatCurrency(Math.abs(balance))} ${currencySymbol}</td>
                                            <td><span class="badge bg-${balance > 0 ? 'success' : balance < 0 ? 'danger' : 'secondary'}">${status}</span></td>
                                        </tr>
                                        `;
                                    }).join('') : '<tr><td colspan="6" class="text-center">لا توجد موردين</td></tr>'}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- أزرار الطباعة -->
                <div class="text-center mt-4 no-print">
                    <button class="btn btn-primary me-2" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>طباعة
                    </button>
                    <button class="btn btn-secondary" onclick="window.close()">
                        <i class="fas fa-times me-2"></i>إغلاق
                    </button>
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://kit.fontawesome.com/your-fontawesome-kit.js"></script>
        </body>
        </html>
    `);

    printWindow.document.close();
    console.log('✅ تم فتح نافذة طباعة تقرير الأرصدة');
}

/**
 * صفحة النسخ الاحتياطي والاستعادة
 */
function getBackupRestoreHTML() {
    return `
        <div class="row">
            <div class="col-12">
                <h1 class="h3 mb-4">
                    <i class="fas fa-shield-alt me-2 text-primary"></i>
                    النسخ الاحتياطي والاستعادة
                </h1>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>حماية بياناتك:</strong> قم بإنشاء نسخ احتياطية منتظمة لحماية بياناتك من الفقدان، واستعد البيانات عند الحاجة.
                </div>
            </div>
        </div>

        <div class="row">
            <!-- النسخ الاحتياطي -->
            <div class="col-md-6">
                <div class="card shadow h-100">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-download me-2"></i>
                            إنشاء نسخة احتياطية
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">
                            قم بإنشاء نسخة احتياطية كاملة من جميع بياناتك بما في ذلك:
                        </p>
                        <ul class="list-unstyled">
                            <li><i class="fas fa-check text-success me-2"></i>العملاء والموردين</li>
                            <li><i class="fas fa-check text-success me-2"></i>الأصناف والمخازن</li>
                            <li><i class="fas fa-check text-success me-2"></i>الفواتير والمبيعات</li>
                            <li><i class="fas fa-check text-success me-2"></i>المشتريات والدفعات</li>
                            <li><i class="fas fa-check text-success me-2"></i>الإعدادات والتكوينات</li>
                        </ul>

                        <div class="mb-3">
                            <label for="backupType" class="form-label">نوع النسخة الاحتياطية</label>
                            <select class="form-select" id="backupType">
                                <option value="full">نسخة كاملة (جميع البيانات)</option>
                                <option value="data-only">البيانات فقط (بدون إعدادات)</option>
                                <option value="settings-only">الإعدادات فقط</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="backupFormat" class="form-label">تنسيق الملف</label>
                            <select class="form-select" id="backupFormat">
                                <option value="json">JSON (موصى به)</option>
                                <option value="csv">CSV (للاستيراد في Excel)</option>
                                <option value="sql">SQL (قاعدة بيانات)</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="includeImages" checked>
                                <label class="form-check-label" for="includeImages">
                                    تضمين الصور والملفات المرفقة
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="compressBackup" checked>
                                <label class="form-check-label" for="compressBackup">
                                    ضغط النسخة الاحتياطية
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-success btn-lg" onclick="createBackup()">
                                <i class="fas fa-download me-2"></i>
                                إنشاء نسخة احتياطية
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="scheduleAutoBackup()">
                                <i class="fas fa-clock me-2"></i>
                                جدولة النسخ التلقائي
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- الاستعادة -->
            <div class="col-md-6">
                <div class="card shadow h-100">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-upload me-2"></i>
                            استعادة البيانات
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>تحذير:</strong> استعادة البيانات ستستبدل البيانات الحالية. تأكد من إنشاء نسخة احتياطية أولاً.
                        </div>

                        <div class="mb-3">
                            <label for="restoreFile" class="form-label">اختر ملف النسخة الاحتياطية</label>
                            <input type="file" class="form-control" id="restoreFile"
                                   accept=".json,.csv,.sql,.zip" onchange="validateRestoreFile()">
                            <div class="form-text">
                                الملفات المدعومة: JSON, CSV, SQL, ZIP
                            </div>
                        </div>

                        <div class="mb-3" id="restoreOptions" style="display: none;">
                            <label class="form-label">خيارات الاستعادة</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="restoreMode" id="restoreReplace" value="replace" checked>
                                <label class="form-check-label" for="restoreReplace">
                                    استبدال البيانات الحالية
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="restoreMode" id="restoreMerge" value="merge">
                                <label class="form-check-label" for="restoreMerge">
                                    دمج مع البيانات الحالية
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="restoreMode" id="restorePreview" value="preview">
                                <label class="form-check-label" for="restorePreview">
                                    معاينة فقط (بدون تطبيق)
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-warning btn-lg" id="restoreButton"
                                    onclick="restoreBackup()" disabled>
                                <i class="fas fa-upload me-2"></i>
                                استعادة البيانات
                            </button>
                            <button type="button" class="btn btn-outline-warning" onclick="validateBackupFile()">
                                <i class="fas fa-check-circle me-2"></i>
                                التحقق من صحة الملف
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- سجل النسخ الاحتياطية -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            سجل النسخ الاحتياطية
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>التاريخ والوقت</th>
                                        <th>النوع</th>
                                        <th>الحجم</th>
                                        <th>الحالة</th>
                                        <th>الملاحظات</th>
                                        <th>إجراءات</th>
                                    </tr>
                                </thead>
                                <tbody id="backupHistoryTable">
                                    <!-- سيتم ملؤها ديناميكياً -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- إعدادات النسخ التلقائي -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-cogs me-2"></i>
                            إعدادات النسخ التلقائي
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="autoBackupEnabled" class="form-label">تفعيل النسخ التلقائي</label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="autoBackupEnabled"
                                               onchange="toggleAutoBackup()">
                                        <label class="form-check-label" for="autoBackupEnabled">
                                            مفعل
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="autoBackupFrequency" class="form-label">تكرار النسخ</label>
                                    <select class="form-select" id="autoBackupFrequency">
                                        <option value="daily">يومياً</option>
                                        <option value="weekly">أسبوعياً</option>
                                        <option value="monthly">شهرياً</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="autoBackupTime" class="form-label">وقت النسخ</label>
                                    <input type="time" class="form-control" id="autoBackupTime" value="02:00">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="maxBackupFiles" class="form-label">عدد النسخ المحفوظة</label>
                                    <input type="number" class="form-control" id="maxBackupFiles"
                                           min="1" max="50" value="10">
                                    <div class="form-text">
                                        سيتم حذف النسخ الأقدم تلقائياً
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="backupLocation" class="form-label">مجلد الحفظ</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="backupLocation"
                                               value="Downloads/SAM_Backups" readonly>
                                        <button class="btn btn-outline-secondary" type="button"
                                                onclick="selectBackupLocation()">
                                            <i class="fas fa-folder-open"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-primary" onclick="saveAutoBackupSettings()">
                                <i class="fas fa-save me-2"></i>
                                حفظ الإعدادات
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- نافذة تقدم العملية -->
        <div class="modal fade" id="backupProgressModal" tabindex="-1" data-bs-backdrop="static">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-spinner fa-spin me-2"></i>
                            جاري المعالجة...
                        </h5>
                    </div>
                    <div class="modal-body">
                        <div class="progress mb-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated"
                                 id="backupProgressBar" role="progressbar" style="width: 0%">
                                0%
                            </div>
                        </div>
                        <p id="backupProgressText">جاري التحضير...</p>
                        <div class="text-center">
                            <small class="text-muted" id="backupProgressDetails"></small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * تهيئة صفحة النسخ الاحتياطي والاستعادة
 */
function initializeBackupRestorePage() {
    console.log('🚀 تهيئة صفحة النسخ الاحتياطي والاستعادة...');

    // تحميل إعدادات النسخ التلقائي
    loadAutoBackupSettings();

    // تحميل سجل النسخ الاحتياطية
    loadBackupHistory();

    console.log('✅ تم تهيئة صفحة النسخ الاحتياطي والاستعادة');
}

/**
 * إنشاء نسخة احتياطية
 */
function createBackup() {
    console.log('💾 بدء إنشاء النسخة الاحتياطية...');

    const backupType = document.getElementById('backupType')?.value || 'full';
    const backupFormat = document.getElementById('backupFormat')?.value || 'json';
    const includeImages = document.getElementById('includeImages')?.checked || false;
    const compressBackup = document.getElementById('compressBackup')?.checked || false;

    // إظهار نافذة التقدم
    showBackupProgress('إنشاء النسخة الاحتياطية', 'جاري تحضير البيانات...');

    try {
        // جمع البيانات حسب النوع المحدد
        let backupData = {};

        if (backupType === 'full' || backupType === 'data-only') {
            updateBackupProgress(10, 'جاري جمع بيانات العملاء...');
            backupData.customers = appData.customers || [];

            updateBackupProgress(20, 'جاري جمع بيانات الموردين...');
            backupData.suppliers = appData.suppliers || [];

            updateBackupProgress(30, 'جاري جمع بيانات الأصناف...');
            backupData.products = appData.products || [];

            updateBackupProgress(40, 'جاري جمع بيانات المخازن...');
            backupData.warehouses = appData.warehouses || [];

            updateBackupProgress(50, 'جاري جمع بيانات الفواتير...');
            backupData.invoices = appData.invoices || [];

            updateBackupProgress(60, 'جاري جمع بيانات الدفعات...');
            backupData.payments = appData.payments || [];

            updateBackupProgress(70, 'جاري جمع بيانات المبيعات...');
            backupData.sales = appData.sales || [];

            updateBackupProgress(80, 'جاري جمع بيانات المشتريات...');
            backupData.purchases = appData.purchases || [];
        }

        if (backupType === 'full' || backupType === 'settings-only') {
            updateBackupProgress(85, 'جاري جمع الإعدادات...');
            backupData.settings = appData.settings || {};
        }

        // إضافة معلومات النسخة الاحتياطية
        backupData.backupInfo = {
            version: '1.0',
            createdAt: new Date().toISOString(),
            type: backupType,
            format: backupFormat,
            includeImages: includeImages,
            compressed: compressBackup,
            appVersion: 'SAM PRO v1.0',
            dataCount: {
                customers: backupData.customers?.length || 0,
                suppliers: backupData.suppliers?.length || 0,
                products: backupData.products?.length || 0,
                warehouses: backupData.warehouses?.length || 0,
                invoices: backupData.invoices?.length || 0,
                payments: backupData.payments?.length || 0,
                sales: backupData.sales?.length || 0,
                purchases: backupData.purchases?.length || 0
            }
        };

        updateBackupProgress(90, 'جاري تحضير الملف للتحميل...');

        // تحويل البيانات حسب التنسيق المطلوب
        let fileContent, fileName, mimeType;

        if (backupFormat === 'json') {
            fileContent = JSON.stringify(backupData, null, 2);
            fileName = `SAM_Backup_${backupType}_${new Date().toISOString().split('T')[0]}.json`;
            mimeType = 'application/json';
        } else if (backupFormat === 'csv') {
            fileContent = convertToCSV(backupData);
            fileName = `SAM_Backup_${backupType}_${new Date().toISOString().split('T')[0]}.csv`;
            mimeType = 'text/csv';
        } else if (backupFormat === 'sql') {
            fileContent = convertToSQL(backupData);
            fileName = `SAM_Backup_${backupType}_${new Date().toISOString().split('T')[0]}.sql`;
            mimeType = 'application/sql';
        }

        updateBackupProgress(95, 'جاري تحميل الملف...');

        // تحميل الملف
        downloadFile(fileContent, fileName, mimeType);

        // تسجيل النسخة الاحتياطية في السجل
        addToBackupHistory({
            date: new Date().toISOString(),
            type: backupType,
            format: backupFormat,
            size: formatFileSize(fileContent.length),
            status: 'success',
            fileName: fileName,
            notes: `نسخة احتياطية ${backupType === 'full' ? 'كاملة' : backupType === 'data-only' ? 'للبيانات فقط' : 'للإعدادات فقط'}`
        });

        updateBackupProgress(100, 'تم إنشاء النسخة الاحتياطية بنجاح!');

        setTimeout(() => {
            hideBackupProgress();
            alert(`✅ تم إنشاء النسخة الاحتياطية بنجاح!

📁 اسم الملف: ${fileName}
📊 نوع النسخة: ${backupType === 'full' ? 'كاملة' : backupType === 'data-only' ? 'البيانات فقط' : 'الإعدادات فقط'}
💾 التنسيق: ${backupFormat.toUpperCase()}
📏 الحجم: ${formatFileSize(fileContent.length)}

تم حفظ الملف في مجلد التحميلات.`);

            // تحديث سجل النسخ الاحتياطية
            loadBackupHistory();
        }, 1000);

        console.log('✅ تم إنشاء النسخة الاحتياطية بنجاح:', fileName);

    } catch (error) {
        console.error('❌ خطأ في إنشاء النسخة الاحتياطية:', error);
        hideBackupProgress();
        alert('حدث خطأ أثناء إنشاء النسخة الاحتياطية. يرجى المحاولة مرة أخرى.');

        // تسجيل الخطأ في السجل
        addToBackupHistory({
            date: new Date().toISOString(),
            type: backupType,
            format: backupFormat,
            size: '0 KB',
            status: 'error',
            fileName: 'فشل',
            notes: `خطأ: ${error.message}`
        });
    }
}

/**
 * استعادة النسخة الاحتياطية
 */
function restoreBackup() {
    console.log('📥 بدء استعادة النسخة الاحتياطية...');

    const fileInput = document.getElementById('restoreFile');
    const restoreMode = document.querySelector('input[name="restoreMode"]:checked')?.value || 'replace';

    if (!fileInput.files || fileInput.files.length === 0) {
        alert('يرجى اختيار ملف النسخة الاحتياطية أولاً');
        return;
    }

    const file = fileInput.files[0];

    // تأكيد العملية
    const confirmMessage = restoreMode === 'replace' ?
        'هل أنت متأكد من استبدال جميع البيانات الحالية؟ هذا الإجراء لا يمكن التراجع عنه.' :
        restoreMode === 'merge' ?
        'هل أنت متأكد من دمج البيانات مع البيانات الحالية؟' :
        'سيتم عرض معاينة للبيانات فقط بدون تطبيق التغييرات.';

    if (!confirm(confirmMessage)) {
        return;
    }

    // إظهار نافذة التقدم
    showBackupProgress('استعادة النسخة الاحتياطية', 'جاري قراءة الملف...');

    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            updateBackupProgress(20, 'جاري تحليل البيانات...');

            let backupData;
            const fileExtension = file.name.split('.').pop().toLowerCase();

            if (fileExtension === 'json') {
                backupData = JSON.parse(e.target.result);
            } else if (fileExtension === 'csv') {
                backupData = parseCSVBackup(e.target.result);
            } else if (fileExtension === 'sql') {
                backupData = parseSQLBackup(e.target.result);
            } else {
                throw new Error('تنسيق الملف غير مدعوم');
            }

            updateBackupProgress(40, 'جاري التحقق من صحة البيانات...');

            // التحقق من صحة البيانات
            if (!validateBackupData(backupData)) {
                throw new Error('البيانات في الملف غير صحيحة أو تالفة');
            }

            updateBackupProgress(60, 'جاري تطبيق البيانات...');

            if (restoreMode === 'preview') {
                // معاينة فقط
                showBackupPreview(backupData);
                hideBackupProgress();
                return;
            }

            // تطبيق البيانات
            applyBackupData(backupData, restoreMode);

            updateBackupProgress(90, 'جاري حفظ البيانات...');

            // حفظ البيانات
            saveData();

            updateBackupProgress(100, 'تم استعادة البيانات بنجاح!');

            // تسجيل العملية في السجل
            addToBackupHistory({
                date: new Date().toISOString(),
                type: 'restore',
                format: fileExtension,
                size: formatFileSize(file.size),
                status: 'success',
                fileName: file.name,
                notes: `استعادة بنجاح - وضع: ${restoreMode}`
            });

            setTimeout(() => {
                hideBackupProgress();
                alert(`✅ تم استعادة البيانات بنجاح!

📁 الملف: ${file.name}
🔄 الوضع: ${restoreMode === 'replace' ? 'استبدال' : 'دمج'}
📊 البيانات المستعادة:
• العملاء: ${backupData.customers?.length || 0}
• الموردين: ${backupData.suppliers?.length || 0}
• الأصناف: ${backupData.products?.length || 0}
• الفواتير: ${backupData.invoices?.length || 0}

سيتم إعادة تحميل الصفحة لتطبيق التغييرات.`);

                // إعادة تحميل الصفحة
                location.reload();
            }, 1000);

            console.log('✅ تم استعادة النسخة الاحتياطية بنجاح');

        } catch (error) {
            console.error('❌ خطأ في استعادة النسخة الاحتياطية:', error);
            hideBackupProgress();
            alert(`حدث خطأ أثناء استعادة النسخة الاحتياطية:

${error.message}

يرجى التأكد من صحة الملف والمحاولة مرة أخرى.`);

            // تسجيل الخطأ في السجل
            addToBackupHistory({
                date: new Date().toISOString(),
                type: 'restore',
                format: file.name.split('.').pop(),
                size: formatFileSize(file.size),
                status: 'error',
                fileName: file.name,
                notes: `خطأ: ${error.message}`
            });
        }
    };

    reader.onerror = function() {
        hideBackupProgress();
        alert('حدث خطأ أثناء قراءة الملف');
    };

    reader.readAsText(file);
}

/**
 * التحقق من صحة ملف النسخة الاحتياطية
 */
function validateRestoreFile() {
    const fileInput = document.getElementById('restoreFile');
    const restoreOptions = document.getElementById('restoreOptions');
    const restoreButton = document.getElementById('restoreButton');

    if (fileInput.files && fileInput.files.length > 0) {
        const file = fileInput.files[0];
        const fileExtension = file.name.split('.').pop().toLowerCase();
        const supportedFormats = ['json', 'csv', 'sql', 'zip'];

        if (supportedFormats.includes(fileExtension)) {
            restoreOptions.style.display = 'block';
            restoreButton.disabled = false;

            // عرض معلومات الملف
            const fileInfo = `
                <div class="alert alert-info mt-2">
                    <strong>معلومات الملف:</strong><br>
                    الاسم: ${file.name}<br>
                    الحجم: ${formatFileSize(file.size)}<br>
                    النوع: ${fileExtension.toUpperCase()}
                </div>
            `;

            if (!document.getElementById('fileInfo')) {
                const fileInfoDiv = document.createElement('div');
                fileInfoDiv.id = 'fileInfo';
                fileInfoDiv.innerHTML = fileInfo;
                fileInput.parentNode.appendChild(fileInfoDiv);
            } else {
                document.getElementById('fileInfo').innerHTML = fileInfo;
            }
        } else {
            restoreOptions.style.display = 'none';
            restoreButton.disabled = true;
            alert('تنسيق الملف غير مدعوم. الملفات المدعومة: JSON, CSV, SQL, ZIP');
        }
    } else {
        restoreOptions.style.display = 'none';
        restoreButton.disabled = true;

        // إزالة معلومات الملف
        const fileInfo = document.getElementById('fileInfo');
        if (fileInfo) {
            fileInfo.remove();
        }
    }
}

/**
 * إظهار نافذة تقدم العملية
 */
function showBackupProgress(title, message) {
    const modal = document.getElementById('backupProgressModal');
    const titleElement = modal.querySelector('.modal-title');
    const textElement = document.getElementById('backupProgressText');

    titleElement.innerHTML = `<i class="fas fa-spinner fa-spin me-2"></i>${title}`;
    textElement.textContent = message;

    const progressBar = document.getElementById('backupProgressBar');
    progressBar.style.width = '0%';
    progressBar.textContent = '0%';

    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();
}

/**
 * تحديث تقدم العملية
 */
function updateBackupProgress(percentage, message, details = '') {
    const progressBar = document.getElementById('backupProgressBar');
    const textElement = document.getElementById('backupProgressText');
    const detailsElement = document.getElementById('backupProgressDetails');

    progressBar.style.width = `${percentage}%`;
    progressBar.textContent = `${percentage}%`;
    textElement.textContent = message;
    detailsElement.textContent = details;
}

/**
 * إخفاء نافذة تقدم العملية
 */
function hideBackupProgress() {
    const modal = document.getElementById('backupProgressModal');
    const bootstrapModal = bootstrap.Modal.getInstance(modal);
    if (bootstrapModal) {
        bootstrapModal.hide();
    }
}

/**
 * تحميل ملف
 */
function downloadFile(content, fileName, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    link.style.display = 'none';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(url);
}

/**
 * تنسيق حجم الملف
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * تحويل البيانات إلى CSV
 */
function convertToCSV(data) {
    let csv = '';

    // إضافة معلومات النسخة الاحتياطية
    csv += 'SAM PRO Backup File\n';
    csv += `Created: ${data.backupInfo.createdAt}\n`;
    csv += `Type: ${data.backupInfo.type}\n\n`;

    // تحويل كل جدول إلى CSV
    Object.keys(data).forEach(tableName => {
        if (tableName === 'backupInfo') return;

        const tableData = data[tableName];
        if (Array.isArray(tableData) && tableData.length > 0) {
            csv += `\n--- ${tableName.toUpperCase()} ---\n`;

            // رؤوس الأعمدة
            const headers = Object.keys(tableData[0]);
            csv += headers.join(',') + '\n';

            // البيانات
            tableData.forEach(row => {
                const values = headers.map(header => {
                    const value = row[header];
                    return typeof value === 'string' ? `"${value.replace(/"/g, '""')}"` : value;
                });
                csv += values.join(',') + '\n';
            });
        }
    });

    return csv;
}

/**
 * تحويل البيانات إلى SQL
 */
function convertToSQL(data) {
    let sql = '';

    // إضافة تعليقات
    sql += `-- SAM PRO Database Backup\n`;
    sql += `-- Created: ${data.backupInfo.createdAt}\n`;
    sql += `-- Type: ${data.backupInfo.type}\n\n`;

    // إنشاء الجداول والبيانات
    Object.keys(data).forEach(tableName => {
        if (tableName === 'backupInfo') return;

        const tableData = data[tableName];
        if (Array.isArray(tableData) && tableData.length > 0) {
            sql += `-- Table: ${tableName}\n`;
            sql += `DROP TABLE IF EXISTS ${tableName};\n`;

            // إنشاء الجدول
            const firstRow = tableData[0];
            const columns = Object.keys(firstRow).map(key => {
                const value = firstRow[key];
                const type = typeof value === 'number' ? 'DECIMAL(15,2)' : 'TEXT';
                return `${key} ${type}`;
            });

            sql += `CREATE TABLE ${tableName} (\n`;
            sql += `  ${columns.join(',\n  ')}\n`;
            sql += `);\n\n`;

            // إدراج البيانات
            tableData.forEach(row => {
                const values = Object.values(row).map(value => {
                    if (value === null || value === undefined) return 'NULL';
                    if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
                    return value;
                });

                sql += `INSERT INTO ${tableName} VALUES (${values.join(', ')});\n`;
            });

            sql += '\n';
        }
    });

    return sql;
}

/**
 * التحقق من صحة بيانات النسخة الاحتياطية
 */
function validateBackupData(data) {
    try {
        // التحقق من وجود معلومات النسخة الاحتياطية
        if (!data.backupInfo) {
            console.warn('⚠️ معلومات النسخة الاحتياطية مفقودة');
        }

        // التحقق من صحة البيانات الأساسية
        const requiredTables = ['customers', 'suppliers', 'products', 'warehouses'];
        let hasValidData = false;

        requiredTables.forEach(table => {
            if (data[table] && Array.isArray(data[table])) {
                hasValidData = true;
                console.log(`✅ جدول ${table}: ${data[table].length} عنصر`);
            }
        });

        if (!hasValidData) {
            throw new Error('لا توجد بيانات صحيحة في الملف');
        }

        return true;

    } catch (error) {
        console.error('❌ خطأ في التحقق من البيانات:', error);
        return false;
    }
}

/**
 * تطبيق بيانات النسخة الاحتياطية
 */
function applyBackupData(backupData, mode) {
    console.log(`🔄 تطبيق البيانات - الوضع: ${mode}`);

    if (mode === 'replace') {
        // استبدال جميع البيانات
        Object.keys(backupData).forEach(key => {
            if (key !== 'backupInfo') {
                appData[key] = backupData[key] || [];
            }
        });
    } else if (mode === 'merge') {
        // دمج البيانات
        Object.keys(backupData).forEach(key => {
            if (key !== 'backupInfo' && Array.isArray(backupData[key])) {
                if (!appData[key]) {
                    appData[key] = [];
                }

                // دمج البيانات مع تجنب التكرار
                backupData[key].forEach(item => {
                    const existingIndex = appData[key].findIndex(existing =>
                        existing.id === item.id || existing.name === item.name
                    );

                    if (existingIndex >= 0) {
                        // تحديث العنصر الموجود
                        appData[key][existingIndex] = { ...appData[key][existingIndex], ...item };
                    } else {
                        // إضافة عنصر جديد
                        appData[key].push(item);
                    }
                });
            }
        });
    }

    console.log('✅ تم تطبيق البيانات بنجاح');
}

/**
 * إضافة عملية إلى سجل النسخ الاحتياطية
 */
function addToBackupHistory(entry) {
    if (!appData.backupHistory) {
        appData.backupHistory = [];
    }

    appData.backupHistory.unshift(entry); // إضافة في المقدمة

    // الاحتفاظ بآخر 50 عملية فقط
    if (appData.backupHistory.length > 50) {
        appData.backupHistory = appData.backupHistory.slice(0, 50);
    }

    saveData();
}

/**
 * تحميل سجل النسخ الاحتياطية
 */
function loadBackupHistory() {
    const tableBody = document.getElementById('backupHistoryTable');
    if (!tableBody) return;

    const history = appData.backupHistory || [];

    if (history.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-muted py-4">
                    <i class="fas fa-history fa-2x mb-2"></i>
                    <br>لا توجد عمليات نسخ احتياطي مسجلة
                </td>
            </tr>
        `;
        return;
    }

    let html = '';
    history.forEach((entry, index) => {
        const date = new Date(entry.date);
        const statusClass = entry.status === 'success' ? 'success' : 'danger';
        const statusIcon = entry.status === 'success' ? 'check-circle' : 'exclamation-circle';
        const statusText = entry.status === 'success' ? 'نجح' : 'فشل';

        html += `
            <tr>
                <td>
                    <div>${formatDate(date)}</div>
                    <small class="text-muted">${date.toLocaleTimeString('ar-SA')}</small>
                </td>
                <td>
                    <span class="badge bg-info">
                        ${entry.type === 'full' ? 'كاملة' :
                          entry.type === 'data-only' ? 'البيانات فقط' :
                          entry.type === 'settings-only' ? 'الإعدادات فقط' :
                          entry.type === 'restore' ? 'استعادة' : entry.type}
                    </span>
                </td>
                <td>${entry.size}</td>
                <td>
                    <span class="badge bg-${statusClass}">
                        <i class="fas fa-${statusIcon} me-1"></i>
                        ${statusText}
                    </span>
                </td>
                <td>
                    <div>${entry.fileName}</div>
                    ${entry.notes ? `<small class="text-muted">${entry.notes}</small>` : ''}
                </td>
                <td>
                    <div class="btn-group" role="group">
                        ${entry.status === 'success' && entry.type !== 'restore' ? `
                            <button type="button" class="btn btn-sm btn-outline-primary"
                                    onclick="downloadBackupAgain('${entry.fileName}')"
                                    title="تحميل مرة أخرى">
                                <i class="fas fa-download"></i>
                            </button>
                        ` : ''}
                        <button type="button" class="btn btn-sm btn-outline-danger"
                                onclick="removeFromBackupHistory(${index})"
                                title="حذف من السجل">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });

    tableBody.innerHTML = html;
}

/**
 * حذف عملية من سجل النسخ الاحتياطية
 */
function removeFromBackupHistory(index) {
    if (confirm('هل أنت متأكد من حذف هذه العملية من السجل؟')) {
        appData.backupHistory.splice(index, 1);
        saveData();
        loadBackupHistory();
    }
}

/**
 * تحميل إعدادات النسخ التلقائي
 */
function loadAutoBackupSettings() {
    const settings = appData.settings?.autoBackup || {};

    const enabledCheckbox = document.getElementById('autoBackupEnabled');
    const frequencySelect = document.getElementById('autoBackupFrequency');
    const timeInput = document.getElementById('autoBackupTime');
    const maxFilesInput = document.getElementById('maxBackupFiles');
    const locationInput = document.getElementById('backupLocation');

    if (enabledCheckbox) enabledCheckbox.checked = settings.enabled || false;
    if (frequencySelect) frequencySelect.value = settings.frequency || 'weekly';
    if (timeInput) timeInput.value = settings.time || '02:00';
    if (maxFilesInput) maxFilesInput.value = settings.maxFiles || 10;
    if (locationInput) locationInput.value = settings.location || 'Downloads/SAM_Backups';
}

/**
 * حفظ إعدادات النسخ التلقائي
 */
function saveAutoBackupSettings() {
    const enabled = document.getElementById('autoBackupEnabled')?.checked || false;
    const frequency = document.getElementById('autoBackupFrequency')?.value || 'weekly';
    const time = document.getElementById('autoBackupTime')?.value || '02:00';
    const maxFiles = parseInt(document.getElementById('maxBackupFiles')?.value) || 10;
    const location = document.getElementById('backupLocation')?.value || 'Downloads/SAM_Backups';

    if (!appData.settings) {
        appData.settings = {};
    }

    appData.settings.autoBackup = {
        enabled,
        frequency,
        time,
        maxFiles,
        location,
        lastBackup: appData.settings.autoBackup?.lastBackup || null,
        nextBackup: calculateNextBackupTime(frequency, time)
    };

    saveData();

    alert(`✅ تم حفظ إعدادات النسخ التلقائي!

🔄 الحالة: ${enabled ? 'مفعل' : 'معطل'}
📅 التكرار: ${frequency === 'daily' ? 'يومياً' : frequency === 'weekly' ? 'أسبوعياً' : 'شهرياً'}
⏰ الوقت: ${time}
📁 المجلد: ${location}
🗂️ عدد النسخ المحفوظة: ${maxFiles}

${enabled ? `النسخة التالية: ${formatDateTime(appData.settings.autoBackup.nextBackup)}` : ''}`);

    console.log('✅ تم حفظ إعدادات النسخ التلقائي:', appData.settings.autoBackup);
}

/**
 * حساب وقت النسخة الاحتياطية التالية
 */
function calculateNextBackupTime(frequency, time) {
    const now = new Date();
    const [hours, minutes] = time.split(':').map(Number);

    let nextBackup = new Date();
    nextBackup.setHours(hours, minutes, 0, 0);

    // إذا كان الوقت قد مضى اليوم، ابدأ من الغد
    if (nextBackup <= now) {
        nextBackup.setDate(nextBackup.getDate() + 1);
    }

    // تعديل حسب التكرار
    if (frequency === 'weekly') {
        // البحث عن يوم الأحد القادم
        const daysUntilSunday = (7 - nextBackup.getDay()) % 7;
        if (daysUntilSunday > 0) {
            nextBackup.setDate(nextBackup.getDate() + daysUntilSunday);
        }
    } else if (frequency === 'monthly') {
        // أول يوم في الشهر القادم
        nextBackup.setMonth(nextBackup.getMonth() + 1, 1);
    }

    return nextBackup.toISOString();
}

/**
 * تفعيل/إلغاء تفعيل النسخ التلقائي
 */
function toggleAutoBackup() {
    const enabled = document.getElementById('autoBackupEnabled')?.checked || false;

    if (enabled) {
        // تحذير المستخدم
        const confirmed = confirm(`هل تريد تفعيل النسخ الاحتياطي التلقائي؟

⚠️ ملاحظة: هذه الميزة تعمل فقط عندما يكون البرنامج مفتوحاً في المتصفح.

للحصول على نسخ احتياطية حقيقية تلقائية، يُنصح بـ:
• إعداد مهمة مجدولة في نظام التشغيل
• استخدام خدمة تخزين سحابية
• إعداد نسخ احتياطية على الخادم`);

        if (!confirmed) {
            document.getElementById('autoBackupEnabled').checked = false;
            return;
        }

        // بدء جدولة النسخ التلقائي
        scheduleAutoBackup();
    } else {
        // إيقاف النسخ التلقائي
        if (window.autoBackupInterval) {
            clearInterval(window.autoBackupInterval);
            window.autoBackupInterval = null;
        }
    }
}

/**
 * جدولة النسخ التلقائي
 */
function scheduleAutoBackup() {
    console.log('⏰ جدولة النسخ الاحتياطي التلقائي...');

    // إيقاف أي جدولة سابقة
    if (window.autoBackupInterval) {
        clearInterval(window.autoBackupInterval);
    }

    // فحص كل دقيقة
    window.autoBackupInterval = setInterval(() => {
        const settings = appData.settings?.autoBackup;
        if (!settings || !settings.enabled) {
            clearInterval(window.autoBackupInterval);
            return;
        }

        const now = new Date();
        const nextBackup = new Date(settings.nextBackup);

        if (now >= nextBackup) {
            console.log('🚀 تشغيل النسخ الاحتياطي التلقائي...');

            // تنفيذ النسخ الاحتياطي
            performAutoBackup();

            // حساب الوقت التالي
            settings.nextBackup = calculateNextBackupTime(settings.frequency, settings.time);
            settings.lastBackup = now.toISOString();
            saveData();
        }
    }, 60000); // فحص كل دقيقة

    console.log('✅ تم جدولة النسخ الاحتياطي التلقائي');
}

/**
 * تنفيذ النسخ الاحتياطي التلقائي
 */
function performAutoBackup() {
    console.log('🤖 تنفيذ النسخ الاحتياطي التلقائي...');

    try {
        // إعداد النسخة الاحتياطية التلقائية
        const backupData = {
            customers: appData.customers || [],
            suppliers: appData.suppliers || [],
            products: appData.products || [],
            warehouses: appData.warehouses || [],
            invoices: appData.invoices || [],
            payments: appData.payments || [],
            sales: appData.sales || [],
            purchases: appData.purchases || [],
            settings: appData.settings || {},
            backupInfo: {
                version: '1.0',
                createdAt: new Date().toISOString(),
                type: 'auto',
                format: 'json',
                isAutomatic: true,
                appVersion: 'SAM PRO v1.0'
            }
        };

        const fileContent = JSON.stringify(backupData, null, 2);
        const fileName = `SAM_Auto_Backup_${new Date().toISOString().split('T')[0]}_${new Date().toTimeString().split(' ')[0].replace(/:/g, '-')}.json`;

        // تحميل الملف
        downloadFile(fileContent, fileName, 'application/json');

        // تسجيل في السجل
        addToBackupHistory({
            date: new Date().toISOString(),
            type: 'auto',
            format: 'json',
            size: formatFileSize(fileContent.length),
            status: 'success',
            fileName: fileName,
            notes: 'نسخة احتياطية تلقائية'
        });

        console.log('✅ تم تنفيذ النسخ الاحتياطي التلقائي بنجاح');

        // إشعار المستخدم (اختياري)
        if (Notification.permission === 'granted') {
            new Notification('SAM PRO', {
                body: 'تم إنشاء نسخة احتياطية تلقائية بنجاح',
                icon: '/favicon.ico'
            });
        }

    } catch (error) {
        console.error('❌ خطأ في النسخ الاحتياطي التلقائي:', error);

        // تسجيل الخطأ
        addToBackupHistory({
            date: new Date().toISOString(),
            type: 'auto',
            format: 'json',
            size: '0 KB',
            status: 'error',
            fileName: 'فشل تلقائي',
            notes: `خطأ تلقائي: ${error.message}`
        });
    }
}

/**
 * إنشاء ورقة معلومات العميل
 */
function createCustomerInfoSheet(customer, fromDate, toDate, totalDebits, totalCredits, finalBalance) {
    const data = [
        ['كشف حساب العميل - معلومات تفصيلية'],
        [''],
        ['معلومات العميل'],
        ['اسم العميل', customer.name],
        ['العنوان', customer.address || 'غير محدد'],
        ['الهاتف', customer.phone || 'غير محدد'],
        ['البريد الإلكتروني', customer.email || 'غير محدد'],
        [''],
        ['فترة التقرير'],
        ['من تاريخ', fromDate || 'البداية'],
        ['إلى تاريخ', toDate || 'النهاية'],
        [''],
        ['ملخص الحساب'],
        ['إجمالي المدين', totalDebits],
        ['إجمالي الدائن', totalCredits],
        ['الرصيد النهائي', finalBalance],
        ['حالة الحساب', finalBalance > 0 ? 'مدين' : finalBalance < 0 ? 'دائن' : 'متوازن'],
        [''],
        ['معلومات التصدير'],
        ['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')],
        ['وقت التصدير', new Date().toLocaleTimeString('ar-SA')],
        ['المطور', 'MOHANNAD AHMAD - SAM PRO']
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 30 }];

    return worksheet;
}

/**
 * تصدير كشف حساب المورد إلى Excel
 */
function exportSupplierStatementToExcel() {
    console.log('📊 تصدير كشف حساب المورد إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const supplierId = document.getElementById('supplierStatementSupplier')?.value;
        const fromDate = document.getElementById('supplierStatementFromDate')?.value;
        const toDate = document.getElementById('supplierStatementToDate')?.value;

        if (!supplierId) {
            alert('يرجى اختيار المورد أولاً');
            return;
        }

        const supplier = appData.suppliers.find(s => s.id == supplierId);
        if (!supplier) {
            alert('المورد المحدد غير موجود');
            return;
        }

        // جمع الحركات المالية
        const transactions = [];

        // إضافة فواتير المشتريات
        const supplierInvoices = appData.invoices.filter(inv =>
            inv.supplierId == supplierId &&
            inv.status === 'confirmed' &&
            (!fromDate || inv.invoiceDate >= fromDate) &&
            (!toDate || inv.invoiceDate <= toDate)
        );

        supplierInvoices.forEach(invoice => {
            transactions.push({
                date: invoice.invoiceDate,
                description: `فاتورة مشتريات رقم ${invoice.invoiceNumber}`,
                reference: invoice.invoiceNumber,
                debit: 0,
                credit: invoice.totalAmount || 0,
                type: 'invoice'
            });
        });

        // إضافة سندات الدفع
        const supplierPayments = appData.payments.filter(payment =>
            payment.supplierId == supplierId &&
            payment.paymentType === 'payment' &&
            payment.status === 'confirmed' &&
            (!fromDate || payment.paymentDate >= fromDate) &&
            (!toDate || payment.paymentDate <= toDate)
        );

        supplierPayments.forEach(payment => {
            transactions.push({
                date: payment.paymentDate,
                description: `سند دفع رقم ${payment.paymentNumber} - ${getPaymentMethodText(payment.paymentMethod)}`,
                reference: payment.paymentNumber,
                debit: payment.amount || 0,
                credit: 0,
                type: 'payment'
            });
        });

        // ترتيب الحركات حسب التاريخ
        transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

        // حساب الأرصدة المتراكمة
        let balance = 0;
        transactions.forEach(transaction => {
            balance += transaction.credit - transaction.debit;
            transaction.balance = balance;
        });

        // إعداد البيانات للتصدير
        const headers = [
            'التاريخ',
            'الوصف',
            'المرجع',
            'مدين',
            'دائن',
            'الرصيد'
        ];

        const data = transactions.map(transaction => [
            transaction.date,
            transaction.description,
            transaction.reference,
            transaction.debit > 0 ? transaction.debit : '',
            transaction.credit > 0 ? transaction.credit : '',
            transaction.balance
        ]);

        // إضافة صف الإجماليات
        const totalDebits = transactions.reduce((sum, t) => sum + t.debit, 0);
        const totalCredits = transactions.reduce((sum, t) => sum + t.credit, 0);
        const finalBalance = totalCredits - totalDebits;

        data.push([
            '',
            'الإجماليات',
            '',
            totalDebits,
            totalCredits,
            finalBalance
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, `كشف حساب ${supplier.name}`);

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'كشف الحساب');

        // إضافة ورقة معلومات المورد
        const supplierInfoSheet = createSupplierInfoSheet(supplier, fromDate, toDate, totalDebits, totalCredits, finalBalance);
        XLSX.utils.book_append_sheet(workbook, supplierInfoSheet, 'معلومات المورد');

        // حفظ الملف
        const fileName = `كشف_حساب_${supplier.name}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير كشف حساب المورد إلى Excel بنجاح');
        showSuccessToast('تم تصدير كشف حساب المورد إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير كشف حساب المورد إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * إنشاء ورقة معلومات المورد
 */
function createSupplierInfoSheet(supplier, fromDate, toDate, totalDebits, totalCredits, finalBalance) {
    const data = [
        ['كشف حساب المورد - معلومات تفصيلية'],
        [''],
        ['معلومات المورد'],
        ['اسم المورد', supplier.name],
        ['العنوان', supplier.address || 'غير محدد'],
        ['الهاتف', supplier.phone || 'غير محدد'],
        ['البريد الإلكتروني', supplier.email || 'غير محدد'],
        [''],
        ['فترة التقرير'],
        ['من تاريخ', fromDate || 'البداية'],
        ['إلى تاريخ', toDate || 'النهاية'],
        [''],
        ['ملخص الحساب'],
        ['إجمالي المدين', totalDebits],
        ['إجمالي الدائن', totalCredits],
        ['الرصيد النهائي', finalBalance],
        ['حالة الحساب', finalBalance > 0 ? 'دائن' : finalBalance < 0 ? 'مدين' : 'متوازن'],
        [''],
        ['معلومات التصدير'],
        ['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')],
        ['وقت التصدير', new Date().toLocaleTimeString('ar-SA')],
        ['المطور', 'MOHANNAD AHMAD - SAM PRO']
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 30 }];

    return worksheet;
}

/**
 * إنشاء ورقة ملخص الدفعات
 */
function createPaymentsSummarySheet(payments, type, fromDate, toDate) {
    // حساب الإحصائيات
    const totalAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);
    const totalCount = payments.length;

    // تجميع حسب العملة
    const currencyGroups = {};
    payments.forEach(payment => {
        const currency = payment.currency || 'SYP';
        if (!currencyGroups[currency]) {
            currencyGroups[currency] = { count: 0, amount: 0 };
        }
        currencyGroups[currency].count++;
        currencyGroups[currency].amount += payment.amount;
    });

    // تجميع حسب طريقة الدفع
    const methodGroups = {};
    payments.forEach(payment => {
        const method = getPaymentMethodText(payment.paymentMethod);
        if (!methodGroups[method]) {
            methodGroups[method] = { count: 0, amount: 0 };
        }
        methodGroups[method].count++;
        methodGroups[method].amount += payment.amount;
    });

    const data = [
        [`ملخص تقرير دفعات ${type}`],
        [''],
        ['معلومات عامة'],
        ['فترة التقرير', `من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}`],
        ['إجمالي عدد السندات', totalCount],
        ['إجمالي المبلغ', totalAmount],
        [''],
        ['التوزيع حسب العملة'],
        ['العملة', 'عدد السندات', 'المبلغ']
    ];

    // إضافة بيانات العملات
    Object.keys(currencyGroups).forEach(currency => {
        const group = currencyGroups[currency];
        data.push([
            getCurrencyName(currency),
            group.count,
            group.amount
        ]);
    });

    data.push(['']);
    data.push(['التوزيع حسب طريقة الدفع']);
    data.push(['طريقة الدفع', 'عدد السندات', 'المبلغ']);

    // إضافة بيانات طرق الدفع
    Object.keys(methodGroups).forEach(method => {
        const group = methodGroups[method];
        data.push([
            method,
            group.count,
            group.amount
        ]);
    });

    data.push(['']);
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }, { wch: 20 }];

    return worksheet;
}

/**
 * تصدير حركة مخزن معين إلى Excel
 */
function exportWarehouseMovementsToExcel(warehouseId) {
    console.log(`📊 تصدير حركة المخزن ID: ${warehouseId} إلى Excel...`);

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        const warehouse = appData.warehouses.find(w => w.id === warehouseId);
        if (!warehouse) {
            alert('المخزن غير موجود');
            return;
        }

        const warehouseProducts = appData.products.filter(p => p.warehouseId === warehouseId);
        const warehouseMovements = (appData.inventoryMovements || []).filter(m => m.warehouseId === warehouseId);

        // إنشاء كتاب العمل
        const workbook = XLSX.utils.book_new();

        // ورقة معلومات المخزن
        const warehouseInfo = [
            ['معلومات المخزن'],
            ['اسم المخزن', warehouse.name],
            ['الموقع', warehouse.location || '-'],
            ['المدير', warehouse.manager || '-'],
            ['الهاتف', warehouse.phone || '-'],
            ['عدد الأصناف', warehouseProducts.length],
            ['تاريخ التقرير', new Date().toLocaleDateString('ar-SY')]
        ];

        const warehouseSheet = XLSX.utils.aoa_to_sheet(warehouseInfo);
        XLSX.utils.book_append_sheet(workbook, warehouseSheet, 'معلومات المخزن');

        // ورقة إحصائيات المخزن
        const totalIn = warehouseMovements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
        const totalOut = warehouseMovements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
        const totalTransfers = warehouseMovements.filter(m => m.movementType === 'transfer').length;
        const totalAdjustments = warehouseMovements.filter(m => m.movementType === 'adjustment').length;

        const statsData = [
            ['إحصائيات المخزن'],
            ['إجمالي الإدخالات', totalIn],
            ['إجمالي الإخراجات', totalOut],
            ['الصافي', totalIn - totalOut],
            ['عدد التحويلات', totalTransfers],
            ['عدد التسويات', totalAdjustments],
            ['إجمالي الحركات', warehouseMovements.length]
        ];

        const statsSheet = XLSX.utils.aoa_to_sheet(statsData);
        XLSX.utils.book_append_sheet(workbook, statsSheet, 'إحصائيات المخزن');

        // ورقة تفاصيل الأصناف
        if (warehouseProducts.length > 0) {
            const productsData = [
                ['كود الصنف', 'اسم الصنف', 'الوحدة', 'الكمية الحالية', 'الحد الأدنى', 'إجمالي الإدخال', 'إجمالي الإخراج', 'الصافي']
            ];

            warehouseProducts.forEach(product => {
                const productMovements = warehouseMovements.filter(m => m.productId === product.id);
                const productIn = productMovements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
                const productOut = productMovements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);

                productsData.push([
                    product.code,
                    product.name,
                    product.unit || 'قطعة',
                    product.quantity,
                    product.minQuantity || 0,
                    productIn,
                    productOut,
                    productIn - productOut
                ]);
            });

            const productsSheet = XLSX.utils.aoa_to_sheet(productsData);
            XLSX.utils.book_append_sheet(workbook, productsSheet, 'تفاصيل الأصناف');
        }

        // ورقة جميع الحركات
        if (warehouseMovements.length > 0) {
            const movementsData = [
                ['التاريخ', 'نوع الحركة', 'الصنف', 'الكمية', 'سعر الوحدة', 'المجموع', 'المرجع', 'ملاحظات']
            ];

            warehouseMovements.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(movement => {
                const product = appData.products.find(p => p.id === movement.productId);
                const typeText = {
                    'in': 'إدخال',
                    'out': 'إخراج',
                    'transfer': 'تحويل',
                    'adjustment': 'تسوية'
                };

                movementsData.push([
                    movement.date,
                    typeText[movement.movementType] || movement.movementType,
                    product ? product.name : 'منتج محذوف',
                    movement.quantity,
                    movement.unitPrice || 0,
                    movement.totalAmount || 0,
                    movement.reference || '-',
                    movement.notes || '-'
                ]);
            });

            const movementsSheet = XLSX.utils.aoa_to_sheet(movementsData);
            XLSX.utils.book_append_sheet(workbook, movementsSheet, 'جميع الحركات');
        }

        // حفظ الملف
        const fileName = `تقرير_حركة_المخزن_${warehouse.name}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log(`✅ تم تصدير تقرير حركة المخزن: ${fileName}`);
        alert(`تم تصدير التقرير بنجاح: ${fileName}`);

    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير حركة المخزن:', error);
        alert('حدث خطأ أثناء تصدير التقرير');
    }
}

/**
 * طباعة تقرير حركة مخزن معين
 */
function printWarehouseMovements(warehouseId) {
    console.log(`🖨️ طباعة تقرير حركة المخزن ID: ${warehouseId}`);

    const warehouse = appData.warehouses.find(w => w.id === warehouseId);
    if (!warehouse) {
        alert('المخزن غير موجود');
        return;
    }

    // إنشاء نافذة طباعة جديدة
    const printWindow = window.open('', '_blank');
    const warehouseProducts = appData.products.filter(p => p.warehouseId === warehouseId);
    const warehouseMovements = (appData.inventoryMovements || []).filter(m => m.warehouseId === warehouseId);

    const printContent = `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>تقرير حركة المخزن - ${warehouse.name}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .info-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                .info-table th, .info-table td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                .info-table th { background-color: #f5f5f5; }
                .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                .stat-box { text-align: center; padding: 15px; border: 1px solid #ddd; }
                .movements-table { width: 100%; border-collapse: collapse; font-size: 12px; }
                .movements-table th, .movements-table td { border: 1px solid #ddd; padding: 5px; text-align: center; }
                .movements-table th { background-color: #f5f5f5; }
                @media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تقرير حركة المخزن المفصل</h1>
                <h2>${warehouse.name}</h2>
                <p>تاريخ التقرير: ${new Date().toLocaleDateString('ar-SY')}</p>
            </div>

            <table class="info-table">
                <tr><th>اسم المخزن</th><td>${warehouse.name}</td></tr>
                <tr><th>الموقع</th><td>${warehouse.location || '-'}</td></tr>
                <tr><th>المدير</th><td>${warehouse.manager || '-'}</td></tr>
                <tr><th>الهاتف</th><td>${warehouse.phone || '-'}</td></tr>
                <tr><th>عدد الأصناف</th><td>${warehouseProducts.length}</td></tr>
            </table>

            <div class="stats">
                <div class="stat-box">
                    <h3>إجمالي الإدخالات</h3>
                    <p>${warehouseMovements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0)}</p>
                </div>
                <div class="stat-box">
                    <h3>إجمالي الإخراجات</h3>
                    <p>${warehouseMovements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0)}</p>
                </div>
                <div class="stat-box">
                    <h3>عدد التحويلات</h3>
                    <p>${warehouseMovements.filter(m => m.movementType === 'transfer').length}</p>
                </div>
                <div class="stat-box">
                    <h3>عدد التسويات</h3>
                    <p>${warehouseMovements.filter(m => m.movementType === 'adjustment').length}</p>
                </div>
            </div>

            ${warehouseMovements.length > 0 ? `
                <h3>تفاصيل الحركات</h3>
                <table class="movements-table">
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>نوع الحركة</th>
                            <th>الصنف</th>
                            <th>الكمية</th>
                            <th>سعر الوحدة</th>
                            <th>المجموع</th>
                            <th>المرجع</th>
                            <th>ملاحظات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${warehouseMovements.sort((a, b) => new Date(b.date) - new Date(a.date)).map(movement => {
                            const product = appData.products.find(p => p.id === movement.productId);
                            const typeText = {
                                'in': 'إدخال',
                                'out': 'إخراج',
                                'transfer': 'تحويل',
                                'adjustment': 'تسوية'
                            };
                            return `
                                <tr>
                                    <td>${movement.date}</td>
                                    <td>${typeText[movement.movementType] || movement.movementType}</td>
                                    <td>${product ? product.name : 'منتج محذوف'}</td>
                                    <td>${movement.quantity}</td>
                                    <td>${movement.unitPrice || 0}</td>
                                    <td>${movement.totalAmount || 0}</td>
                                    <td>${movement.reference || '-'}</td>
                                    <td>${movement.notes || '-'}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            ` : '<p>لا توجد حركات في هذا المخزن</p>'}
        </body>
        </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
}

/**
 * تصدير تفاصيل حركة المخزون إلى Excel
 */
function exportInventoryDetailsToExcel() {
    console.log('📊 تصدير تفاصيل حركة المخزون إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
        const productFilter = document.getElementById('detailsProductFilter')?.value || '';
        const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
        const fromDate = document.getElementById('detailsFromDate')?.value || '';
        const toDate = document.getElementById('detailsToDate')?.value || '';

        // فلترة حركات المخزون
        let movements = appData.inventoryMovements || [];

        if (typeFilter) {
            movements = movements.filter(movement => movement.movementType === typeFilter);
        }

        if (productFilter) {
            movements = movements.filter(movement => movement.productId == productFilter);
        }

        if (warehouseFilter) {
            movements = movements.filter(movement => movement.warehouseId == warehouseFilter);
        }

        if (fromDate) {
            movements = movements.filter(movement => movement.date >= fromDate);
        }

        if (toDate) {
            movements = movements.filter(movement => movement.date <= toDate);
        }

        if (movements.length === 0) {
            alert('لا توجد حركات مخزون في الفترة المحددة');
            return;
        }

        // ترتيب الحركات حسب التاريخ
        movements.sort((a, b) => new Date(b.date) - new Date(a.date));

        // إعداد البيانات للتصدير
        const headers = [
            'التاريخ',
            'نوع الحركة',
            'الصنف',
            'كود الصنف',
            'المخزن',
            'الكمية',
            'الوحدة',
            'سعر الوحدة',
            'المجموع',
            'المرجع/السبب',
            'المستخدم',
            'ملاحظات'
        ];

        const data = movements.map(movement => {
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

            const typeText = {
                'in': 'إدخال',
                'out': 'إخراج',
                'transfer': 'تحويل',
                'adjustment': 'تسوية',
                'sale': 'مبيعات',
                'purchase': 'مشتريات',
                'return': 'مرتجعات'
            };

            const total = movement.quantity * (movement.unitPrice || 0);
            const user = movement.userId ? 'مستخدم ' + movement.userId : 'النظام';

            return [
                movement.date,
                typeText[movement.movementType] || movement.movementType,
                product ? product.name : 'منتج محذوف',
                product ? product.code : '-',
                warehouse ? warehouse.name : 'مخزن محذوف',
                movement.quantity,
                product ? product.unit : '-',
                movement.unitPrice || 0,
                total,
                movement.reference || '-',
                user,
                movement.notes || '-'
            ];
        });

        // حساب الإجماليات
        const totalQuantityIn = movements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
        const totalQuantityOut = movements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
        const totalValue = movements.reduce((sum, m) => sum + (m.quantity * (m.unitPrice || 0)), 0);

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            '',
            '',
            `إدخال: ${totalQuantityIn} | إخراج: ${totalQuantityOut}`,
            '',
            '',
            totalValue,
            '',
            '',
            `عدد الحركات: ${movements.length}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'تفاصيل حركة المخزون');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'تفاصيل الحركات');

        // إضافة ورقة الملخص
        const summarySheet = createInventoryDetailsSummarySheet(movements, fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // حفظ الملف
        const fileName = `تفاصيل_حركة_المخزون_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log(`✅ تم تصدير تفاصيل حركة المخزون: ${fileName}`);
        alert(`تم تصدير التقرير بنجاح: ${fileName}`);

    } catch (error) {
        console.error('❌ خطأ في تصدير تفاصيل حركة المخزون:', error);
        alert('حدث خطأ أثناء تصدير التقرير: ' + error.message);
    }
}

/**
 * إنشاء ورقة ملخص تفاصيل المخزون
 */
function createInventoryDetailsSummarySheet(movements, fromDate, toDate) {
    // حساب الإحصائيات
    const totalMovements = movements.length;
    const totalIn = movements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
    const totalOut = movements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
    const totalTransfer = movements.filter(m => m.movementType === 'transfer').length;
    const totalAdjustment = movements.filter(m => m.movementType === 'adjustment').length;
    const totalValue = movements.reduce((sum, m) => sum + (m.quantity * (m.unitPrice || 0)), 0);

    // تجميع حسب نوع الحركة
    const typeGroups = {};
    movements.forEach(movement => {
        const typeText = {
            'in': 'إدخال',
            'out': 'إخراج',
            'transfer': 'تحويل',
            'adjustment': 'تسوية',
            'sale': 'مبيعات',
            'purchase': 'مشتريات',
            'return': 'مرتجعات'
        };

        const type = typeText[movement.movementType] || movement.movementType;
        if (!typeGroups[type]) {
            typeGroups[type] = { count: 0, quantity: 0, value: 0 };
        }
        typeGroups[type].count++;
        typeGroups[type].quantity += movement.quantity;
        typeGroups[type].value += movement.quantity * (movement.unitPrice || 0);
    });

    const data = [
        ['ملخص تفاصيل حركة المخزون'],
        [''],
        ['معلومات عامة'],
        ['فترة التقرير', `من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}`],
        ['إجمالي عدد الحركات', totalMovements],
        ['إجمالي الكمية الداخلة', totalIn],
        ['إجمالي الكمية الخارجة', totalOut],
        ['صافي الحركة', totalIn - totalOut],
        ['عدد التحويلات', totalTransfer],
        ['عدد التسويات', totalAdjustment],
        ['إجمالي القيمة', totalValue],
        [''],
        ['التوزيع حسب نوع الحركة'],
        ['نوع الحركة', 'عدد الحركات', 'الكمية', 'القيمة']
    ];

    // إضافة بيانات أنواع الحركات
    Object.keys(typeGroups).forEach(type => {
        const group = typeGroups[type];
        data.push([
            type,
            group.count,
            group.quantity,
            group.value
        ]);
    });

    data.push(['']);
    data.push(['تاريخ التقرير', new Date().toLocaleDateString('ar-SY')]);
    data.push(['وقت التقرير', new Date().toLocaleTimeString('ar-SY')]);

    return XLSX.utils.aoa_to_sheet(data);
}

/**
 * طباعة تفاصيل حركة المخزون
 */
function printInventoryDetails() {
    console.log('🖨️ طباعة تفاصيل حركة المخزون');

    // إنشاء نافذة طباعة جديدة
    const printWindow = window.open('', '_blank');

    // الحصول على البيانات المفلترة
    const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
    const productFilter = document.getElementById('detailsProductFilter')?.value || '';
    const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
    const fromDate = document.getElementById('detailsFromDate')?.value || '';
    const toDate = document.getElementById('detailsToDate')?.value || '';

    let movements = appData.inventoryMovements || [];

    // تطبيق الفلاتر
    if (typeFilter) movements = movements.filter(m => m.movementType === typeFilter);
    if (productFilter) movements = movements.filter(m => m.productId == productFilter);
    if (warehouseFilter) movements = movements.filter(m => m.warehouseId == warehouseFilter);
    if (fromDate) movements = movements.filter(m => m.date >= fromDate);
    if (toDate) movements = movements.filter(m => m.date <= toDate);

    movements.sort((a, b) => new Date(b.date) - new Date(a.date));

    const printContent = `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>تفاصيل حركة المخزون</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .info-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                .info-table th, .info-table td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                .info-table th { background-color: #f5f5f5; }
                .movements-table { width: 100%; border-collapse: collapse; font-size: 11px; }
                .movements-table th, .movements-table td { border: 1px solid #ddd; padding: 4px; text-align: center; }
                .movements-table th { background-color: #f5f5f5; }
                .badge { padding: 2px 6px; border-radius: 3px; color: white; font-size: 10px; }
                .bg-success { background-color: #28a745; }
                .bg-danger { background-color: #dc3545; }
                .bg-info { background-color: #17a2b8; }
                .bg-warning { background-color: #ffc107; color: black; }
                @media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تفاصيل حركة المخزون</h1>
                <p>تاريخ التقرير: ${new Date().toLocaleDateString('ar-SY')}</p>
                ${fromDate || toDate ? `<p>الفترة: من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}</p>` : ''}
            </div>

            ${movements.length > 0 ? `
                <table class="movements-table">
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>نوع الحركة</th>
                            <th>الصنف</th>
                            <th>المخزن</th>
                            <th>الكمية</th>
                            <th>سعر الوحدة</th>
                            <th>المجموع</th>
                            <th>المرجع</th>
                            <th>ملاحظات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${movements.map(movement => {
                            const product = appData.products.find(p => p.id === movement.productId);
                            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
                            const typeText = {
                                'in': 'إدخال',
                                'out': 'إخراج',
                                'transfer': 'تحويل',
                                'adjustment': 'تسوية'
                            };
                            return `
                                <tr>
                                    <td>${movement.date}</td>
                                    <td><span class="badge bg-${movement.movementType === 'in' ? 'success' : movement.movementType === 'out' ? 'danger' : movement.movementType === 'transfer' ? 'info' : 'warning'}">${typeText[movement.movementType] || movement.movementType}</span></td>
                                    <td>${product ? product.name : 'منتج محذوف'}</td>
                                    <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                                    <td>${movement.quantity}</td>
                                    <td>${movement.unitPrice || 0}</td>
                                    <td>${movement.totalAmount || 0}</td>
                                    <td>${movement.reference || '-'}</td>
                                    <td>${movement.notes || '-'}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            ` : '<p>لا توجد حركات مخزون في الفترة المحددة</p>'}
        </body>
        </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
}

/**
 * تصدير تفاصيل حركة المخزون إلى Excel
 */
function exportInventoryDetailsToExcel() {
    console.log('📊 تصدير تفاصيل حركة المخزون إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
        const productFilter = document.getElementById('detailsProductFilter')?.value || '';
        const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
        const fromDate = document.getElementById('detailsFromDate')?.value || '';
        const toDate = document.getElementById('detailsToDate')?.value || '';

        // فلترة حركات المخزون
        let movements = appData.inventoryMovements || [];

        if (typeFilter) {
            movements = movements.filter(movement => movement.movementType === typeFilter);
        }

        if (productFilter) {
            movements = movements.filter(movement => movement.productId == productFilter);
        }

        if (warehouseFilter) {
            movements = movements.filter(movement => movement.warehouseId == warehouseFilter);
        }

        if (fromDate) {
            movements = movements.filter(movement => movement.date >= fromDate);
        }

        if (toDate) {
            movements = movements.filter(movement => movement.date <= toDate);
        }

        if (movements.length === 0) {
            alert('لا توجد حركات مخزون في الفترة المحددة');
            return;
        }

        // ترتيب الحركات حسب التاريخ
        movements.sort((a, b) => new Date(b.date) - new Date(a.date));

        // إعداد البيانات للتصدير
        const headers = [
            'التاريخ',
            'نوع الحركة',
            'الصنف',
            'كود الصنف',
            'المخزن',
            'الكمية',
            'الوحدة',
            'سعر الوحدة',
            'المجموع',
            'المرجع/السبب',
            'المستخدم',
            'ملاحظات'
        ];

        const data = movements.map(movement => {
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);

            const typeText = {
                'in': 'إدخال',
                'out': 'إخراج',
                'transfer': 'تحويل',
                'adjustment': 'تسوية',
                'sale': 'مبيعات',
                'purchase': 'مشتريات',
                'return': 'مرتجعات'
            };

            const total = movement.quantity * (movement.unitPrice || 0);
            const user = movement.userId ? 'مستخدم ' + movement.userId : 'النظام';

            return [
                movement.date,
                typeText[movement.movementType] || movement.movementType,
                product ? product.name : 'منتج محذوف',
                product ? product.code : '-',
                warehouse ? warehouse.name : 'مخزن محذوف',
                movement.quantity,
                product ? product.unit : '-',
                movement.unitPrice || 0,
                total,
                movement.reference || '-',
                user,
                movement.notes || '-'
            ];
        });

        // حساب الإجماليات
        const totalQuantityIn = movements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
        const totalQuantityOut = movements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
        const totalValue = movements.reduce((sum, m) => sum + (m.quantity * (m.unitPrice || 0)), 0);

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            '',
            '',
            `إدخال: ${totalQuantityIn} | إخراج: ${totalQuantityOut}`,
            '',
            '',
            totalValue,
            '',
            '',
            `عدد الحركات: ${movements.length}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'تفاصيل حركة المخزون');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'تفاصيل الحركات');

        // حفظ الملف
        const fileName = `تفاصيل_حركة_المخزون_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log(`✅ تم تصدير تفاصيل حركة المخزون: ${fileName}`);
        alert(`تم تصدير التقرير بنجاح: ${fileName}`);

    } catch (error) {
        console.error('❌ خطأ في تصدير تفاصيل حركة المخزون:', error);
        alert('حدث خطأ أثناء تصدير التقرير: ' + error.message);
    }
}

/**
 * عرض تفاصيل حركة مخزون محددة
 */
function viewMovementDetails(movementId) {
    console.log(`📋 عرض تفاصيل الحركة ID: ${movementId}`);

    const movement = appData.inventoryMovements.find(m => m.id === movementId);
    if (!movement) {
        alert('الحركة غير موجودة');
        return;
    }

    const product = appData.products.find(p => p.id === movement.productId);
    const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
    const toWarehouse = movement.toWarehouseId ?
        appData.warehouses.find(w => w.id === movement.toWarehouseId) : null;

    const typeInfo = getMovementTypeInfo(movement.movementType);
    const totalAmount = (movement.quantity || 0) * (movement.unitPrice || 0);

    // إنشاء نافذة منبثقة
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'movementDetailsModal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="${typeInfo.icon} me-2"></i>
                        تفاصيل حركة المخزون
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h6 class="mb-0">معلومات الحركة</h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-borderless">
                                        <tr>
                                            <td><strong>رقم الحركة:</strong></td>
                                            <td>${movement.id}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>نوع الحركة:</strong></td>
                                            <td>
                                                <span class="badge bg-${typeInfo.color}">
                                                    <i class="${typeInfo.icon} me-1"></i>
                                                    ${typeInfo.text}
                                                </span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><strong>التاريخ:</strong></td>
                                            <td>${movement.date}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>الوقت:</strong></td>
                                            <td>${movement.createdAt ? new Date(movement.createdAt).toLocaleString('ar-SY') : '-'}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>المستخدم:</strong></td>
                                            <td>${movement.userId || 'النظام'}</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h6 class="mb-0">معلومات المنتج والمخزن</h6>
                                </div>
                                <div class="card-body">
                                    <table class="table table-borderless">
                                        <tr>
                                            <td><strong>المنتج:</strong></td>
                                            <td>
                                                ${product ? product.name : 'منتج محذوف'}
                                                ${product ? `<br><small class="text-muted">كود: ${product.code}</small>` : ''}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><strong>المخزن:</strong></td>
                                            <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                                        </tr>
                                        ${toWarehouse ? `
                                        <tr>
                                            <td><strong>إلى المخزن:</strong></td>
                                            <td>${toWarehouse.name}</td>
                                        </tr>
                                        ` : ''}
                                        <tr>
                                            <td><strong>الكمية:</strong></td>
                                            <td>
                                                <span class="badge bg-${movement.quantity >= 0 ? 'success' : 'danger'} fs-6">
                                                    ${Math.abs(movement.quantity)} ${product ? product.unit : 'وحدة'}
                                                </span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><strong>سعر الوحدة:</strong></td>
                                            <td>${formatCurrency(movement.unitPrice || 0)}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>إجمالي القيمة:</strong></td>
                                            <td><strong>${formatCurrency(totalAmount)}</strong></td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    ${movement.reference || movement.referenceNumber || movement.notes ? `
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">معلومات إضافية</h6>
                        </div>
                        <div class="card-body">
                            ${movement.reference ? `
                            <div class="mb-2">
                                <strong>المرجع:</strong> ${movement.reference}
                            </div>
                            ` : ''}
                            ${movement.referenceNumber ? `
                            <div class="mb-2">
                                <strong>رقم المرجع:</strong> <span class="text-primary">#${movement.referenceNumber}</span>
                            </div>
                            ` : ''}
                            ${movement.notes ? `
                            <div class="mb-2">
                                <strong>الملاحظات:</strong> ${movement.notes}
                            </div>
                            ` : ''}
                        </div>
                    </div>
                    ` : ''}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" onclick="editMovement(${movement.id})">
                        <i class="fas fa-edit me-2"></i>
                        تعديل
                    </button>
                    <button type="button" class="btn btn-outline-danger" onclick="deleteMovement(${movement.id})">
                        <i class="fas fa-trash me-2"></i>
                        حذف
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // إزالة النافذة عند الإغلاق
    modal.addEventListener('hidden.bs.modal', function() {
        document.body.removeChild(modal);
    });
}

/**
 * طباعة تفاصيل حركة المخزون
 */
function printInventoryDetails() {
    console.log('🖨️ طباعة تفاصيل حركة المخزون');

    // إنشاء نافذة طباعة جديدة
    const printWindow = window.open('', '_blank');

    // الحصول على البيانات المفلترة
    const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
    const productFilter = document.getElementById('detailsProductFilter')?.value || '';
    const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
    const fromDate = document.getElementById('detailsFromDate')?.value || '';
    const toDate = document.getElementById('detailsToDate')?.value || '';

    let movements = appData.inventoryMovements || [];

    // تطبيق الفلاتر
    if (typeFilter) movements = movements.filter(m => m.movementType === typeFilter);
    if (productFilter) movements = movements.filter(m => m.productId == productFilter);
    if (warehouseFilter) movements = movements.filter(m => m.warehouseId == warehouseFilter);
    if (fromDate) movements = movements.filter(m => m.date >= fromDate);
    if (toDate) movements = movements.filter(m => m.date <= toDate);

    movements.sort((a, b) => new Date(b.date) - new Date(a.date));

    const printContent = `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>تفاصيل حركة المخزون</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .movements-table { width: 100%; border-collapse: collapse; font-size: 11px; }
                .movements-table th, .movements-table td { border: 1px solid #ddd; padding: 4px; text-align: center; }
                .movements-table th { background-color: #f5f5f5; }
                @media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تفاصيل حركة المخزون</h1>
                <p>تاريخ التقرير: ${new Date().toLocaleDateString('ar-SY')}</p>
                ${fromDate || toDate ? `<p>الفترة: من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}</p>` : ''}
            </div>

            ${movements.length > 0 ? `
                <table class="movements-table">
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>نوع الحركة</th>
                            <th>الصنف</th>
                            <th>المخزن</th>
                            <th>الكمية</th>
                            <th>سعر الوحدة</th>
                            <th>المجموع</th>
                            <th>المرجع</th>
                            <th>ملاحظات</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${movements.map(movement => {
                            const product = appData.products.find(p => p.id === movement.productId);
                            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
                            const typeText = {
                                'in': 'إدخال',
                                'out': 'إخراج',
                                'transfer': 'تحويل',
                                'adjustment': 'تسوية'
                            };
                            return `
                                <tr>
                                    <td>${movement.date}</td>
                                    <td>${typeText[movement.movementType] || movement.movementType}</td>
                                    <td>${product ? product.name : 'منتج محذوف'}</td>
                                    <td>${warehouse ? warehouse.name : 'مخزن محذوف'}</td>
                                    <td>${movement.quantity}</td>
                                    <td>${movement.unitPrice || 0}</td>
                                    <td>${movement.totalAmount || 0}</td>
                                    <td>${movement.reference || '-'}</td>
                                    <td>${movement.notes || '-'}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            ` : '<p>لا توجد حركات مخزون في الفترة المحددة</p>'}
        </body>
        </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
}

/**
 * تصدير حركة المخزون إلى Excel
 */
function exportInventoryToExcel() {
    console.log('📊 تصدير حركة المخزون إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const typeFilter = document.getElementById('movementTypeFilter')?.value || '';
        const productFilter = document.getElementById('productFilter')?.value || '';
        const warehouseFilter = document.getElementById('warehouseFilter')?.value || '';
        const fromDate = document.getElementById('fromDate')?.value || '';
        const toDate = document.getElementById('toDate')?.value || '';

        // فلترة حركات المخزون
        let movements = appData.inventoryMovements || [];

        if (typeFilter) {
            movements = movements.filter(movement => movement.movementType === typeFilter);
        }

        if (productFilter) {
            movements = movements.filter(movement => movement.productId == productFilter);
        }

        if (warehouseFilter) {
            movements = movements.filter(movement => movement.warehouseId == warehouseFilter);
        }

        if (fromDate) {
            movements = movements.filter(movement => movement.date >= fromDate);
        }

        if (toDate) {
            movements = movements.filter(movement => movement.date <= toDate);
        }

        if (movements.length === 0) {
            alert('لا توجد حركات مخزون في الفترة المحددة');
            return;
        }

        // ترتيب الحركات حسب التاريخ
        movements.sort((a, b) => new Date(b.date) - new Date(a.date));

        // إعداد البيانات للتصدير
        const headers = [
            'التاريخ',
            'نوع الحركة',
            'الصنف',
            'المخزن',
            'الكمية',
            'الوحدة',
            'سعر الوحدة',
            'المجموع',
            'المرجع',
            'ملاحظات'
        ];

        const data = movements.map(movement => {
            const product = appData.products.find(p => p.id === movement.productId);
            const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
            const movementTypeText = getMovementTypeText(movement.movementType);
            const total = movement.quantity * (movement.unitPrice || 0);

            return [
                movement.date,
                movementTypeText,
                product ? product.name : 'غير محدد',
                warehouse ? warehouse.name : 'غير محدد',
                movement.quantity,
                product ? product.unit : '',
                movement.unitPrice || 0,
                total,
                movement.reference || '',
                movement.notes || ''
            ];
        });

        // حساب الإجماليات
        const totalQuantityIn = movements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
        const totalQuantityOut = movements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
        const totalValue = movements.reduce((sum, m) => sum + (m.quantity * (m.unitPrice || 0)), 0);

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            '',
            `إدخال: ${totalQuantityIn} | إخراج: ${totalQuantityOut}`,
            '',
            '',
            totalValue,
            '',
            `عدد الحركات: ${movements.length}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'تقرير حركة المخزون');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'حركة المخزون');

        // إضافة ورقة الملخص
        const summarySheet = createInventorySummarySheet(movements, fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // إضافة ورقة أرصدة المخزون
        const stockSheet = createStockBalanceSheet();
        XLSX.utils.book_append_sheet(workbook, stockSheet, 'أرصدة المخزون');

        // حفظ الملف
        const fileName = `تقرير_حركة_المخزون_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير تقرير حركة المخزون إلى Excel بنجاح');
        showSuccessToast('تم تصدير تقرير حركة المخزون إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير تقرير حركة المخزون إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * الحصول على نص نوع الحركة
 */
function getMovementTypeText(type) {
    const types = {
        'in': 'إدخال',
        'out': 'إخراج',
        'transfer': 'تحويل',
        'adjustment': 'تسوية',
        'sale': 'مبيعات',
        'purchase': 'مشتريات',
        'return_sale': 'مرتجع مبيعات',
        'return_purchase': 'مرتجع مشتريات',
        'transfer_in': 'تحويل داخل',
        'transfer_out': 'تحويل خارج',
        'damage': 'تالف'
    };
    return types[type] || type;
}

/**
 * الحصول على معلومات نوع الحركة (نص، لون، أيقونة)
 */
function getMovementTypeInfo(type) {
    const typeInfo = {
        'in': { text: 'إدخال', color: 'success', icon: 'fas fa-arrow-up' },
        'out': { text: 'إخراج', color: 'danger', icon: 'fas fa-arrow-down' },
        'transfer': { text: 'تحويل', color: 'info', icon: 'fas fa-exchange-alt' },
        'adjustment': { text: 'تسوية', color: 'warning', icon: 'fas fa-balance-scale' },
        'sale': { text: 'مبيعات', color: 'primary', icon: 'fas fa-shopping-cart' },
        'purchase': { text: 'مشتريات', color: 'secondary', icon: 'fas fa-shopping-bag' },
        'return_sale': { text: 'مرتجع مبيعات', color: 'info', icon: 'fas fa-undo' },
        'return_purchase': { text: 'مرتجع مشتريات', color: 'dark', icon: 'fas fa-undo-alt' },
        'transfer_in': { text: 'تحويل داخل', color: 'success', icon: 'fas fa-arrow-circle-up' },
        'transfer_out': { text: 'تحويل خارج', color: 'danger', icon: 'fas fa-arrow-circle-down' },
        'damage': { text: 'تالف', color: 'danger', icon: 'fas fa-exclamation-triangle' }
    };

    return typeInfo[type] || { text: type, color: 'secondary', icon: 'fas fa-question' };
}

/**
 * الحصول على حركات المخزون المفلترة
 */
function getFilteredInventoryMovements() {
    try {
        // الحصول على الفلاتر المطبقة
        const typeFilter = document.getElementById('detailsMovementTypeFilter')?.value || '';
        const productFilter = document.getElementById('detailsProductFilter')?.value || '';
        const warehouseFilter = document.getElementById('detailsWarehouseFilter')?.value || '';
        const fromDate = document.getElementById('detailsFromDate')?.value || '';
        const toDate = document.getElementById('detailsToDate')?.value || '';

        // فلترة حركات المخزون
        let movements = appData.inventoryMovements || [];

        if (typeFilter) {
            movements = movements.filter(movement => movement.movementType === typeFilter);
        }

        if (productFilter) {
            movements = movements.filter(movement => movement.productId == productFilter);
        }

        if (warehouseFilter) {
            movements = movements.filter(movement => movement.warehouseId == warehouseFilter);
        }

        if (fromDate) {
            movements = movements.filter(movement => movement.date >= fromDate);
        }

        if (toDate) {
            movements = movements.filter(movement => movement.date <= toDate);
        }

        return movements;

    } catch (error) {
        console.error('❌ خطأ في فلترة حركات المخزون:', error);
        return [];
    }
}

/**
 * إنشاء ورقة ملخص المخزون
 */
function createInventorySummarySheet(movements, fromDate, toDate) {
    // حساب الإحصائيات
    const totalMovements = movements.length;
    const totalIn = movements.filter(m => m.movementType === 'in').reduce((sum, m) => sum + m.quantity, 0);
    const totalOut = movements.filter(m => m.movementType === 'out').reduce((sum, m) => sum + m.quantity, 0);
    const totalValue = movements.reduce((sum, m) => sum + (m.quantity * (m.unitPrice || 0)), 0);

    // تجميع حسب نوع الحركة
    const typeGroups = {};
    movements.forEach(movement => {
        const type = getMovementTypeText(movement.movementType);
        if (!typeGroups[type]) {
            typeGroups[type] = { count: 0, quantity: 0, value: 0 };
        }
        typeGroups[type].count++;
        typeGroups[type].quantity += movement.quantity;
        typeGroups[type].value += movement.quantity * (movement.unitPrice || 0);
    });

    // تجميع حسب المخزن
    const warehouseGroups = {};
    movements.forEach(movement => {
        const warehouse = appData.warehouses.find(w => w.id === movement.warehouseId);
        const warehouseName = warehouse ? warehouse.name : 'غير محدد';
        if (!warehouseGroups[warehouseName]) {
            warehouseGroups[warehouseName] = { count: 0, quantity: 0, value: 0 };
        }
        warehouseGroups[warehouseName].count++;
        warehouseGroups[warehouseName].quantity += movement.quantity;
        warehouseGroups[warehouseName].value += movement.quantity * (movement.unitPrice || 0);
    });

    const data = [
        ['ملخص تقرير حركة المخزون'],
        [''],
        ['معلومات عامة'],
        ['فترة التقرير', `من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}`],
        ['إجمالي عدد الحركات', totalMovements],
        ['إجمالي الكمية الداخلة', totalIn],
        ['إجمالي الكمية الخارجة', totalOut],
        ['صافي الحركة', totalIn - totalOut],
        ['إجمالي القيمة', totalValue],
        [''],
        ['التوزيع حسب نوع الحركة'],
        ['نوع الحركة', 'عدد الحركات', 'الكمية', 'القيمة']
    ];

    // إضافة بيانات أنواع الحركات
    Object.keys(typeGroups).forEach(type => {
        const group = typeGroups[type];
        data.push([
            type,
            group.count,
            group.quantity,
            group.value
        ]);
    });

    data.push(['']);
    data.push(['التوزيع حسب المخزن']);
    data.push(['المخزن', 'عدد الحركات', 'الكمية', 'القيمة']);

    // إضافة بيانات المخازن
    Object.keys(warehouseGroups).forEach(warehouse => {
        const group = warehouseGroups[warehouse];
        data.push([
            warehouse,
            group.count,
            group.quantity,
            group.value
        ]);
    });

    data.push(['']);
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }, { wch: 15 }, { wch: 15 }];

    return worksheet;
}

/**
 * إنشاء ورقة أرصدة المخزون
 */
function createStockBalanceSheet() {
    const headers = [
        'كود الصنف',
        'اسم الصنف',
        'المخزن',
        'الكمية الحالية',
        'الوحدة',
        'الحد الأدنى',
        'سعر التكلفة',
        'سعر البيع',
        'قيمة المخزون',
        'حالة المخزون'
    ];

    const data = appData.products.map(product => {
        const warehouse = appData.warehouses.find(w => w.id === product.warehouseId);
        const stockValue = product.quantity * product.costPrice;
        const isLowStock = product.quantity <= product.minQuantity;
        const stockStatus = product.quantity === 0 ? 'نفد المخزون' :
                           isLowStock ? 'مخزون منخفض' : 'مخزون آمن';

        return [
            product.code,
            product.name,
            warehouse ? warehouse.name : 'غير محدد',
            product.quantity,
            product.unit,
            product.minQuantity,
            product.costPrice,
            product.sellingPrice,
            stockValue,
            stockStatus
        ];
    });

    // حساب الإجماليات
    const totalQuantity = appData.products.reduce((sum, p) => sum + p.quantity, 0);
    const totalValue = appData.products.reduce((sum, p) => sum + (p.quantity * p.costPrice), 0);
    const lowStockCount = appData.products.filter(p => p.quantity <= p.minQuantity).length;
    const outOfStockCount = appData.products.filter(p => p.quantity === 0).length;

    // إضافة صف الإجماليات
    data.push([
        '',
        'الإجماليات',
        '',
        totalQuantity,
        '',
        '',
        '',
        '',
        totalValue,
        `منخفض: ${lowStockCount} | نفد: ${outOfStockCount}`
    ]);

    const worksheet = createFormattedWorksheet(headers, data, 'أرصدة المخزون');
    return worksheet;
}

/**
 * تصدير فواتير المبيعات إلى Excel
 */
function exportSalesInvoicesToExcel() {
    console.log('📊 تصدير فواتير المبيعات إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const customerFilter = document.getElementById('customerFilter')?.value || '';
        const statusFilter = document.getElementById('statusFilter')?.value || '';
        const fromDate = document.getElementById('salesFromDate')?.value || '';
        const toDate = document.getElementById('salesToDate')?.value || '';

        // فلترة فواتير المبيعات
        let invoices = appData.invoices.filter(inv => inv.invoiceType === 'sale');

        if (customerFilter) {
            invoices = invoices.filter(inv => inv.customerId == customerFilter);
        }

        if (statusFilter) {
            invoices = invoices.filter(inv => inv.status === statusFilter);
        }

        if (fromDate) {
            invoices = invoices.filter(inv => inv.invoiceDate >= fromDate);
        }

        if (toDate) {
            invoices = invoices.filter(inv => inv.invoiceDate <= toDate);
        }

        if (invoices.length === 0) {
            alert('لا توجد فواتير مبيعات في الفترة المحددة');
            return;
        }

        // ترتيب الفواتير حسب التاريخ
        invoices.sort((a, b) => new Date(b.invoiceDate) - new Date(a.invoiceDate));

        // إعداد البيانات للتصدير
        const headers = [
            'رقم الفاتورة',
            'التاريخ',
            'العميل',
            'المبلغ الفرعي',
            'الخصم %',
            'مبلغ الخصم',
            'الضريبة %',
            'مبلغ الضريبة',
            'المبلغ الإجمالي',
            'المدفوع',
            'المتبقي',
            'الحالة',
            'ملاحظات'
        ];

        const data = invoices.map(invoice => {
            const customer = appData.customers.find(c => c.id === invoice.customerId);
            const statusText = getInvoiceStatusText(invoice.status);

            return [
                invoice.invoiceNumber,
                invoice.invoiceDate,
                customer ? customer.name : 'غير محدد',
                invoice.subtotal || 0,
                invoice.discountRate || 0,
                invoice.discountAmount || 0,
                invoice.taxRate || 0,
                invoice.taxAmount || 0,
                invoice.totalAmount || 0,
                invoice.paidAmount || 0,
                invoice.remainingAmount || 0,
                statusText,
                invoice.notes || ''
            ];
        });

        // حساب الإجماليات
        const totalSubtotal = invoices.reduce((sum, inv) => sum + (inv.subtotal || 0), 0);
        const totalDiscount = invoices.reduce((sum, inv) => sum + (inv.discountAmount || 0), 0);
        const totalTax = invoices.reduce((sum, inv) => sum + (inv.taxAmount || 0), 0);
        const totalAmount = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
        const totalPaid = invoices.reduce((sum, inv) => sum + (inv.paidAmount || 0), 0);
        const totalRemaining = invoices.reduce((sum, inv) => sum + (inv.remainingAmount || 0), 0);

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            totalSubtotal,
            '',
            totalDiscount,
            '',
            totalTax,
            totalAmount,
            totalPaid,
            totalRemaining,
            '',
            `عدد الفواتير: ${invoices.length}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'فواتير المبيعات');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'فواتير المبيعات');

        // إضافة ورقة الملخص
        const summarySheet = createInvoicesSummarySheet(invoices, 'المبيعات', fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // إضافة ورقة تفاصيل الأصناف
        const itemsSheet = createInvoiceItemsSheet(invoices, 'المبيعات');
        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'تفاصيل الأصناف');

        // حفظ الملف
        const fileName = `فواتير_المبيعات_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير فواتير المبيعات إلى Excel بنجاح');
        showSuccessToast('تم تصدير فواتير المبيعات إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير فواتير المبيعات إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير فواتير المشتريات إلى Excel
 */
function exportPurchaseInvoicesToExcel() {
    console.log('📊 تصدير فواتير المشتريات إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const supplierFilter = document.getElementById('supplierFilter')?.value || '';
        const statusFilter = document.getElementById('purchaseStatusFilter')?.value || '';
        const fromDate = document.getElementById('purchaseFromDate')?.value || '';
        const toDate = document.getElementById('purchaseToDate')?.value || '';

        // فلترة فواتير المشتريات
        let invoices = appData.invoices.filter(inv => inv.invoiceType === 'purchase');

        if (supplierFilter) {
            invoices = invoices.filter(inv => inv.supplierId == supplierFilter);
        }

        if (statusFilter) {
            invoices = invoices.filter(inv => inv.status === statusFilter);
        }

        if (fromDate) {
            invoices = invoices.filter(inv => inv.invoiceDate >= fromDate);
        }

        if (toDate) {
            invoices = invoices.filter(inv => inv.invoiceDate <= toDate);
        }

        if (invoices.length === 0) {
            alert('لا توجد فواتير مشتريات في الفترة المحددة');
            return;
        }

        // ترتيب الفواتير حسب التاريخ
        invoices.sort((a, b) => new Date(b.invoiceDate) - new Date(a.invoiceDate));

        // إعداد البيانات للتصدير
        const headers = [
            'رقم الفاتورة',
            'التاريخ',
            'المورد',
            'المبلغ الفرعي',
            'الخصم %',
            'مبلغ الخصم',
            'الضريبة %',
            'مبلغ الضريبة',
            'المبلغ الإجمالي',
            'المدفوع',
            'المتبقي',
            'الحالة',
            'ملاحظات'
        ];

        const data = invoices.map(invoice => {
            const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
            const statusText = getInvoiceStatusText(invoice.status);

            return [
                invoice.invoiceNumber,
                invoice.invoiceDate,
                supplier ? supplier.name : 'غير محدد',
                invoice.subtotal || 0,
                invoice.discountRate || 0,
                invoice.discountAmount || 0,
                invoice.taxRate || 0,
                invoice.taxAmount || 0,
                invoice.totalAmount || 0,
                invoice.paidAmount || 0,
                invoice.remainingAmount || 0,
                statusText,
                invoice.notes || ''
            ];
        });

        // حساب الإجماليات
        const totalSubtotal = invoices.reduce((sum, inv) => sum + (inv.subtotal || 0), 0);
        const totalDiscount = invoices.reduce((sum, inv) => sum + (inv.discountAmount || 0), 0);
        const totalTax = invoices.reduce((sum, inv) => sum + (inv.taxAmount || 0), 0);
        const totalAmount = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
        const totalPaid = invoices.reduce((sum, inv) => sum + (inv.paidAmount || 0), 0);
        const totalRemaining = invoices.reduce((sum, inv) => sum + (inv.remainingAmount || 0), 0);

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            totalSubtotal,
            '',
            totalDiscount,
            '',
            totalTax,
            totalAmount,
            totalPaid,
            totalRemaining,
            '',
            `عدد الفواتير: ${invoices.length}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'فواتير المشتريات');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'فواتير المشتريات');

        // إضافة ورقة الملخص
        const summarySheet = createInvoicesSummarySheet(invoices, 'المشتريات', fromDate, toDate);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص التقرير');

        // إضافة ورقة تفاصيل الأصناف
        const itemsSheet = createInvoiceItemsSheet(invoices, 'المشتريات');
        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'تفاصيل الأصناف');

        // حفظ الملف
        const fileName = `فواتير_المشتريات_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير فواتير المشتريات إلى Excel بنجاح');
        showSuccessToast('تم تصدير فواتير المشتريات إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير فواتير المشتريات إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * الحصول على نص حالة الفاتورة
 */
function getInvoiceStatusText(status) {
    const statuses = {
        'draft': 'مسودة',
        'confirmed': 'مؤكدة',
        'cancelled': 'ملغية',
        'paid': 'مدفوعة'
    };
    return statuses[status] || status;
}

/**
 * إنشاء ورقة ملخص الفواتير
 */
function createInvoicesSummarySheet(invoices, type, fromDate, toDate) {
    // حساب الإحصائيات
    const totalInvoices = invoices.length;
    const totalAmount = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);
    const totalPaid = invoices.reduce((sum, inv) => sum + (inv.paidAmount || 0), 0);
    const totalRemaining = invoices.reduce((sum, inv) => sum + (inv.remainingAmount || 0), 0);
    const totalDiscount = invoices.reduce((sum, inv) => sum + (inv.discountAmount || 0), 0);
    const totalTax = invoices.reduce((sum, inv) => sum + (inv.taxAmount || 0), 0);

    // تجميع حسب الحالة
    const statusGroups = {};
    invoices.forEach(invoice => {
        const status = getInvoiceStatusText(invoice.status);
        if (!statusGroups[status]) {
            statusGroups[status] = { count: 0, amount: 0 };
        }
        statusGroups[status].count++;
        statusGroups[status].amount += invoice.totalAmount || 0;
    });

    // تجميع حسب العميل/المورد
    const clientGroups = {};
    invoices.forEach(invoice => {
        let clientName = 'غير محدد';
        if (type === 'المبيعات') {
            const customer = appData.customers.find(c => c.id === invoice.customerId);
            clientName = customer ? customer.name : 'غير محدد';
        } else {
            const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
            clientName = supplier ? supplier.name : 'غير محدد';
        }

        if (!clientGroups[clientName]) {
            clientGroups[clientName] = { count: 0, amount: 0 };
        }
        clientGroups[clientName].count++;
        clientGroups[clientName].amount += invoice.totalAmount || 0;
    });

    const data = [
        [`ملخص تقرير فواتير ${type}`],
        [''],
        ['معلومات عامة'],
        ['فترة التقرير', `من ${fromDate || 'البداية'} إلى ${toDate || 'النهاية'}`],
        ['إجمالي عدد الفواتير', totalInvoices],
        ['إجمالي المبلغ', totalAmount],
        ['إجمالي المدفوع', totalPaid],
        ['إجمالي المتبقي', totalRemaining],
        ['إجمالي الخصومات', totalDiscount],
        ['إجمالي الضرائب', totalTax],
        [''],
        ['التوزيع حسب الحالة'],
        ['الحالة', 'عدد الفواتير', 'المبلغ']
    ];

    // إضافة بيانات الحالات
    Object.keys(statusGroups).forEach(status => {
        const group = statusGroups[status];
        data.push([
            status,
            group.count,
            group.amount
        ]);
    });

    data.push(['']);
    data.push([`التوزيع حسب ${type === 'المبيعات' ? 'العملاء' : 'الموردين'}`]);
    data.push([type === 'المبيعات' ? 'العميل' : 'المورد', 'عدد الفواتير', 'المبلغ']);

    // إضافة بيانات العملاء/الموردين
    Object.keys(clientGroups).forEach(client => {
        const group = clientGroups[client];
        data.push([
            client,
            group.count,
            group.amount
        ]);
    });

    data.push(['']);
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }, { wch: 20 }];

    return worksheet;
}

/**
 * إنشاء ورقة تفاصيل الأصناف
 */
function createInvoiceItemsSheet(invoices, type) {
    const headers = [
        'رقم الفاتورة',
        'التاريخ',
        type === 'المبيعات' ? 'العميل' : 'المورد',
        'كود الصنف',
        'اسم الصنف',
        'الكمية',
        'الوحدة',
        'سعر الوحدة',
        'المجموع'
    ];

    const data = [];

    invoices.forEach(invoice => {
        let clientName = 'غير محدد';
        if (type === 'المبيعات') {
            const customer = appData.customers.find(c => c.id === invoice.customerId);
            clientName = customer ? customer.name : 'غير محدد';
        } else {
            const supplier = appData.suppliers.find(s => s.id === invoice.supplierId);
            clientName = supplier ? supplier.name : 'غير محدد';
        }

        if (invoice.items && invoice.items.length > 0) {
            invoice.items.forEach(item => {
                const product = appData.products.find(p => p.id === item.productId);
                data.push([
                    invoice.invoiceNumber,
                    invoice.invoiceDate,
                    clientName,
                    product ? product.code : 'غير محدد',
                    product ? product.name : 'غير محدد',
                    item.quantity,
                    product ? product.unit : '',
                    item.unitPrice,
                    item.totalAmount || (item.quantity * item.unitPrice)
                ]);
            });
        }
    });

    // حساب الإجماليات
    const totalQuantity = data.reduce((sum, row) => sum + (row[5] || 0), 0);
    const totalAmount = data.reduce((sum, row) => sum + (row[8] || 0), 0);

    // إضافة صف الإجماليات
    data.push([
        '',
        '',
        'الإجماليات',
        '',
        '',
        totalQuantity,
        '',
        '',
        totalAmount
    ]);

    const worksheet = createFormattedWorksheet(headers, data, `تفاصيل أصناف ${type}`);
    return worksheet;
}

/**
 * تصدير الأصناف إلى Excel
 */
function exportProductsToExcel() {
    console.log('📊 تصدير الأصناف إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // الحصول على الفلاتر المطبقة
        const searchText = document.getElementById('productSearch')?.value.toLowerCase() || '';
        const categoryFilter = document.getElementById('productCategoryFilter')?.value || '';
        const warehouseFilter = document.getElementById('productWarehouseFilter')?.value || '';
        const stockFilter = document.getElementById('productStockFilter')?.value || '';

        // فلترة الأصناف
        let products = appData.products;

        if (searchText) {
            products = products.filter(product => {
                const name = product.name.toLowerCase();
                const code = product.code.toLowerCase();
                const description = (product.description || '').toLowerCase();
                return name.includes(searchText) || code.includes(searchText) || description.includes(searchText);
            });
        }

        if (categoryFilter) {
            products = products.filter(product => product.category === categoryFilter);
        }

        if (warehouseFilter) {
            products = products.filter(product => product.warehouseId == warehouseFilter);
        }

        if (stockFilter) {
            products = products.filter(product => {
                const quantity = product.quantity || 0;
                const minQuantity = product.minQuantity || 0;
                switch (stockFilter) {
                    case 'low': return quantity <= minQuantity && quantity > 0;
                    case 'normal': return quantity > minQuantity;
                    case 'out': return quantity === 0;
                    default: return true;
                }
            });
        }

        if (products.length === 0) {
            alert('لا توجد أصناف تطابق معايير البحث');
            return;
        }

        // إعداد البيانات للتصدير
        const headers = [
            'كود الصنف',
            'اسم الصنف',
            'الوصف',
            'الفئة',
            'المخزن',
            'الوحدة',
            'سعر التكلفة',
            'سعر البيع',
            'الكمية الحالية',
            'الحد الأدنى',
            'قيمة المخزون',
            'هامش الربح %',
            'حالة المخزون'
        ];

        const data = products.map(product => {
            const warehouse = appData.warehouses.find(w => w.id === product.warehouseId);
            const stockValue = product.quantity * product.costPrice;
            const profitMargin = product.sellingPrice > 0 ?
                ((product.sellingPrice - product.costPrice) / product.sellingPrice * 100).toFixed(2) : 0;
            const isLowStock = product.quantity <= product.minQuantity;
            const stockStatus = product.quantity === 0 ? 'نفد المخزون' :
                               isLowStock ? 'مخزون منخفض' : 'مخزون آمن';

            return [
                product.code,
                product.name,
                product.description || '',
                product.category || '',
                warehouse ? warehouse.name : 'غير محدد',
                product.unit,
                product.costPrice,
                product.sellingPrice,
                product.quantity,
                product.minQuantity,
                stockValue,
                profitMargin,
                stockStatus
            ];
        });

        // حساب الإجماليات
        const totalQuantity = products.reduce((sum, p) => sum + p.quantity, 0);
        const totalValue = products.reduce((sum, p) => sum + (p.quantity * p.costPrice), 0);
        const lowStockCount = products.filter(p => p.quantity <= p.minQuantity).length;
        const outOfStockCount = products.filter(p => p.quantity === 0).length;

        // إضافة صف الإجماليات
        data.push([
            '',
            'الإجماليات',
            '',
            '',
            '',
            '',
            '',
            '',
            totalQuantity,
            '',
            totalValue,
            '',
            `منخفض: ${lowStockCount} | نفد: ${outOfStockCount}`
        ]);

        // إنشاء ورقة العمل
        const worksheet = createFormattedWorksheet(headers, data, 'قائمة الأصناف');

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'الأصناف');

        // إضافة ورقة الملخص
        const summarySheet = createProductsSummarySheet(products);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'ملخص الأصناف');

        // حفظ الملف
        const fileName = `قائمة_الأصناف_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير الأصناف إلى Excel بنجاح');
        showSuccessToast('تم تصدير الأصناف إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير الأصناف إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * إنشاء ورقة ملخص الأصناف
 */
function createProductsSummarySheet(products) {
    // حساب الإحصائيات
    const totalProducts = products.length;
    const totalValue = products.reduce((sum, p) => sum + (p.quantity * p.costPrice), 0);
    const lowStockCount = products.filter(p => p.quantity <= p.minQuantity).length;
    const outOfStockCount = products.filter(p => p.quantity === 0).length;
    const normalStockCount = products.filter(p => p.quantity > p.minQuantity).length;

    // تجميع حسب الفئة
    const categoryGroups = {};
    products.forEach(product => {
        const category = product.category || 'بدون فئة';
        if (!categoryGroups[category]) {
            categoryGroups[category] = { count: 0, value: 0 };
        }
        categoryGroups[category].count++;
        categoryGroups[category].value += product.quantity * product.costPrice;
    });

    // تجميع حسب المخزن
    const warehouseGroups = {};
    products.forEach(product => {
        const warehouse = appData.warehouses.find(w => w.id === product.warehouseId);
        const warehouseName = warehouse ? warehouse.name : 'غير محدد';
        if (!warehouseGroups[warehouseName]) {
            warehouseGroups[warehouseName] = { count: 0, value: 0 };
        }
        warehouseGroups[warehouseName].count++;
        warehouseGroups[warehouseName].value += product.quantity * product.costPrice;
    });

    const data = [
        ['ملخص تقرير الأصناف'],
        [''],
        ['معلومات عامة'],
        ['إجمالي عدد الأصناف', totalProducts],
        ['إجمالي قيمة المخزون', totalValue],
        ['أصناف بمخزون آمن', normalStockCount],
        ['أصناف بمخزون منخفض', lowStockCount],
        ['أصناف نفد مخزونها', outOfStockCount],
        [''],
        ['التوزيع حسب الفئة'],
        ['الفئة', 'عدد الأصناف', 'قيمة المخزون']
    ];

    // إضافة بيانات الفئات
    Object.keys(categoryGroups).forEach(category => {
        const group = categoryGroups[category];
        data.push([
            category,
            group.count,
            group.value
        ]);
    });

    data.push(['']);
    data.push(['التوزيع حسب المخزن']);
    data.push(['المخزن', 'عدد الأصناف', 'قيمة المخزون']);

    // إضافة بيانات المخازن
    Object.keys(warehouseGroups).forEach(warehouse => {
        const group = warehouseGroups[warehouse];
        data.push([
            warehouse,
            group.count,
            group.value
        ]);
    });

    data.push(['']);
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }, { wch: 20 }];

    return worksheet;
}

/**
 * تصدير الفاتورة الحالية (العادية) إلى Excel
 */
function exportCurrentInvoiceToExcel() {
    console.log('📊 تصدير الفاتورة الحالية إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // جمع بيانات الفاتورة من النموذج
        const invoiceData = collectCurrentInvoiceData();

        if (!invoiceData) {
            alert('يرجى ملء بيانات الفاتورة أولاً');
            return;
        }

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();

        // ورقة بيانات الفاتورة
        const invoiceSheet = createCurrentInvoiceSheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, invoiceSheet, 'بيانات الفاتورة');

        // ورقة تفاصيل الأصناف
        const itemsSheet = createCurrentInvoiceItemsSheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'تفاصيل الأصناف');

        // ورقة الملخص المالي
        const summarySheet = createCurrentInvoiceSummarySheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص المالي');

        // حفظ الملف
        const fileName = `فاتورة_${invoiceData.type === 'sale' ? 'مبيعات' : 'مشتريات'}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير الفاتورة الحالية إلى Excel بنجاح');
        showSuccessToast('تم تصدير الفاتورة إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير الفاتورة الحالية إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * تصدير الفاتورة الخاصة الحالية إلى Excel
 */
function exportCurrentCustomInvoiceToExcel() {
    console.log('📊 تصدير الفاتورة الخاصة الحالية إلى Excel...');

    try {
        if (typeof XLSX === 'undefined') {
            alert('مكتبة Excel غير متوفرة. يرجى إعادة تحميل الصفحة.');
            return;
        }

        // جمع بيانات الفاتورة الخاصة من النموذج
        const invoiceData = collectCurrentCustomInvoiceData();

        if (!invoiceData) {
            alert('يرجى ملء بيانات الفاتورة أولاً');
            return;
        }

        // إنشاء المصنف
        const workbook = XLSX.utils.book_new();

        // ورقة بيانات الفاتورة
        const invoiceSheet = createCurrentCustomInvoiceSheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, invoiceSheet, 'بيانات الفاتورة الخاصة');

        // ورقة تفاصيل الأصناف
        const itemsSheet = createCurrentCustomInvoiceItemsSheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, itemsSheet, 'تفاصيل الأصناف');

        // ورقة الملخص المالي
        const summarySheet = createCurrentCustomInvoiceSummarySheet(invoiceData);
        XLSX.utils.book_append_sheet(workbook, summarySheet, 'الملخص المالي');

        // حفظ الملف
        const fileName = `فاتورة_خاصة_${invoiceData.type === 'sale' ? 'مبيعات' : 'مشتريات'}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

        console.log('✅ تم تصدير الفاتورة الخاصة الحالية إلى Excel بنجاح');
        showSuccessToast('تم تصدير الفاتورة الخاصة إلى Excel بنجاح!');

    } catch (error) {
        console.error('❌ خطأ في تصدير الفاتورة الخاصة الحالية إلى Excel:', error);
        alert('حدث خطأ أثناء تصدير Excel: ' + error.message);
    }
}

/**
 * جمع بيانات الفاتورة العادية الحالية من النموذج
 */
function collectCurrentInvoiceData() {
    try {
        const invoiceType = document.getElementById('invoiceType')?.value;
        const clientId = document.getElementById('clientSelect')?.value;
        const invoiceDate = document.getElementById('invoiceDate')?.value;
        const dueDate = document.getElementById('dueDate')?.value;
        const notes = document.getElementById('invoiceNotes')?.value || '';

        if (!invoiceType || !clientId || !invoiceDate) {
            return null;
        }

        // الحصول على بيانات العميل/المورد
        let client = null;
        if (invoiceType === 'sale') {
            client = appData.customers.find(c => c.id == clientId);
        } else {
            client = appData.suppliers.find(s => s.id == clientId);
        }

        if (!client) {
            return null;
        }

        // جمع عناصر الفاتورة
        const items = [];
        const itemsTable = document.getElementById('invoiceItemsTable');
        if (itemsTable) {
            const rows = itemsTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 6) {
                    const productSelect = cells[0].querySelector('select');
                    const quantityInput = cells[1].querySelector('input');
                    const priceInput = cells[2].querySelector('input');

                    if (productSelect && quantityInput && priceInput) {
                        const productId = productSelect.value;
                        const product = appData.products.find(p => p.id == productId);

                        if (product && quantityInput.value && priceInput.value) {
                            items.push({
                                productId: productId,
                                productName: product.name,
                                productCode: product.code || '',
                                quantity: parseFloat(quantityInput.value) || 0,
                                price: parseFloat(priceInput.value) || 0,
                                total: (parseFloat(quantityInput.value) || 0) * (parseFloat(priceInput.value) || 0),
                                unit: product.unit || 'قطعة'
                            });
                        }
                    }
                }
            });
        }

        // حساب الإجماليات
        const subtotal = items.reduce((sum, item) => sum + item.total, 0);
        const discountPercentage = parseFloat(document.getElementById('discountPercentage')?.value) || 0;
        const taxPercentage = parseFloat(document.getElementById('taxPercentage')?.value) || 0;

        const discountAmount = (subtotal * discountPercentage) / 100;
        const taxAmount = ((subtotal - discountAmount) * taxPercentage) / 100;
        const totalAmount = subtotal - discountAmount + taxAmount;

        return {
            type: invoiceType,
            client: client,
            date: invoiceDate,
            dueDate: dueDate,
            notes: notes,
            items: items,
            subtotal: subtotal,
            discountPercentage: discountPercentage,
            discountAmount: discountAmount,
            taxPercentage: taxPercentage,
            taxAmount: taxAmount,
            totalAmount: totalAmount
        };

    } catch (error) {
        console.error('خطأ في جمع بيانات الفاتورة:', error);
        return null;
    }
}

/**
 * جمع بيانات الفاتورة الخاصة الحالية من النموذج
 */
function collectCurrentCustomInvoiceData() {
    try {
        const invoiceType = document.getElementById('customInvoiceType')?.value;
        const clientType = document.getElementById('customClientType')?.value;
        const invoiceDate = document.getElementById('customInvoiceDate')?.value;
        const dueDate = document.getElementById('customDueDate')?.value;
        const notes = document.getElementById('customInvoiceNotes')?.value || '';
        const currency = document.getElementById('customCurrency')?.value || 'SYP';

        if (!invoiceType || !clientType || !invoiceDate) {
            return null;
        }

        // جمع بيانات العميل/المورد
        let client = {};
        if (clientType === 'existing') {
            const clientId = document.getElementById('customExistingClient')?.value;
            if (invoiceType === 'sale') {
                client = appData.customers.find(c => c.id == clientId) || {};
            } else {
                client = appData.suppliers.find(s => s.id == clientId) || {};
            }
        } else {
            // عميل جديد
            client = {
                name: document.getElementById('customClientName')?.value || '',
                phone: document.getElementById('customClientPhone')?.value || '',
                email: document.getElementById('customClientEmail')?.value || '',
                address: document.getElementById('customClientAddress')?.value || ''
            };
        }

        // جمع عناصر الفاتورة
        const items = [];
        const itemsTable = document.getElementById('customInvoiceItemsTable');
        if (itemsTable) {
            const rows = itemsTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 6) {
                    const nameInput = cells[0].querySelector('input');
                    const quantityInput = cells[1].querySelector('input');
                    const priceInput = cells[2].querySelector('input');
                    const unitInput = cells[3].querySelector('input');

                    if (nameInput && quantityInput && priceInput && nameInput.value) {
                        items.push({
                            productName: nameInput.value,
                            quantity: parseFloat(quantityInput.value) || 0,
                            price: parseFloat(priceInput.value) || 0,
                            total: (parseFloat(quantityInput.value) || 0) * (parseFloat(priceInput.value) || 0),
                            unit: unitInput?.value || 'قطعة'
                        });
                    }
                }
            });
        }

        // حساب الإجماليات
        const subtotal = items.reduce((sum, item) => sum + item.total, 0);
        const discountPercentage = parseFloat(document.getElementById('customDiscountPercentage')?.value) || 0;
        const taxPercentage = parseFloat(document.getElementById('customTaxPercentage')?.value) || 0;

        const discountAmount = (subtotal * discountPercentage) / 100;
        const taxAmount = ((subtotal - discountAmount) * taxPercentage) / 100;
        const totalAmount = subtotal - discountAmount + taxAmount;

        return {
            type: invoiceType,
            client: client,
            clientType: clientType,
            date: invoiceDate,
            dueDate: dueDate,
            notes: notes,
            currency: currency,
            items: items,
            subtotal: subtotal,
            discountPercentage: discountPercentage,
            discountAmount: discountAmount,
            taxPercentage: taxPercentage,
            taxAmount: taxAmount,
            totalAmount: totalAmount
        };

    } catch (error) {
        console.error('خطأ في جمع بيانات الفاتورة الخاصة:', error);
        return null;
    }
}

/**
 * إنشاء ورقة بيانات الفاتورة العادية
 */
function createCurrentInvoiceSheet(invoiceData) {
    const data = [];

    // العنوان
    data.push(['بيانات الفاتورة']);
    data.push(['']);

    // معلومات الفاتورة
    data.push(['نوع الفاتورة', invoiceData.type === 'sale' ? 'فاتورة مبيعات' : 'فاتورة مشتريات']);
    data.push(['التاريخ', formatDate(invoiceData.date)]);
    data.push(['تاريخ الاستحقاق', formatDate(invoiceData.dueDate)]);
    data.push(['']);

    // معلومات العميل/المورد
    data.push([invoiceData.type === 'sale' ? 'بيانات العميل' : 'بيانات المورد']);
    data.push(['الاسم', invoiceData.client.name || '']);
    data.push(['الهاتف', invoiceData.client.phone || '']);
    data.push(['البريد الإلكتروني', invoiceData.client.email || '']);
    data.push(['العنوان', invoiceData.client.address || '']);
    data.push(['']);

    // الملخص المالي
    data.push(['الملخص المالي']);
    data.push(['المجموع الفرعي', formatCurrency(invoiceData.subtotal)]);
    data.push(['نسبة الخصم (%)', invoiceData.discountPercentage]);
    data.push(['مبلغ الخصم', formatCurrency(invoiceData.discountAmount)]);
    data.push(['نسبة الضريبة (%)', invoiceData.taxPercentage]);
    data.push(['مبلغ الضريبة', formatCurrency(invoiceData.taxAmount)]);
    data.push(['المجموع النهائي', formatCurrency(invoiceData.totalAmount)]);
    data.push(['']);

    // الملاحظات
    if (invoiceData.notes) {
        data.push(['الملاحظات', invoiceData.notes]);
        data.push(['']);
    }

    // معلومات التصدير
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 30 }];

    return worksheet;
}

/**
 * إنشاء ورقة تفاصيل أصناف الفاتورة العادية
 */
function createCurrentInvoiceItemsSheet(invoiceData) {
    const headers = ['اسم الصنف', 'كود الصنف', 'الكمية', 'الوحدة', 'سعر الوحدة', 'المجموع'];
    const data = [headers];

    invoiceData.items.forEach(item => {
        data.push([
            item.productName,
            item.productCode || '',
            item.quantity,
            item.unit,
            formatCurrency(item.price),
            formatCurrency(item.total)
        ]);
    });

    // إضافة صف الإجمالي
    data.push(['']);
    data.push(['', '', '', '', 'الإجمالي:', formatCurrency(invoiceData.subtotal)]);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [
        { wch: 25 }, // اسم الصنف
        { wch: 15 }, // كود الصنف
        { wch: 10 }, // الكمية
        { wch: 10 }, // الوحدة
        { wch: 15 }, // سعر الوحدة
        { wch: 15 }  // المجموع
    ];

    return worksheet;
}

/**
 * إنشاء ورقة الملخص المالي للفاتورة العادية
 */
function createCurrentInvoiceSummarySheet(invoiceData) {
    const data = [];

    data.push(['الملخص المالي للفاتورة']);
    data.push(['']);

    data.push(['البيان', 'القيمة']);
    data.push(['عدد الأصناف', invoiceData.items.length]);
    data.push(['إجمالي الكمية', invoiceData.items.reduce((sum, item) => sum + item.quantity, 0)]);
    data.push(['المجموع الفرعي', formatCurrency(invoiceData.subtotal)]);
    data.push(['نسبة الخصم', invoiceData.discountPercentage + '%']);
    data.push(['مبلغ الخصم', formatCurrency(invoiceData.discountAmount)]);
    data.push(['المجموع بعد الخصم', formatCurrency(invoiceData.subtotal - invoiceData.discountAmount)]);
    data.push(['نسبة الضريبة', invoiceData.taxPercentage + '%']);
    data.push(['مبلغ الضريبة', formatCurrency(invoiceData.taxAmount)]);
    data.push(['المجموع النهائي', formatCurrency(invoiceData.totalAmount)]);
    data.push(['']);

    // تحليل الأصناف
    data.push(['تحليل الأصناف']);
    data.push(['الصنف', 'الكمية', 'النسبة من الإجمالي']);

    const totalQuantity = invoiceData.items.reduce((sum, item) => sum + item.quantity, 0);
    invoiceData.items.forEach(item => {
        const percentage = totalQuantity > 0 ? ((item.quantity / totalQuantity) * 100).toFixed(2) : 0;
        data.push([item.productName, item.quantity, percentage + '%']);
    });

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 20 }, { wch: 20 }];

    return worksheet;
}

/**
 * إنشاء ورقة بيانات الفاتورة الخاصة
 */
function createCurrentCustomInvoiceSheet(invoiceData) {
    const data = [];

    // العنوان
    data.push(['بيانات الفاتورة الخاصة']);
    data.push(['']);

    // معلومات الفاتورة
    data.push(['نوع الفاتورة', invoiceData.type === 'sale' ? 'فاتورة مبيعات خاصة' : 'فاتورة مشتريات خاصة']);
    data.push(['التاريخ', formatDate(invoiceData.date)]);
    data.push(['تاريخ الاستحقاق', formatDate(invoiceData.dueDate)]);
    data.push(['العملة', getCurrencyName(invoiceData.currency)]);
    data.push(['']);

    // معلومات العميل/المورد
    data.push([invoiceData.type === 'sale' ? 'بيانات العميل' : 'بيانات المورد']);
    data.push(['نوع العميل', invoiceData.clientType === 'existing' ? 'عميل موجود' : 'عميل جديد']);
    data.push(['الاسم', invoiceData.client.name || '']);
    data.push(['الهاتف', invoiceData.client.phone || '']);
    data.push(['البريد الإلكتروني', invoiceData.client.email || '']);
    data.push(['العنوان', invoiceData.client.address || '']);
    data.push(['']);

    // الملخص المالي
    data.push(['الملخص المالي']);
    data.push(['المجموع الفرعي', formatCurrency(invoiceData.subtotal) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['نسبة الخصم (%)', invoiceData.discountPercentage]);
    data.push(['مبلغ الخصم', formatCurrency(invoiceData.discountAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['نسبة الضريبة (%)', invoiceData.taxPercentage]);
    data.push(['مبلغ الضريبة', formatCurrency(invoiceData.taxAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['المجموع النهائي', formatCurrency(invoiceData.totalAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['']);

    // الملاحظات
    if (invoiceData.notes) {
        data.push(['الملاحظات', invoiceData.notes]);
        data.push(['']);
    }

    // معلومات التصدير
    data.push(['معلومات التصدير']);
    data.push(['تاريخ التصدير', new Date().toLocaleDateString('ar-SA')]);
    data.push(['وقت التصدير', new Date().toLocaleTimeString('ar-SA')]);
    data.push(['المطور', 'MOHANNAD AHMAD - SAM PRO']);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 30 }];

    return worksheet;
}

/**
 * إنشاء ورقة تفاصيل أصناف الفاتورة الخاصة
 */
function createCurrentCustomInvoiceItemsSheet(invoiceData) {
    const headers = ['اسم الصنف', 'الكمية', 'الوحدة', 'سعر الوحدة', 'المجموع'];
    const data = [headers];

    invoiceData.items.forEach(item => {
        data.push([
            item.productName,
            item.quantity,
            item.unit,
            formatCurrency(item.price) + ' ' + getCurrencySymbol(invoiceData.currency),
            formatCurrency(item.total) + ' ' + getCurrencySymbol(invoiceData.currency)
        ]);
    });

    // إضافة صف الإجمالي
    data.push(['']);
    data.push(['', '', '', 'الإجمالي:', formatCurrency(invoiceData.subtotal) + ' ' + getCurrencySymbol(invoiceData.currency)]);

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [
        { wch: 25 }, // اسم الصنف
        { wch: 10 }, // الكمية
        { wch: 10 }, // الوحدة
        { wch: 15 }, // سعر الوحدة
        { wch: 15 }  // المجموع
    ];

    return worksheet;
}

/**
 * إنشاء ورقة الملخص المالي للفاتورة الخاصة
 */
function createCurrentCustomInvoiceSummarySheet(invoiceData) {
    const data = [];

    data.push(['الملخص المالي للفاتورة الخاصة']);
    data.push(['']);

    data.push(['البيان', 'القيمة']);
    data.push(['العملة', getCurrencyName(invoiceData.currency)]);
    data.push(['عدد الأصناف', invoiceData.items.length]);
    data.push(['إجمالي الكمية', invoiceData.items.reduce((sum, item) => sum + item.quantity, 0)]);
    data.push(['المجموع الفرعي', formatCurrency(invoiceData.subtotal) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['نسبة الخصم', invoiceData.discountPercentage + '%']);
    data.push(['مبلغ الخصم', formatCurrency(invoiceData.discountAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['المجموع بعد الخصم', formatCurrency(invoiceData.subtotal - invoiceData.discountAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['نسبة الضريبة', invoiceData.taxPercentage + '%']);
    data.push(['مبلغ الضريبة', formatCurrency(invoiceData.taxAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['المجموع النهائي', formatCurrency(invoiceData.totalAmount) + ' ' + getCurrencySymbol(invoiceData.currency)]);
    data.push(['']);

    // تحليل الأصناف
    data.push(['تحليل الأصناف']);
    data.push(['الصنف', 'الكمية', 'النسبة من الإجمالي', 'القيمة']);

    const totalQuantity = invoiceData.items.reduce((sum, item) => sum + item.quantity, 0);
    const totalValue = invoiceData.items.reduce((sum, item) => sum + item.total, 0);

    invoiceData.items.forEach(item => {
        const quantityPercentage = totalQuantity > 0 ? ((item.quantity / totalQuantity) * 100).toFixed(2) : 0;
        const valuePercentage = totalValue > 0 ? ((item.total / totalValue) * 100).toFixed(2) : 0;
        data.push([
            item.productName,
            item.quantity,
            quantityPercentage + '%',
            valuePercentage + '%'
        ]);
    });

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    worksheet['!cols'] = [{ wch: 25 }, { wch: 15 }, { wch: 20 }, { wch: 15 }];

    return worksheet;
}
